{"config":{"indexing":"full","lang":["es","en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Tutorial de programaci\u00f3n en Python orientado al estudiante de Bioqu\u00edmica En el siguiente enlace puede acceder al Trabajo de Fin de Grado Introducci\u00f3n El estudiante del Grado de Bioqu\u00edmica en la Universidad de C\u00f3rdoba adquiere una gran cantidad de competencias, entre las que se incluyen competencias bioinform\u00e1ticas. Entre estas, destacan los conceptos aprendidos sobre el empleo del sistema operativo Linux , y el uso del lenguaje de programaci\u00f3n R . En este Trabajo de Fin de Grado se presenta un tutorial aplicado al estudiante de Bioqu\u00edmica sobre un lenguaje de programaci\u00f3n denominado Python . Python se trata de uno de los lenguajes m\u00e1s utilizados en la actualidad por empresas de todo el mundo, destacando por su potencia y facilidad de aprendizaje. Este tutorial se enmarca dentro del \u00e1mbito de la materia Inform\u00e1tica aplicada a la Bioqu\u00edmica , impartida durante el primer cuatrimestre del segundo curso del Grado de Bioqu\u00edmica de la Universidad de C\u00f3rdoba. Importancia de la Bioinform\u00e1tica La bioinform\u00e1tica, seg\u00fan el National Human Genome Research Institute (NHGRI) , es una subdisciplina de la biolog\u00eda y de la inform\u00e1tica que se ocupa de la adquisici\u00f3n, el almacenamiento, el an\u00e1lisis y la difusi\u00f3n de datos biol\u00f3gicos. Dentro de este campo encontramos el an\u00e1lisis de secuencias y datos gen\u00f3micos, predicci\u00f3n gen/prote\u00edna, construcci\u00f3n de redes biol\u00f3gicas, etc. Introduction to bioinformatics (2020). Ashutosh Bele. En la actualidad, la parte m\u00e1s importante de la bioinform\u00e1tica es el an\u00e1lisis e interpretaci\u00f3n de los datos de las mol\u00e9culas biol\u00f3gicas, un proceso que se denomina biolog\u00eda computacional . Por tanto, la bioinform\u00e1tica es importante por su gran aporte al desarrollo de la biolog\u00eda en la investigaci\u00f3n b\u00e1sica, haciendo posible el tratamiento de la extensa informaci\u00f3n que contiene los genomas de los organismos. Enlaces de inter\u00e9s What is bioinformatics? An introduction and overview. Luscombe, N. M. et al. (2001) Yearbook of medical informatics. All biology is computational biology. Markowetz, F. (2017). PLoS biology. Computing for biologists. Python programming and principles. Libeskind-Hadas, R., & Bush, E. (2014). Cambridge University Press.","title":"Inicio"},{"location":"#tutorial-de-programacion-en-python-orientado-al-estudiante-de-bioquimica","text":"En el siguiente enlace puede acceder al Trabajo de Fin de Grado","title":"Tutorial de programaci\u00f3n en Python orientado al estudiante de Bioqu\u00edmica"},{"location":"#introduccion","text":"El estudiante del Grado de Bioqu\u00edmica en la Universidad de C\u00f3rdoba adquiere una gran cantidad de competencias, entre las que se incluyen competencias bioinform\u00e1ticas. Entre estas, destacan los conceptos aprendidos sobre el empleo del sistema operativo Linux , y el uso del lenguaje de programaci\u00f3n R . En este Trabajo de Fin de Grado se presenta un tutorial aplicado al estudiante de Bioqu\u00edmica sobre un lenguaje de programaci\u00f3n denominado Python . Python se trata de uno de los lenguajes m\u00e1s utilizados en la actualidad por empresas de todo el mundo, destacando por su potencia y facilidad de aprendizaje. Este tutorial se enmarca dentro del \u00e1mbito de la materia Inform\u00e1tica aplicada a la Bioqu\u00edmica , impartida durante el primer cuatrimestre del segundo curso del Grado de Bioqu\u00edmica de la Universidad de C\u00f3rdoba.","title":"Introducci\u00f3n"},{"location":"#importancia-de-la-bioinformatica","text":"La bioinform\u00e1tica, seg\u00fan el National Human Genome Research Institute (NHGRI) , es una subdisciplina de la biolog\u00eda y de la inform\u00e1tica que se ocupa de la adquisici\u00f3n, el almacenamiento, el an\u00e1lisis y la difusi\u00f3n de datos biol\u00f3gicos. Dentro de este campo encontramos el an\u00e1lisis de secuencias y datos gen\u00f3micos, predicci\u00f3n gen/prote\u00edna, construcci\u00f3n de redes biol\u00f3gicas, etc. Introduction to bioinformatics (2020). Ashutosh Bele. En la actualidad, la parte m\u00e1s importante de la bioinform\u00e1tica es el an\u00e1lisis e interpretaci\u00f3n de los datos de las mol\u00e9culas biol\u00f3gicas, un proceso que se denomina biolog\u00eda computacional . Por tanto, la bioinform\u00e1tica es importante por su gran aporte al desarrollo de la biolog\u00eda en la investigaci\u00f3n b\u00e1sica, haciendo posible el tratamiento de la extensa informaci\u00f3n que contiene los genomas de los organismos. Enlaces de inter\u00e9s What is bioinformatics? An introduction and overview. Luscombe, N. M. et al. (2001) Yearbook of medical informatics. All biology is computational biology. Markowetz, F. (2017). PLoS biology. Computing for biologists. Python programming and principles. Libeskind-Hadas, R., & Bush, E. (2014). Cambridge University Press.","title":"Importancia de la Bioinform\u00e1tica"},{"location":"10_Ej_complementarios/","text":"A continuaci\u00f3n encontrar\u00e1 una serie de ejercicios relacionados con la manipulaci\u00f3n de fragmentos nucleot\u00eddicos o proteicos para que siga practicando en Python. En el siguiente enlace se puede descargar un script de Python con todos los ejercicios y soluciones que forman esta secci\u00f3n. Ejercicio 1 Describa dos posibles formas para conocer el n\u00famero de nucle\u00f3tidos o amino\u00e1cidos almacenados como una lista. Se propone como lista el siguiente fragmento de ADN: ATGCGCGATCG Respuesta 1 2 3 4 5 6 7 8 9 10 11 segmento_DNA = [ 'A' , 'T' , 'G' , 'C' , 'G' , 'C' , 'G' , 'A' , 'T' , 'C' , 'G' ] def longitud_cadena ( segmento_DNA ): cont = 0 for i in segmento_DNA : cont += 1 return cont longitud_cadena ( segmento_DNA ) #Otra opci\u00f3n: longitud = len ( segmento_DNA ) print ( longitud ) Ejercicio 2 Determine cu\u00e1ntas veces aparece el nucle\u00f3tido citosina (C) en un fragmento de ADN almacenado como cadena. Se propone de ejemplo el siguiente fragmento de ADN: ATGCGCGATCGTAGCT Respuesta 1 2 3 4 5 6 7 8 9 10 11 12 13 segmento_DNA = 'ATGCGCGATCGTAGCT' bp = 'C' print ( 'N\u00ba de citosinas:' , segmento_DNA . count ( bp )) #La opci\u00f3n m\u00e1s simple contador = 0 #Otra opci\u00f3n numero = 0 while numero < len ( segmento_DNA ): if bp == segmento_DNA [ numero ]: contador += 1 numero += 1 print ( 'N\u00ba de citosinas (bucle while):' , contador ) Ejercicio 3 Determine el porcentaje de guanina-citosina (GC) en un fragmento de ADN almacenado como cadena. Se propone de ejemplo el siguiente fragmento de ADN: AGGCGCGTTGTGATGGTCGTAGCT Respuesta 1 2 3 4 5 6 7 8 segmento_DNA = \"AGGCGCGTTGTGATGGTCGTAGCT\" total_nucleotidos = len ( segmento_DNA ) numero_g = segmento_DNA . count ( \"G\" ) numero_c = segmento_DNA . count ( \"C\" ) contenido_gc = (( numero_g + numero_c ) / total_nucleotidos ) * 100 print ( f \"El porcentaje GC del fragmento es: { contenido_gc } \" ) Ejercicio 4 Defina una funci\u00f3n que convierta un fragmento de ADN a su ARN complementario. Respuesta 1 2 3 4 5 6 def ADN_ARN ( segmento_DNA ): transcripcion = { \"G\" : \"C\" , \"C\" : \"G\" , \"T\" : \"A\" , \"A\" : \"U\" } cadena_arn = \"\" for caracter in segmento_DNA : cadena_arn += transcripcion [ caracter ] return cadena_arn Ejercicio 5 Determine si el \u00faltimo cod\u00f3n de un fragmento de ADN es un cod\u00f3n de inicio, stop u otro. El fragmento se ha almacenado como cadena en la respuesta, aunque puede solucionarlo como desee. Se propone de ejemplo el siguiente fragmento de ADN: ATGCGCGATCGTAGCT Respuesta 1 2 3 4 5 6 7 8 9 10 11 segmento_DNA = 'ATGCGCGATCGTAGCT' codon1 = segmento_DNA [ - 3 :] if ( codon1 == 'ATG' ): print ( ' El codon' , codon1 , 'es un codon de inicio.' ) elif (( codon1 == 'TAA' ) or ( codon1 == 'TAG' ) or ( codon1 == 'TGA' )): print ( 'El codon' , codon1 , 'es un codon stop.' ) else : print ( 'El codon' , codon1 , 'es un codon diferente.' ) Ejercicio 6 Defina una funci\u00f3n que muestre la posici\u00f3n del primer nucle\u00f3tido que constituye el cod\u00f3n de inicio en un fragmento de ADN. Respuesta 1 2 3 4 5 6 7 def codon_inicio ( segmento_DNA ): for i in range ( len ( segmento_DNA )): triplete = segmento_DNA [ i : i + 3 ] if triplete == 'ATG' : return ( i + 1 ) # Ya que la posici\u00f3n 1 es 0 else : return ( \"No hay cod\u00f3n de inicio.\" ) Ejercicio 7 Imprima por pantalla todos los codones que comiencen por timina (T). Respuesta 1 2 3 4 5 6 7 bases = [ 'A' , 'T' , 'C' , 'G' ] print ( 'Codones que empiezan por T:' ) for segunda_base in bases : print ( 'Codones que empiezan por T' + segunda_base ) for tercera_base in bases : print ( 'T' + segunda_base + tercera_base ) Ejercicio 8 Determine el porcentaje de amino\u00e1cidos de un fragmento proteico almacenado como cadena. Se propone de ejemplo el siguiente fragmento: PCCWWLAKVRMIKGEFYVIEYAACD Respuesta 1 2 3 4 5 6 7 8 secuencia_proteica = \"PCCWWLAKVRMIKGEFYVIEYAACD\" aminoacidos = set ( secuencia_proteica ) secuencia_length = len ( secuencia_proteica ) for aminoacido in aminoacidos : aminoacido_count = secuencia_proteica . count ( aminoacido ) aminoacido_porcentaje = ( aminoacido_count / secuencia_length ) * 100 print ( aminoacido , \":\" , round ( aminoacido_porcentaje , 1 ))","title":"Ejercicios complementarios"},{"location":"10_Ej_complementarios/#ejercicio-1","text":"Describa dos posibles formas para conocer el n\u00famero de nucle\u00f3tidos o amino\u00e1cidos almacenados como una lista. Se propone como lista el siguiente fragmento de ADN: ATGCGCGATCG Respuesta 1 2 3 4 5 6 7 8 9 10 11 segmento_DNA = [ 'A' , 'T' , 'G' , 'C' , 'G' , 'C' , 'G' , 'A' , 'T' , 'C' , 'G' ] def longitud_cadena ( segmento_DNA ): cont = 0 for i in segmento_DNA : cont += 1 return cont longitud_cadena ( segmento_DNA ) #Otra opci\u00f3n: longitud = len ( segmento_DNA ) print ( longitud )","title":"Ejercicio 1"},{"location":"10_Ej_complementarios/#ejercicio-2","text":"Determine cu\u00e1ntas veces aparece el nucle\u00f3tido citosina (C) en un fragmento de ADN almacenado como cadena. Se propone de ejemplo el siguiente fragmento de ADN: ATGCGCGATCGTAGCT Respuesta 1 2 3 4 5 6 7 8 9 10 11 12 13 segmento_DNA = 'ATGCGCGATCGTAGCT' bp = 'C' print ( 'N\u00ba de citosinas:' , segmento_DNA . count ( bp )) #La opci\u00f3n m\u00e1s simple contador = 0 #Otra opci\u00f3n numero = 0 while numero < len ( segmento_DNA ): if bp == segmento_DNA [ numero ]: contador += 1 numero += 1 print ( 'N\u00ba de citosinas (bucle while):' , contador )","title":"Ejercicio 2"},{"location":"10_Ej_complementarios/#ejercicio-3","text":"Determine el porcentaje de guanina-citosina (GC) en un fragmento de ADN almacenado como cadena. Se propone de ejemplo el siguiente fragmento de ADN: AGGCGCGTTGTGATGGTCGTAGCT Respuesta 1 2 3 4 5 6 7 8 segmento_DNA = \"AGGCGCGTTGTGATGGTCGTAGCT\" total_nucleotidos = len ( segmento_DNA ) numero_g = segmento_DNA . count ( \"G\" ) numero_c = segmento_DNA . count ( \"C\" ) contenido_gc = (( numero_g + numero_c ) / total_nucleotidos ) * 100 print ( f \"El porcentaje GC del fragmento es: { contenido_gc } \" )","title":"Ejercicio 3"},{"location":"10_Ej_complementarios/#ejercicio-4","text":"Defina una funci\u00f3n que convierta un fragmento de ADN a su ARN complementario. Respuesta 1 2 3 4 5 6 def ADN_ARN ( segmento_DNA ): transcripcion = { \"G\" : \"C\" , \"C\" : \"G\" , \"T\" : \"A\" , \"A\" : \"U\" } cadena_arn = \"\" for caracter in segmento_DNA : cadena_arn += transcripcion [ caracter ] return cadena_arn","title":"Ejercicio 4"},{"location":"10_Ej_complementarios/#ejercicio-5","text":"Determine si el \u00faltimo cod\u00f3n de un fragmento de ADN es un cod\u00f3n de inicio, stop u otro. El fragmento se ha almacenado como cadena en la respuesta, aunque puede solucionarlo como desee. Se propone de ejemplo el siguiente fragmento de ADN: ATGCGCGATCGTAGCT Respuesta 1 2 3 4 5 6 7 8 9 10 11 segmento_DNA = 'ATGCGCGATCGTAGCT' codon1 = segmento_DNA [ - 3 :] if ( codon1 == 'ATG' ): print ( ' El codon' , codon1 , 'es un codon de inicio.' ) elif (( codon1 == 'TAA' ) or ( codon1 == 'TAG' ) or ( codon1 == 'TGA' )): print ( 'El codon' , codon1 , 'es un codon stop.' ) else : print ( 'El codon' , codon1 , 'es un codon diferente.' )","title":"Ejercicio 5"},{"location":"10_Ej_complementarios/#ejercicio-6","text":"Defina una funci\u00f3n que muestre la posici\u00f3n del primer nucle\u00f3tido que constituye el cod\u00f3n de inicio en un fragmento de ADN. Respuesta 1 2 3 4 5 6 7 def codon_inicio ( segmento_DNA ): for i in range ( len ( segmento_DNA )): triplete = segmento_DNA [ i : i + 3 ] if triplete == 'ATG' : return ( i + 1 ) # Ya que la posici\u00f3n 1 es 0 else : return ( \"No hay cod\u00f3n de inicio.\" )","title":"Ejercicio 6"},{"location":"10_Ej_complementarios/#ejercicio-7","text":"Imprima por pantalla todos los codones que comiencen por timina (T). Respuesta 1 2 3 4 5 6 7 bases = [ 'A' , 'T' , 'C' , 'G' ] print ( 'Codones que empiezan por T:' ) for segunda_base in bases : print ( 'Codones que empiezan por T' + segunda_base ) for tercera_base in bases : print ( 'T' + segunda_base + tercera_base )","title":"Ejercicio 7"},{"location":"10_Ej_complementarios/#ejercicio-8","text":"Determine el porcentaje de amino\u00e1cidos de un fragmento proteico almacenado como cadena. Se propone de ejemplo el siguiente fragmento: PCCWWLAKVRMIKGEFYVIEYAACD Respuesta 1 2 3 4 5 6 7 8 secuencia_proteica = \"PCCWWLAKVRMIKGEFYVIEYAACD\" aminoacidos = set ( secuencia_proteica ) secuencia_length = len ( secuencia_proteica ) for aminoacido in aminoacidos : aminoacido_count = secuencia_proteica . count ( aminoacido ) aminoacido_porcentaje = ( aminoacido_count / secuencia_length ) * 100 print ( aminoacido , \":\" , round ( aminoacido_porcentaje , 1 ))","title":"Ejercicio 8"},{"location":"11_Biopython/","text":"\u00bfQu\u00e9 es Biopython? Biopython es el paquete de Python m\u00e1s utilizado en el \u00e1mbito de la biolog\u00eda computacional, con una gran cantidad de herramientas \u00fatiles en bioinform\u00e1tica. Esta librer\u00eda fue creada en el a\u00f1o 1999 por Brad Chapman y Jeff Chang , y actualmente est\u00e1 soportada por el Proyecto Biopython , una asociaci\u00f3n de desarrolladores de herramientas en el lenguaje inform\u00e1tico Python. Ventajas Compatibilidad con diferentes formatos. Biopython permite el tratamiento de archivos en diversos formatos utilizados en el \u00e1mbito biol\u00f3gico, presentando total compatibilidad con los archivos procedentes de GenBank, PDB, PubMed, ExPASy,... Tratamiento de secuencias. Permite trabajar con secuencias tanto nucleot\u00eddicas como aminoac\u00eddicas. Herramientas incorporadas. Herramientas para realizar operaciones comunes en secuencias, como traducci\u00f3n, transcripci\u00f3n, longitud de cadenas... Herramientas para realizar alineamientos de secuencias. Amplio uso. Al ser el paquete m\u00e1s utilizado en biolog\u00eda computacional junto a Bioconductor , encontrar\u00e1 una gran cantidad de foros actualizados que le ser\u00e1n de ayuda. Adem\u00e1s se incluyen herramientas nuevas que le pueden ser de utilidad, as\u00ed como actualizaciones de las herramientas anteriores. Como bioqu\u00edmico interesado en la bioinform\u00e1tica, es fundamental que se familiarice con Biopython, ya que es una herramienta fundamental actualmente en el lenguaje Python para el tratamiento de datos biol\u00f3gicos. Instalaci\u00f3n En primer lugar debe instalar el paquete biopython . Para ello, como se explic\u00f3 en el apartado PyCharm , vaya a la ventana de Python Packages e inst\u00e1lelo. Instalaci\u00f3n del paquete biopython Otra opci\u00f3n ser\u00eda utilizar el siguiente comando en la consola: pip install biopython Trabajo con secuencias Sin duda los elementos u objetos centrales en el tratamiento de datos biol\u00f3gicos son las secuencias . En este apartado aprender\u00e1 algunos conceptos b\u00e1sicos sobre el maneja del objeto Seq , objeto m\u00e1s utilizado en el paquete Biopython, que contiene muchas funciones en com\u00fan con las cadenas. Ejemplos 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 from Bio.Seq import Seq seq = Seq ( \"AGAGCCGACTTTACT\" ) num_nucleotidos = len ( seq ) #Almacena el n\u00famero de nucle\u00f3tidos primer_nucleotido = seq [ 0 ] #Almacena el primer nucle\u00f3tido num_guaninas = seq . count ( \"G\" ) #Almacena el n\u00famero de guaninas cortar_secuencia = seq [ 0 : 6 ] #Almacena la secuencia desde el primer nucle\u00f3tido hasta el s\u00e9ptimo cadena_complementaria = seq [:: - 1 ] #Almacena la cadena complementaria #Porcentaje de G+C porcentaje_GC = 100 * float ( seq . count ( \"G\" ) + seq . count ( \"C\" )) / len ( seq ) #Biopython ya contiene un m\u00f3dulo integrado que simplifica esta tarea from Bio.SeqUtils import GC calculo_porcentaje_GC = GC ( seq ) Transcripci\u00f3n y traducci\u00f3n En primer lugar veamos c\u00f3mo realizar una transcripci\u00f3n en Biopython. Para esto crearemos objetos Seq para la hebra de ADN codificante y la hebra molde/template: 1 2 3 4 5 from Bio.Seq import Seq seq_codificante = Seq ( \"AATGCGGCTTAACCACAC\" ) print ( seq_codificante ) seq_molde = seq_codificante . reverse_complement () print ( seq_molde ) Debe tener en cuenta que la secuencia molde es le\u00edda por la polimerasa en direcci\u00f3n 3'-5', por lo que la secuencia codificante aparece en direcci\u00f3n 5'-3'. Por tanto se muestra por pantalla la siguiente salida: AATGCGGCTTAACCACAC GTGTGGTTAAGCCGCATT Una vez hemos creado la hebra molde y la codificante, vamos a llevar a cabo la transcripci\u00f3n. Recuerde que la transcripci\u00f3n se puede ver como la sustituci\u00f3n de A->U en la hebra codificante. 1 2 3 4 5 from Bio.Seq import Seq seq_codificante = Seq ( \"AATGCGGCTTAACCACAC\" ) seq_molde = seq_codificante . reverse_complement () ARN_mensajero = seq_codificante . transcribe () print ( ARN_mensajero ) Si \u00fanicamente posee la hebra molde, y desea realizar la transcripci\u00f3n sin necesidad de crear la hebra codificante, puede utilizar la acci\u00f3n combinada de ambas funciones anteriores: 1 2 3 from Bio.Seq import Seq seq_molde = Seq ( \"GTGTGGTTAAGCCGCATT\" ) ARN_mensajero = seq_molde . reverse_complement () . transcribe () Por \u00faltimo, si lo que desea es realizar una transcripci\u00f3n inversa, es decir, pasar del ARN mensajero a la hebra codificante: 1 2 3 from Bio.Seq import Seq ARN_mensajero = Seq ( \"AAUGCGGCUUAACCACAC\" ) seq_codificante = ARN_mensajero . back_transcribe () Una vez finalizada la transcripci\u00f3n, veamos c\u00f3mo llevar a cabo la traducci\u00f3n partiendo de la secuencia nucleot\u00eddica del ARN mensajero obtenida. 1 2 3 4 5 6 7 from Bio.Seq import Seq seq_codificante = Seq ( \"AATGCGGCTTTACCACAC\" ) seq_molde = seq_codificante . reverse_complement () ARN_mensajero = seq_codificante . transcribe () proteina = ARN_mensajero . translate () print ( proteina ) Esto deber\u00eda mostrar por pantalla la siguiente secuencia aminoac\u00eddica: NAALPH Tambi\u00e9n podr\u00eda realizar la traducci\u00f3n desde la hebra codificante de ADN. En este caso se ha introducido una mutaci\u00f3n en la secuencia: T 11 -> A 11. 1 2 3 4 5 6 from Bio.Seq import Seq seq_codificante = Seq ( \"AATGCGGCTTAACCACAC\" ) seq_molde = seq_codificante . reverse_complement () proteina = seq_codificante . translate () print ( proteina ) En este caso, el resultado ser\u00e1 el siguiente: NAA * PH # El asterisco indica que es un cod\u00f3n stop. Aunque a priori parece un m\u00e9todo muy b\u00e1sico, hay algunos aspectos adicionales en la traducci\u00f3n que hay que tener en cuenta. La tabla de traducci\u00f3n que utiliza Biopython se basa en la tablas indicadas en el NCBI , utilizando de forma predeterminada el c\u00f3digo gen\u00e9tico est\u00e1ndar ( Tabla 1 ). En algunos casos necesitar\u00e1 utilizar tablas de traducci\u00f3n diferente, por ejemplo si est\u00e1 tratando con un genoma mitocondrial. Esto se puede indicar de diversas formas: 1 2 3 4 5 6 from Bio.Seq import Seq seq_codificante = Seq ( \"AATGCGGCTTAACCACAC\" ) seq_molde = seq_codificante . reverse_complement () proteina = seq_codificante . translate ( table = \"Vertebrate Mitochondrial\" ) #1\u00aa Forma proteina = seq_codificante . translate ( table = 2 ) # 2\u00aa Forma Como ha visto en uno de los ejemplos anteriores, Biopython va a detectar un cod\u00f3n de parada indic\u00e1ndolo con un asterisco. Lo normal es que desee llevar a cabo la traducci\u00f3n hasta este cod\u00f3n y detenerse: 1 2 3 4 5 6 from Bio.Seq import Seq seq_codificante = Seq ( \"AATGCGGCTTAACCACAC\" ) seq_molde = seq_codificante . reverse_complement () proteina = seq_codificante . translate ( to_stop = True ) print ( proteina ) Trabajo con archivos Para trabajar con distintos formatos de archivos de secuencias, el m\u00f3dulo m\u00e1s utilizado en BioPython es Bio.seqIO . Para poder aprender a trabajar con archivos, necesitaremos uno que se desee analizar. Tenga en cuenta las caracter\u00edsticas de su ordenador, ya que si utiliza un archivo FASTA demasiado pesado este proceso puede llegar a ser muy lento o incluso interminable. En este caso se propone como ejemplo un archivo FASTA que contiene todas las entradas resultantes de una b\u00fasqueda en la base de datos nucleotide de NCBI . La b\u00fasqueda elegida es de Viola tricolor (denominada com\u00fanmente pensamiento ), y puede descargarse el archivo en el siguiente enlace . Flor de pensamiento. Fuente: pharysol.es Lectura de archivos de secuencia Para leer archivos de secuencia la funci\u00f3n m\u00e1s utilizada es Bio.SeqIO.parse() . Esta funci\u00f3n, utilizada normalmente en un bucle for , necesita dos argumentos: Nombre del fichero que se desea leer. Indicador del tipo de archivo que se desea leer, en letras min\u00fasculas. 1 2 3 4 5 6 7 from Bio import SeqIO for seq_record in SeqIO . parse ( \"viola_tricolor.fasta\" , \"fasta\" ): print ( seq_record . id ) #Devuelve el ID identificador print ( seq_record . description ) #Devuelve la descripci\u00f3n print ( repr ( seq_record . seq )) #Devuelve la secuencia print ( len ( seq_record )) #Devuelve la longitud de la secuencia Deber\u00e1 haber obtenido un resultado similar al siguiente: HM590365.1 HM590365.1 Viola tricolor voucher personal collection:I. Hiiesalu 74 tRNA-Leu (trnL) gene, partial sequence; chloroplast Seq('GACTTAATTGGATTGAGCCTTGGTATGGAAACTTACTAAGTGGATAACTTTCAA...GAG') 506 JZ084087.1 JZ084087.1 MHV6 MHV-Cold stress-Viola library Viola tricolor cDNA clone MHV6, mRNA sequence Seq('AACAGACAGTTGTATGCTGCGTTCGGGAGGATGAATCCCTCCCGANAAGGAATC...CTT') 177 ... ... MG009035.1 MG009035.1 Crithmum maritimum clone CM_04 microsatellite sequence Seq('AAAACATTCATCTCCTGCACTCTTAAAATTCTTCTATTCTTTTCAATCCAATCT...TCA') 174 MG009034.1 MG009034.1 Crithmum maritimum clone CM_03 microsatellite sequence Seq('GCTTACTTAGTTGAGATCCAGTGTTTAGATTGTACATCACTTTCTTGGAGGTTC...GGA') 144 Lectura de otros formatos de archivo Si en lugar de leer un archivo en formato .fasta, desea leer cualquier otro archivo \u00fanicamente tiene que cambiar el valor del segundo argumento. Por ejemplo, si desea leer un archivo .gbk (procedente de GenBank): \"fasta\" -> \"genbank\". En el siguiente enlace puede encontrar una tabla con todas las opciones. En muchos casos trabajar\u00e1 con archivos gzip, muy utilizados por herramientas bioinform\u00e1ticas. Puede informarse sobre el m\u00f3dulo gzip , aunque es tan simple como utilizar gzip.open() . Aunque esta opci\u00f3n de lectura le puede ser \u00fatil, en muchas ocasiones desear\u00e1 trabajar con cada lectura de forma individual. Para ello tiene que trabajar con este archivo como si fuera un objeto m\u00e1s, como se muestra a continuaci\u00f3n: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 from Bio import SeqIO entradas = SeqIO . parse ( \"viola_tricolor.fasta\" , \"fasta\" ) print ( \"LA PRIMERA ENTRADA:\" ) primera_entrada = next ( entradas ) print ( primera_entrada . id ) print ( primera_entrada . description ) print ( len ( primera_entrada )) print ( \"LA SEGUNDA ENTRADA:\" ) segunda_entrada = next ( entradas ) print ( segunda_entrada . id ) print ( segunda_entrada . description ) print ( len ( segunda_entrada )) Salida por pantalla LA PRIMERA ENTRADA: HM590365.1 HM590365.1 Viola tricolor voucher personal collection:I. Hiiesalu 74 tRNA-Leu (trnL) gene, partial sequence; chloroplast 506 LA SEGUNDA ENTRADA: JZ084087.1 JZ084087.1 MHV6 MHV-Cold stress-Viola library Viola tricolor cDNA clone MHV6, mRNA sequence 177 Extracci\u00f3n y escritura de datos El archivo FASTA utilizado de ejemplo empieza de la siguiente forma: >HM590365.1 Viola tricolor voucher personal collection:I. Hiiesalu 74 tRNA-Leu (trnL) gene, partial sequence; chloroplast GACTTAATTGGATTGAGCCTTGGTATGGAAACTTACTAAGTGGATAA.... .... Como puede comprobar, el identificador es el primer argumento en la descripci\u00f3n, informaci\u00f3n que podemos utilizar para obtener una lista con todos los IDs: 1 2 3 4 5 6 from Bio import SeqIO especies = [] for seq_record in SeqIO . parse ( \"viola_tricolor.fasta\" , \"fasta\" ): especies . append ( seq_record . description . split ()[ 0 ]) print ( especies ) Esto te devuelve por pantalla la siguiente lista: ['HM590365.1', 'JZ084087.1', 'JZ084086.1', 'JZ084085.1','JZ084084.1', ...] Lectura de otros formatos de archivo Le recomendamos que pruebe este m\u00e9todo con archivos de EMBL o GenBank. La modificaci\u00f3n de datos en el archivo es muy simple. Veamos como modificar por ejemplo el ID de la primera entrada: 1 2 3 4 5 6 7 from Bio import SeqIO entradas = SeqIO . parse ( \"viola_tricolor.fasta\" , \"fasta\" ) primera_entrada = next ( entradas ) print ( primera_entrada ) primera_entrada . id = \"ID_NUEVO\" print ( primera_entrada ) Graficaci\u00f3n En este apartado se muestran algunos ejemplos de gr\u00e1ficas utilizando la librer\u00eda matplotlib junto al m\u00f3dulo Bio.SeqIO . Para ello se va a utilizar de nuevo el archivo viola_tricolor.fasta . HISTOGRAMA Veamos c\u00f3mo realizar un histograma que compare las longitudes de las secuencias en un rango de tama\u00f1os. En primer lugar, necesitamos almacenar en una lista la longitud de todas las secuencias: 1 2 3 4 from Bio import SeqIO longitudes = [ len ( rec ) for rec in SeqIO . parse ( \"viola_tricolor.fasta\" , \"fasta\" )] print ( longitudes ) Ahora utilizaremos la librer\u00eda matplotlib para poder representarlos. 1 2 3 4 5 6 7 8 9 10 11 12 from Bio import SeqIO from matplotlib import pylab longitudes = [ len ( rec ) for rec in SeqIO . parse ( \"viola_tricolor.fasta\" , \"fasta\" )] pylab . hist ( longitudes , bins = 20 ) pylab . title ( \" %i Secuencias \\n Tama\u00f1os desde %i a %i \" % ( len ( longitudes ), min ( longitudes ), max ( longitudes )) ) pylab . xlabel ( \"Tama\u00f1o de secuencias (bp)\" ) pylab . ylabel ( \"Recuento\" ) pylab . show () FIGURA DE L\u00cdNEAS Para mostrar un ejemplo de un gr\u00e1fico de l\u00edneas, la mejor opci\u00f3n es representar una de las gr\u00e1ficas que m\u00e1s utilizar\u00e1: representaci\u00f3n GC% . En primer lugar necesitamos una lista con los porcentajes GC de las secuencias, utilizando el m\u00f3dulo GC empleado al principio de esta p\u00e1gina. Vamos a realizar una representaci\u00f3n ordenada de menores a mayores valores de GC%, para observar la variaci\u00f3n. 1 2 3 4 5 from Bio import SeqIO from Bio.SeqUtils import GC valores_GC = sorted ( GC ( rec . seq ) for rec in SeqIO . parse ( \"viola_tricolor.fasta\" , \"fasta\" )) print ( valores_GC ) Una vez obtenida la lista, representamos: 1 2 3 4 5 6 7 8 9 10 11 12 13 from Bio import SeqIO from Bio.SeqUtils import GC from matplotlib import pylab valores_GC = sorted ( GC ( rec . seq ) for rec in SeqIO . parse ( \"viola_tricolor.fasta\" , \"fasta\" )) pylab . plot ( valores_GC , linewidth = 3 , color = \"red\" ) pylab . title ( \" %i Secuencias \\n GC %% desde %0.1f a %0.1f \" % ( len ( valores_GC ), min ( valores_GC ), max ( valores_GC )) ) pylab . xlabel ( \"Genes\" ) pylab . ylabel ( \"GC%\" ) pylab . show () Blast Blast ( Basic Local Alignment Search Tool ) es una herramienta inform\u00e1tica de alineamiento de secuencias local, tanto de \u00e1cidos nucleicos como de secuencias proteicas. Blastn . Nucle\u00f3tido > nucle\u00f3tido. Blastp . Prote\u00edna > prote\u00edna. Tblastn . Prote\u00edna > secuencia nucleot\u00eddica traducida. Blastx . Secuencia nucleot\u00eddica traducida > prote\u00edna. Esta herramienta, sin duda una de las m\u00e1s importantes en bioinform\u00e1tica, est\u00e1 disponible desde Biopython con el m\u00f3dulo Bio.blast.NCBIWWW . La funci\u00f3n qblast() en el m\u00f3dulo Bio.blast.NCBIWWW necesita tres argumentos: Primer argumento . Programa blast que usar\u00e1: blastn, blastp... Segundo argumento . Base de datos en la que basar\u00e1 la b\u00fasqueda. Ej. Nucleotide database (nt) . Tercer argumento . Una cadena que contenga tu secuencia de entrada (query sequence). Si la secuencia la tiene en un archivo FASTA, simplemente almac\u00e9nela como una cadena. Aunque estos son los argumentos principales y necesarios para su funcionamiento, qblast() tiene muchos m\u00e1s argumentos y par\u00e1metros disponibles para modificar. Al igual que con todas las funciones, puede informarse en: 1 2 from Bio.Blast import NCBIWWW help ( NCBIWWW . qblast ) Ejemplo pr\u00e1ctico En primer lugar desc\u00e1rguese un archivo FASTA en su directorio de trabajo. Le proponemos como ejemplo el siguiente archivo NAC_solanum_arabidopsis , la secuencia codificante del gen NAC de Solanum lycopersicum y de Arabidopsis thaliana . Importe el m\u00f3dulo NCBIWWW y asigne la secuencia FASTA a una variable. 1 2 from Bio.Blast import NCBIWWW archivo_fasta = open ( \"NAC_solanum_arabidopsis.fasta\" ) . read () >>> archivo_fasta >NC_015441.3:2856617-2858593 Solanum lycopersicum cultivar Heinz 1706 chromosome 4, SL3.0, whole genome shotgun sequence GTCAAAGAAACTGAAACTAACACAAAGCAGGAGCAGGAGCAGCAACAAACAGAGAGAAGAAAACAGAGGA AGATAAGAGGAAAATTTATCGAATTCGAATCGAGAGAAAAGGGGAAGTGAA .... >NC_003070.9:c11867154-11865229 Arabidopsis thaliana chromosome 1 sequence GTCAAAGAAACTGAAACTAACACAAAGCAGGAGCAGGAGCAGCAACAAACAGAGAGAAGAAAACAGAGGAAGATA GAGTCCTACCACCATTATAAATTATCTCATCGTTTGCTTTCTTTTTTTTAA .... Utilice la funci\u00f3n qblast() con los par\u00e1metros indicados anteriormente, como a continuaci\u00f3n: 1 2 3 from Bio.Blast import NCBIWWW archivo_fasta = open ( \"NAC_solanum_arabidopsis.fasta\" ) . read () resultados = NCBIWWW . qblast ( \"blastn\" , \"nt\" , archivo_fasta ) Guarde el objeto resultados a un archivo .xml que puede ser analizado. 1 2 3 4 5 6 7 from Bio.Blast import NCBIWWW archivo_fasta = open ( \"NAC_solanum_arabidopsis.fasta\" ) . read () resultados = NCBIWWW . qblast ( \"blastn\" , \"nt\" , archivo_fasta ) with open ( 'results.xml' , 'w' ) as save_file : blast_results = resultados . read () save_file . write ( blast_results ) Tras esto, habr\u00e1 obtenido el siguiente archivo xml . Tenga en cuenta que el an\u00e1lisis con Biopython de los resultados del Blast tambi\u00e9n le puede ser \u00fatil para resultados obtenidos en un Blast online. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 from Bio.Blast import NCBIWWW from Bio.Blast import NCBIXML resultado = open ( \"results.xml\" , 'r' ) registro_blast = NCBIXML . parse ( resultado ) registro_blast = next ( registro_blast ) E_VALUE_THRESH = 0.04 for alignment in registro_blast . alignments : for hsp in alignment . hsps : if hsp . expect < E_VALUE_THRESH : print ( \"****Alineamiento****\" ) print ( \"Secuencia:\" , alignment . title ) print ( \"Tama\u00f1o:\" , alignment . length ) print ( \"e-value:\" , hsp . expect ) print ( hsp . query [ 0 : 75 ] + \"...\" ) print ( hsp . match [ 0 : 75 ] + \"...\" ) print ( hsp . sbjct [ 0 : 75 ] + \"...\" ) Esto le dar\u00e1 como resultado el siguiente an\u00e1lisis Blast. A partir de este an\u00e1lisis puede realizar diferentes acciones, encontrando m\u00e1s informaci\u00f3n en el siguiente enlace a mayor informaci\u00f3n. ****Alineamiento**** Secuencia: gi|1273855477|gb|CP023760.1| Solanum lycopersicum cultivar I-3 chromosome 4 Tama\u00f1o: 66477049 e-value: 0.0 GTCAAAGAAACTGAAACTAACACAAAGCAGGAGCAGGAGCAGCAACAAACAGAGAGAAGAAAACAGAGGAAGATA... |||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||... GTCAAAGAAACTGAAACTAACACAAAGCAGGAGCAGGAGCAGCAACAAACAGAGAGAAGAAAACAGAGGAAGATA... ****Alineamiento**** Secuencia: gi|1273855477|gb|CP023760.1| Solanum lycopersicum cultivar I-3 chromosome 4 Tama\u00f1o: 66477049 e-value: 1.44242e-12 GGTGAAAAAGAGTGGTATTTTTTCTCACCAAGGGATAGAAAATATCCGAACGGTTCACGGCCGAACCGAGCAGCA... || |||||||| |||||||| ||| | ||| | |||||||||||||| || ||| |||| || | ||||| ... GGAGAAAAAGAATGGTATTTCTTCACCCCACGTGATAGAAAATATCCAAATGGTGTTAGGCCAAATAGGGCAGCT... ****Alineamiento**** Secuencia: gi|1273855477|gb|CP023760.1| Solanum lycopersicum cultivar I-3 chromosome 4 Tama\u00f1o: 66477049 e-value: 4.71528e-06 AACACAACTTCAAATCTCAAAAA-TCACAATTTCAAAAACTCATAGATTTCAACT------TCTATATTCAAACA... || ||||| ||||| | ||||| || ||| |||||||||||| || |||||||| ||||| |||||||... AAAACAACATCAAAGTTAAAAAAATCGCAACTTCAAAAACTCAAAG-TTTCAACTTCGAAATCTATGATCAAACA... ... B\u00fasqueda en bases de datos: PubMed y Medline Desde Python es posible realizar b\u00fasquedas y obtener informaci\u00f3n de muchas de las principales fuentes de datos en el \u00e1mbito bioqu\u00edmico, como Pubmed y Medline . Veamos c\u00f3mo realizar una consulta en PubMed, en este caso se quiere consultar todos los art\u00edculos relacionados con Thermus aquaticus , una bacteria term\u00f3fila. Para esto utilizaremos el m\u00f3dulo Bio.Entrez , un sistema que da acceso a todas las bases del NCBI. Lo primero que queremos conocer es el n\u00famero de art\u00edculos que est\u00e1n relacionados con esta bacteria. 1 2 3 4 5 6 7 from Bio import Entrez entrez . email = \"victorfernandezramirez1@hotmail.com\" #Importante indicar su usuario busqueda = Entrez . egquery ( term = \"thermus aquaticus\" ) #Indicar la b\u00fasqueda deseada registro = Entrez . read ( busqueda ) #Leer esta b\u00fasqueda y almacenarla como una variable for fila in registro [ \"eGQueryResult\" ]: #Bucle para realizar el conteo if fila [ \"DbName\" ] == \"pubmed\" : print ( fila [ \"Count\" ]) Resultado 641 Se obtiene un total de 641 entradas relacionadas con la bacteria Thermus aquaticus . Veamos c\u00f3mo obtener los IDs de estos art\u00edculos utilizando la funci\u00f3n Bio.Entrez.esearch . 1 2 3 4 5 6 from Bio import Entrez entrez . email = \"victorfernandezramirez1@hotmail.com\" busqueda = Entrez . esearch ( db = \"pubmed\" , term = \"thermus aquaticus\" , retmax = 463 ) registro = Entrez . read ( busqueda ) busqueda . close () idlist = registro [ \"IdList\" ] #Almacena todos los IDs en una lista 1 2 >>> print ( idlist ) [ '34817221' , '34773612' , '34592573' , '34459541' , ... ] A partir de esta lista de IDs, podemos importar el m\u00f3dulo Medline y utilizar la funci\u00f3n Entrez.efetch para obtener la informaci\u00f3n de estos art\u00edculos . Tenga en cuenta que el c\u00f3digo utilizado hasta el momento sigue siendo necesario, ya que necesitamos la lista creada idlist . 1 2 3 4 5 6 7 8 9 10 from Bio import Medline busqueda_medline = Entrez . efetch ( db = \"pubmed\" , id = idlist , rettype = \"medline\" , retmode = \"text\" ) registros_nuevos = Medline . parse ( busqueda_medline ) registros_nuevos = list ( registros_nuevos ) for registro_bucle in registros_nuevos : print ( \"Titulo:\" , registro_bucle . get ( \"TI\" , \"?\" )) print ( \"Autores:\" , registro_bucle . get ( \"AU\" , \"?\" )) print ( \"Fuente:\" , registro_bucle . get ( \"SO\" , \"?\" )) print ( \"\" ) Esto le devolver\u00e1 como salida el t\u00edtulo, autor/es y fuente de todos los art\u00edculos que fueron almacenados en la lista. Titulo: A Novel Trehalose Synthase for the Production of Trehalose and Trehalulose. Autores: ['Agarwal N', 'Singh SP'] Fuente: Microbiol Spectr. 2021 Dec 22;9(3):e0133321. doi: 10.1128/Spectrum.01333-21. Epub 2021 Nov 24. Titulo: Enhancing Cohort PASA Efficiency from Lessons Assimilated by Mutant Genotyping in C. elegans. Autores: ['Pandey A', 'Bhat B', 'Aggarwal ML', 'Pandey GK'] Fuente: Methods Mol Biol. 2022;2392:17-33. doi: 10.1007/978-1-0716-1799-1_2. ... Titulo: Purification, crystallization and preliminary X-ray investigation of aqualysin I, a heat-stable serine protease. Autores: ['Green PR', 'Oliver JD', 'Strickland LC', 'Toerner DR', 'Matsuzawa H', 'Ohta T'] Fuente: Acta Crystallogr D Biol Crystallogr. 1993 May 1;49(Pt 3):349-52. doi: 10.1107/S0907444992012083. Desde Python tambi\u00e9n es posible descargar secuencias en formato FASTA o como archivo de texto plano desde GenBank, utilizando \u00fanicamente un ID de referencia. Como ejemplo se utiliza el identificador NM_001247553 , que pertenece al ARN mensajero de la prote\u00edna NAC de Solanum lycopersicum , prote\u00edna ya utilizada en ejemplos anteriores. 1 2 3 4 from Bio import Entrez Entrez . email = \"victorfernandezramirez1@hotmail.com\" busqueda = Entrez . efetch ( db = \"nucleotide\" , id = \"NM_001247553\" , rettype = \"gb\" , retmode = \"text\" ) print ( busqueda . read ()) Salida por pantalla LOCUS NM_001247553 1309 bp mRNA linear PLN 25-FEB-2019 DEFINITION Solanum lycopersicum NAC domain protein (NAC1), mRNA. ACCESSION NM_001247553 VERSION NM_001247553.3 KEYWORDS RefSeq. SOURCE Solanum lycopersicum (Lycopersicon esculentum) ORGANISM Solanum lycopersicum Eukaryota; Viridiplantae; Streptophyta; Embryophyta; Tracheophyta; Spermatophyta; Magnoliopsida; eudicotyledons; Gunneridae; Pentapetalae; asterids; lamiids; Solanales; Solanaceae; Solanoideae; Solaneae; Solanum; Solanum subgen. Lycopersicon. REFERENCE 1 (bases 1 to 1309) AUTHORS Gao Y, Wei W, Zhao X, Tan X, Fan Z, Zhang Y, Jing Y, Meng L, Zhu B, Zhu H, Chen J, Jiang CZ, Grierson D, Luo Y and Fu DQ. TITLE A NAC transcription factor, NOR-like1, is a new positive regulator of tomato fruit ripening JOURNAL Hortic Res 5, 75 (2018) PUBMED 30588320 REMARK Publication Status: Online-Only REFERENCE 2 (bases 1 to 1309) AUTHORS Giovannoni J, Nguyen C, Ampofo B, Zhong S and Fei Z. TITLE The Epigenome and Transcriptional Dynamics of Fruit Ripening JOURNAL Annu Rev Plant Biol 68, 61-84 (2017) PUBMED 28226232 REMARK Review article REFERENCE 3 (bases 1 to 1309) ... PRIMARY REFSEQ_SPAN PRIMARY_IDENTIFIER PRIMARY_SPAN COMP 1-1309 AK323390.1 1-1309 FEATURES Location/Qualifiers source 1..1309 /organism=\"Solanum lycopersicum\" /mol_type=\"mRNA\" /cultivar=\"Micro-Tom\" /db_xref=\"taxon:4081\" /chromosome=\"4\" /map=\"4\" gene 1..1309 /gene=\"NAC1\" /gene_synonym=\"NC1; SlNAC1\" /note=\"NAC domain protein\" /db_xref=\"GeneID:543917\" exon 1..327 /gene=\"NAC1\" /gene_synonym=\"NC1; SlNAC1\" /inference=\"alignment:Splign:2.1.0\" misc_feature 18..20 /gene=\"NAC1\" /gene_synonym=\"NC1; SlNAC1\" /note=\"upstream in-frame stop codon\" CDS 150..1055 /gene=\"NAC1\" /gene_synonym=\"NC1; SlNAC1\" /note=\"NAC domain protein 1; NAC domain-containing protein 2\" /codon_start=1 /product=\"NAC domain protein\" /protein_id=\"NP_001234482.1\" /db_xref=\"GeneID:543917\" /translation=\"MNKGANGNQQLELPAGFRFHPTDDELVQHYLCRKCAGQSIAVSI IAEIDLYKFDPWQLPEKALYGEKEWYFFSPRDRKYPNGSRPNRAAGTGYWKATGADKP VGKPKTLGIKKALVFYAGKAPRGIKTNWIMHEYRLANVDRSAGKNNNLRLDDWVLCRI YNKKGTLEKHYNVDNKETTSFGEFDEEIKPKILPTQLAPMPPRPRSTPANDYFYFESS ESMTRMHTTNSSSGSEHVLSPCDKEVQSAPKWDEDHRNTLDFQLNYLDGLLNEPFETQ MQQQICNFDQFNNFQDMFLYMQKPY\" exon 328..602 /gene=\"NAC1\" /gene_synonym=\"NC1; SlNAC1\" /inference=\"alignment:Splign:2.1.0\" exon 603..1302 /gene=\"NAC1\" /gene_synonym=\"NC1; SlNAC1\" /inference=\"alignment:Splign:2.1.0\" ORIGIN 1 gtcaaagaaa ctgaaactaa cacaaagcag gagcaggagc agcaacaaac agagagaaga 61 aaacagagga agataagagg aaaatttatc gaattcgaat cgagagaaaa ggggaagtga 121 agttgcgaag agtgagaatt tcaaaggaaa tgaacaaagg agcaaacgga aatcagcaat 181 tggagttacc ggcgggattc agattccatc cgacagacga cgaattggtg cagcactatc .... 1081 attgagtgtg atccatgaca ttttctttgt tctttggtgg tgtaggtcaa ctttttatta 1141 agtagtttag agaagtacaa aatgctagtc aaatttggtg ggctacagca caaatgagcc 1201 ttgataagca tagccaaaga gtcgtataga agggcttatt attattgtaa ggtatgtaaa 1261 aacaaatgaa aatttgttaa tatcaagtta tcattcttca aaaaaaaaa Existe un m\u00e9todo ya visto para poder acceder a esta informaci\u00f3n de forma individual: utilizar el m\u00f3dulo Bio.SeqIO . 1 2 3 4 5 6 from Bio import Entrez from Bio import SeqIO Entrez . email = \"victorfernandezramirez1@hotmail.com\" busqueda = Entrez . efetch ( db = \"nucleotide\" , id = \"NM_001247553\" , rettype = \"gb\" , retmode = \"text\" ) registro = SeqIO . read ( busqueda , \"genbank\" ) busqueda . close () Ahora podremos acceder de forma individual a la distinta informaci\u00f3n almacenada en la variable registro : 1 2 3 4 5 6 7 8 >>> print(registro.id) NM_001247553.3 >>> print(registro.description) print(registro.description) >>> print(registro.seq) GTCAAAGAAACTGAAACTAA...GTTATCATTCTTCAAAAAAAAAA Recomendaci\u00f3n Este apartado es fundamental que lo practique, ya que en unos simples comandos puede realizar una b\u00fasqueda en PubMed y acceder a la secuencia nucleot\u00eddica de un gen problema para trabajar con ella...\u00a1y todo desde Python! Resumen En este apartado se le ha ense\u00f1ado una serie de funcionalidades de Biopython que seguro que le ser\u00e1n de ayuda, pudiendo trabajar a su antojo con archivos FASTA desde la terminal de Python. No obstante, debe saber que Biopython permite realizar funciones muy avanzadas , como trabajar con archivos de secuenciaci\u00f3n (filtrado, indexado..), realizar alineamientos m\u00faltiples (basado en herramientas como MUSCLE o ClustalW) o an\u00e1lisis de motivos de secuencias. Si quiere profundizar en sus conocimientos sobre el paquete Biopython, le recomendamos que acceda al libro de cocina de Biopython.","title":"BioPython"},{"location":"11_Biopython/#que-es-biopython","text":"Biopython es el paquete de Python m\u00e1s utilizado en el \u00e1mbito de la biolog\u00eda computacional, con una gran cantidad de herramientas \u00fatiles en bioinform\u00e1tica. Esta librer\u00eda fue creada en el a\u00f1o 1999 por Brad Chapman y Jeff Chang , y actualmente est\u00e1 soportada por el Proyecto Biopython , una asociaci\u00f3n de desarrolladores de herramientas en el lenguaje inform\u00e1tico Python.","title":"\u00bfQu\u00e9 es Biopython?"},{"location":"11_Biopython/#ventajas","text":"Compatibilidad con diferentes formatos. Biopython permite el tratamiento de archivos en diversos formatos utilizados en el \u00e1mbito biol\u00f3gico, presentando total compatibilidad con los archivos procedentes de GenBank, PDB, PubMed, ExPASy,... Tratamiento de secuencias. Permite trabajar con secuencias tanto nucleot\u00eddicas como aminoac\u00eddicas. Herramientas incorporadas. Herramientas para realizar operaciones comunes en secuencias, como traducci\u00f3n, transcripci\u00f3n, longitud de cadenas... Herramientas para realizar alineamientos de secuencias. Amplio uso. Al ser el paquete m\u00e1s utilizado en biolog\u00eda computacional junto a Bioconductor , encontrar\u00e1 una gran cantidad de foros actualizados que le ser\u00e1n de ayuda. Adem\u00e1s se incluyen herramientas nuevas que le pueden ser de utilidad, as\u00ed como actualizaciones de las herramientas anteriores. Como bioqu\u00edmico interesado en la bioinform\u00e1tica, es fundamental que se familiarice con Biopython, ya que es una herramienta fundamental actualmente en el lenguaje Python para el tratamiento de datos biol\u00f3gicos.","title":"Ventajas"},{"location":"11_Biopython/#instalacion","text":"En primer lugar debe instalar el paquete biopython . Para ello, como se explic\u00f3 en el apartado PyCharm , vaya a la ventana de Python Packages e inst\u00e1lelo. Instalaci\u00f3n del paquete biopython Otra opci\u00f3n ser\u00eda utilizar el siguiente comando en la consola: pip install biopython","title":"Instalaci\u00f3n"},{"location":"11_Biopython/#trabajo-con-secuencias","text":"Sin duda los elementos u objetos centrales en el tratamiento de datos biol\u00f3gicos son las secuencias . En este apartado aprender\u00e1 algunos conceptos b\u00e1sicos sobre el maneja del objeto Seq , objeto m\u00e1s utilizado en el paquete Biopython, que contiene muchas funciones en com\u00fan con las cadenas.","title":"Trabajo con secuencias"},{"location":"11_Biopython/#ejemplos","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 from Bio.Seq import Seq seq = Seq ( \"AGAGCCGACTTTACT\" ) num_nucleotidos = len ( seq ) #Almacena el n\u00famero de nucle\u00f3tidos primer_nucleotido = seq [ 0 ] #Almacena el primer nucle\u00f3tido num_guaninas = seq . count ( \"G\" ) #Almacena el n\u00famero de guaninas cortar_secuencia = seq [ 0 : 6 ] #Almacena la secuencia desde el primer nucle\u00f3tido hasta el s\u00e9ptimo cadena_complementaria = seq [:: - 1 ] #Almacena la cadena complementaria #Porcentaje de G+C porcentaje_GC = 100 * float ( seq . count ( \"G\" ) + seq . count ( \"C\" )) / len ( seq ) #Biopython ya contiene un m\u00f3dulo integrado que simplifica esta tarea from Bio.SeqUtils import GC calculo_porcentaje_GC = GC ( seq )","title":"Ejemplos"},{"location":"11_Biopython/#transcripcion-y-traduccion","text":"En primer lugar veamos c\u00f3mo realizar una transcripci\u00f3n en Biopython. Para esto crearemos objetos Seq para la hebra de ADN codificante y la hebra molde/template: 1 2 3 4 5 from Bio.Seq import Seq seq_codificante = Seq ( \"AATGCGGCTTAACCACAC\" ) print ( seq_codificante ) seq_molde = seq_codificante . reverse_complement () print ( seq_molde ) Debe tener en cuenta que la secuencia molde es le\u00edda por la polimerasa en direcci\u00f3n 3'-5', por lo que la secuencia codificante aparece en direcci\u00f3n 5'-3'. Por tanto se muestra por pantalla la siguiente salida: AATGCGGCTTAACCACAC GTGTGGTTAAGCCGCATT Una vez hemos creado la hebra molde y la codificante, vamos a llevar a cabo la transcripci\u00f3n. Recuerde que la transcripci\u00f3n se puede ver como la sustituci\u00f3n de A->U en la hebra codificante. 1 2 3 4 5 from Bio.Seq import Seq seq_codificante = Seq ( \"AATGCGGCTTAACCACAC\" ) seq_molde = seq_codificante . reverse_complement () ARN_mensajero = seq_codificante . transcribe () print ( ARN_mensajero ) Si \u00fanicamente posee la hebra molde, y desea realizar la transcripci\u00f3n sin necesidad de crear la hebra codificante, puede utilizar la acci\u00f3n combinada de ambas funciones anteriores: 1 2 3 from Bio.Seq import Seq seq_molde = Seq ( \"GTGTGGTTAAGCCGCATT\" ) ARN_mensajero = seq_molde . reverse_complement () . transcribe () Por \u00faltimo, si lo que desea es realizar una transcripci\u00f3n inversa, es decir, pasar del ARN mensajero a la hebra codificante: 1 2 3 from Bio.Seq import Seq ARN_mensajero = Seq ( \"AAUGCGGCUUAACCACAC\" ) seq_codificante = ARN_mensajero . back_transcribe () Una vez finalizada la transcripci\u00f3n, veamos c\u00f3mo llevar a cabo la traducci\u00f3n partiendo de la secuencia nucleot\u00eddica del ARN mensajero obtenida. 1 2 3 4 5 6 7 from Bio.Seq import Seq seq_codificante = Seq ( \"AATGCGGCTTTACCACAC\" ) seq_molde = seq_codificante . reverse_complement () ARN_mensajero = seq_codificante . transcribe () proteina = ARN_mensajero . translate () print ( proteina ) Esto deber\u00eda mostrar por pantalla la siguiente secuencia aminoac\u00eddica: NAALPH Tambi\u00e9n podr\u00eda realizar la traducci\u00f3n desde la hebra codificante de ADN. En este caso se ha introducido una mutaci\u00f3n en la secuencia: T 11 -> A 11. 1 2 3 4 5 6 from Bio.Seq import Seq seq_codificante = Seq ( \"AATGCGGCTTAACCACAC\" ) seq_molde = seq_codificante . reverse_complement () proteina = seq_codificante . translate () print ( proteina ) En este caso, el resultado ser\u00e1 el siguiente: NAA * PH # El asterisco indica que es un cod\u00f3n stop. Aunque a priori parece un m\u00e9todo muy b\u00e1sico, hay algunos aspectos adicionales en la traducci\u00f3n que hay que tener en cuenta. La tabla de traducci\u00f3n que utiliza Biopython se basa en la tablas indicadas en el NCBI , utilizando de forma predeterminada el c\u00f3digo gen\u00e9tico est\u00e1ndar ( Tabla 1 ). En algunos casos necesitar\u00e1 utilizar tablas de traducci\u00f3n diferente, por ejemplo si est\u00e1 tratando con un genoma mitocondrial. Esto se puede indicar de diversas formas: 1 2 3 4 5 6 from Bio.Seq import Seq seq_codificante = Seq ( \"AATGCGGCTTAACCACAC\" ) seq_molde = seq_codificante . reverse_complement () proteina = seq_codificante . translate ( table = \"Vertebrate Mitochondrial\" ) #1\u00aa Forma proteina = seq_codificante . translate ( table = 2 ) # 2\u00aa Forma Como ha visto en uno de los ejemplos anteriores, Biopython va a detectar un cod\u00f3n de parada indic\u00e1ndolo con un asterisco. Lo normal es que desee llevar a cabo la traducci\u00f3n hasta este cod\u00f3n y detenerse: 1 2 3 4 5 6 from Bio.Seq import Seq seq_codificante = Seq ( \"AATGCGGCTTAACCACAC\" ) seq_molde = seq_codificante . reverse_complement () proteina = seq_codificante . translate ( to_stop = True ) print ( proteina )","title":"Transcripci\u00f3n y traducci\u00f3n"},{"location":"11_Biopython/#trabajo-con-archivos","text":"Para trabajar con distintos formatos de archivos de secuencias, el m\u00f3dulo m\u00e1s utilizado en BioPython es Bio.seqIO . Para poder aprender a trabajar con archivos, necesitaremos uno que se desee analizar. Tenga en cuenta las caracter\u00edsticas de su ordenador, ya que si utiliza un archivo FASTA demasiado pesado este proceso puede llegar a ser muy lento o incluso interminable. En este caso se propone como ejemplo un archivo FASTA que contiene todas las entradas resultantes de una b\u00fasqueda en la base de datos nucleotide de NCBI . La b\u00fasqueda elegida es de Viola tricolor (denominada com\u00fanmente pensamiento ), y puede descargarse el archivo en el siguiente enlace . Flor de pensamiento. Fuente: pharysol.es","title":"Trabajo con archivos"},{"location":"11_Biopython/#lectura-de-archivos-de-secuencia","text":"Para leer archivos de secuencia la funci\u00f3n m\u00e1s utilizada es Bio.SeqIO.parse() . Esta funci\u00f3n, utilizada normalmente en un bucle for , necesita dos argumentos: Nombre del fichero que se desea leer. Indicador del tipo de archivo que se desea leer, en letras min\u00fasculas. 1 2 3 4 5 6 7 from Bio import SeqIO for seq_record in SeqIO . parse ( \"viola_tricolor.fasta\" , \"fasta\" ): print ( seq_record . id ) #Devuelve el ID identificador print ( seq_record . description ) #Devuelve la descripci\u00f3n print ( repr ( seq_record . seq )) #Devuelve la secuencia print ( len ( seq_record )) #Devuelve la longitud de la secuencia Deber\u00e1 haber obtenido un resultado similar al siguiente: HM590365.1 HM590365.1 Viola tricolor voucher personal collection:I. Hiiesalu 74 tRNA-Leu (trnL) gene, partial sequence; chloroplast Seq('GACTTAATTGGATTGAGCCTTGGTATGGAAACTTACTAAGTGGATAACTTTCAA...GAG') 506 JZ084087.1 JZ084087.1 MHV6 MHV-Cold stress-Viola library Viola tricolor cDNA clone MHV6, mRNA sequence Seq('AACAGACAGTTGTATGCTGCGTTCGGGAGGATGAATCCCTCCCGANAAGGAATC...CTT') 177 ... ... MG009035.1 MG009035.1 Crithmum maritimum clone CM_04 microsatellite sequence Seq('AAAACATTCATCTCCTGCACTCTTAAAATTCTTCTATTCTTTTCAATCCAATCT...TCA') 174 MG009034.1 MG009034.1 Crithmum maritimum clone CM_03 microsatellite sequence Seq('GCTTACTTAGTTGAGATCCAGTGTTTAGATTGTACATCACTTTCTTGGAGGTTC...GGA') 144 Lectura de otros formatos de archivo Si en lugar de leer un archivo en formato .fasta, desea leer cualquier otro archivo \u00fanicamente tiene que cambiar el valor del segundo argumento. Por ejemplo, si desea leer un archivo .gbk (procedente de GenBank): \"fasta\" -> \"genbank\". En el siguiente enlace puede encontrar una tabla con todas las opciones. En muchos casos trabajar\u00e1 con archivos gzip, muy utilizados por herramientas bioinform\u00e1ticas. Puede informarse sobre el m\u00f3dulo gzip , aunque es tan simple como utilizar gzip.open() . Aunque esta opci\u00f3n de lectura le puede ser \u00fatil, en muchas ocasiones desear\u00e1 trabajar con cada lectura de forma individual. Para ello tiene que trabajar con este archivo como si fuera un objeto m\u00e1s, como se muestra a continuaci\u00f3n: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 from Bio import SeqIO entradas = SeqIO . parse ( \"viola_tricolor.fasta\" , \"fasta\" ) print ( \"LA PRIMERA ENTRADA:\" ) primera_entrada = next ( entradas ) print ( primera_entrada . id ) print ( primera_entrada . description ) print ( len ( primera_entrada )) print ( \"LA SEGUNDA ENTRADA:\" ) segunda_entrada = next ( entradas ) print ( segunda_entrada . id ) print ( segunda_entrada . description ) print ( len ( segunda_entrada )) Salida por pantalla LA PRIMERA ENTRADA: HM590365.1 HM590365.1 Viola tricolor voucher personal collection:I. Hiiesalu 74 tRNA-Leu (trnL) gene, partial sequence; chloroplast 506 LA SEGUNDA ENTRADA: JZ084087.1 JZ084087.1 MHV6 MHV-Cold stress-Viola library Viola tricolor cDNA clone MHV6, mRNA sequence 177","title":"Lectura de archivos de secuencia"},{"location":"11_Biopython/#extraccion-y-escritura-de-datos","text":"El archivo FASTA utilizado de ejemplo empieza de la siguiente forma: >HM590365.1 Viola tricolor voucher personal collection:I. Hiiesalu 74 tRNA-Leu (trnL) gene, partial sequence; chloroplast GACTTAATTGGATTGAGCCTTGGTATGGAAACTTACTAAGTGGATAA.... .... Como puede comprobar, el identificador es el primer argumento en la descripci\u00f3n, informaci\u00f3n que podemos utilizar para obtener una lista con todos los IDs: 1 2 3 4 5 6 from Bio import SeqIO especies = [] for seq_record in SeqIO . parse ( \"viola_tricolor.fasta\" , \"fasta\" ): especies . append ( seq_record . description . split ()[ 0 ]) print ( especies ) Esto te devuelve por pantalla la siguiente lista: ['HM590365.1', 'JZ084087.1', 'JZ084086.1', 'JZ084085.1','JZ084084.1', ...] Lectura de otros formatos de archivo Le recomendamos que pruebe este m\u00e9todo con archivos de EMBL o GenBank. La modificaci\u00f3n de datos en el archivo es muy simple. Veamos como modificar por ejemplo el ID de la primera entrada: 1 2 3 4 5 6 7 from Bio import SeqIO entradas = SeqIO . parse ( \"viola_tricolor.fasta\" , \"fasta\" ) primera_entrada = next ( entradas ) print ( primera_entrada ) primera_entrada . id = \"ID_NUEVO\" print ( primera_entrada )","title":"Extracci\u00f3n y escritura de datos"},{"location":"11_Biopython/#graficacion","text":"En este apartado se muestran algunos ejemplos de gr\u00e1ficas utilizando la librer\u00eda matplotlib junto al m\u00f3dulo Bio.SeqIO . Para ello se va a utilizar de nuevo el archivo viola_tricolor.fasta . HISTOGRAMA Veamos c\u00f3mo realizar un histograma que compare las longitudes de las secuencias en un rango de tama\u00f1os. En primer lugar, necesitamos almacenar en una lista la longitud de todas las secuencias: 1 2 3 4 from Bio import SeqIO longitudes = [ len ( rec ) for rec in SeqIO . parse ( \"viola_tricolor.fasta\" , \"fasta\" )] print ( longitudes ) Ahora utilizaremos la librer\u00eda matplotlib para poder representarlos. 1 2 3 4 5 6 7 8 9 10 11 12 from Bio import SeqIO from matplotlib import pylab longitudes = [ len ( rec ) for rec in SeqIO . parse ( \"viola_tricolor.fasta\" , \"fasta\" )] pylab . hist ( longitudes , bins = 20 ) pylab . title ( \" %i Secuencias \\n Tama\u00f1os desde %i a %i \" % ( len ( longitudes ), min ( longitudes ), max ( longitudes )) ) pylab . xlabel ( \"Tama\u00f1o de secuencias (bp)\" ) pylab . ylabel ( \"Recuento\" ) pylab . show () FIGURA DE L\u00cdNEAS Para mostrar un ejemplo de un gr\u00e1fico de l\u00edneas, la mejor opci\u00f3n es representar una de las gr\u00e1ficas que m\u00e1s utilizar\u00e1: representaci\u00f3n GC% . En primer lugar necesitamos una lista con los porcentajes GC de las secuencias, utilizando el m\u00f3dulo GC empleado al principio de esta p\u00e1gina. Vamos a realizar una representaci\u00f3n ordenada de menores a mayores valores de GC%, para observar la variaci\u00f3n. 1 2 3 4 5 from Bio import SeqIO from Bio.SeqUtils import GC valores_GC = sorted ( GC ( rec . seq ) for rec in SeqIO . parse ( \"viola_tricolor.fasta\" , \"fasta\" )) print ( valores_GC ) Una vez obtenida la lista, representamos: 1 2 3 4 5 6 7 8 9 10 11 12 13 from Bio import SeqIO from Bio.SeqUtils import GC from matplotlib import pylab valores_GC = sorted ( GC ( rec . seq ) for rec in SeqIO . parse ( \"viola_tricolor.fasta\" , \"fasta\" )) pylab . plot ( valores_GC , linewidth = 3 , color = \"red\" ) pylab . title ( \" %i Secuencias \\n GC %% desde %0.1f a %0.1f \" % ( len ( valores_GC ), min ( valores_GC ), max ( valores_GC )) ) pylab . xlabel ( \"Genes\" ) pylab . ylabel ( \"GC%\" ) pylab . show ()","title":"Graficaci\u00f3n"},{"location":"11_Biopython/#blast","text":"Blast ( Basic Local Alignment Search Tool ) es una herramienta inform\u00e1tica de alineamiento de secuencias local, tanto de \u00e1cidos nucleicos como de secuencias proteicas. Blastn . Nucle\u00f3tido > nucle\u00f3tido. Blastp . Prote\u00edna > prote\u00edna. Tblastn . Prote\u00edna > secuencia nucleot\u00eddica traducida. Blastx . Secuencia nucleot\u00eddica traducida > prote\u00edna. Esta herramienta, sin duda una de las m\u00e1s importantes en bioinform\u00e1tica, est\u00e1 disponible desde Biopython con el m\u00f3dulo Bio.blast.NCBIWWW . La funci\u00f3n qblast() en el m\u00f3dulo Bio.blast.NCBIWWW necesita tres argumentos: Primer argumento . Programa blast que usar\u00e1: blastn, blastp... Segundo argumento . Base de datos en la que basar\u00e1 la b\u00fasqueda. Ej. Nucleotide database (nt) . Tercer argumento . Una cadena que contenga tu secuencia de entrada (query sequence). Si la secuencia la tiene en un archivo FASTA, simplemente almac\u00e9nela como una cadena. Aunque estos son los argumentos principales y necesarios para su funcionamiento, qblast() tiene muchos m\u00e1s argumentos y par\u00e1metros disponibles para modificar. Al igual que con todas las funciones, puede informarse en: 1 2 from Bio.Blast import NCBIWWW help ( NCBIWWW . qblast )","title":"Blast"},{"location":"11_Biopython/#ejemplo-practico","text":"En primer lugar desc\u00e1rguese un archivo FASTA en su directorio de trabajo. Le proponemos como ejemplo el siguiente archivo NAC_solanum_arabidopsis , la secuencia codificante del gen NAC de Solanum lycopersicum y de Arabidopsis thaliana . Importe el m\u00f3dulo NCBIWWW y asigne la secuencia FASTA a una variable. 1 2 from Bio.Blast import NCBIWWW archivo_fasta = open ( \"NAC_solanum_arabidopsis.fasta\" ) . read () >>> archivo_fasta >NC_015441.3:2856617-2858593 Solanum lycopersicum cultivar Heinz 1706 chromosome 4, SL3.0, whole genome shotgun sequence GTCAAAGAAACTGAAACTAACACAAAGCAGGAGCAGGAGCAGCAACAAACAGAGAGAAGAAAACAGAGGA AGATAAGAGGAAAATTTATCGAATTCGAATCGAGAGAAAAGGGGAAGTGAA .... >NC_003070.9:c11867154-11865229 Arabidopsis thaliana chromosome 1 sequence GTCAAAGAAACTGAAACTAACACAAAGCAGGAGCAGGAGCAGCAACAAACAGAGAGAAGAAAACAGAGGAAGATA GAGTCCTACCACCATTATAAATTATCTCATCGTTTGCTTTCTTTTTTTTAA .... Utilice la funci\u00f3n qblast() con los par\u00e1metros indicados anteriormente, como a continuaci\u00f3n: 1 2 3 from Bio.Blast import NCBIWWW archivo_fasta = open ( \"NAC_solanum_arabidopsis.fasta\" ) . read () resultados = NCBIWWW . qblast ( \"blastn\" , \"nt\" , archivo_fasta ) Guarde el objeto resultados a un archivo .xml que puede ser analizado. 1 2 3 4 5 6 7 from Bio.Blast import NCBIWWW archivo_fasta = open ( \"NAC_solanum_arabidopsis.fasta\" ) . read () resultados = NCBIWWW . qblast ( \"blastn\" , \"nt\" , archivo_fasta ) with open ( 'results.xml' , 'w' ) as save_file : blast_results = resultados . read () save_file . write ( blast_results ) Tras esto, habr\u00e1 obtenido el siguiente archivo xml . Tenga en cuenta que el an\u00e1lisis con Biopython de los resultados del Blast tambi\u00e9n le puede ser \u00fatil para resultados obtenidos en un Blast online. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 from Bio.Blast import NCBIWWW from Bio.Blast import NCBIXML resultado = open ( \"results.xml\" , 'r' ) registro_blast = NCBIXML . parse ( resultado ) registro_blast = next ( registro_blast ) E_VALUE_THRESH = 0.04 for alignment in registro_blast . alignments : for hsp in alignment . hsps : if hsp . expect < E_VALUE_THRESH : print ( \"****Alineamiento****\" ) print ( \"Secuencia:\" , alignment . title ) print ( \"Tama\u00f1o:\" , alignment . length ) print ( \"e-value:\" , hsp . expect ) print ( hsp . query [ 0 : 75 ] + \"...\" ) print ( hsp . match [ 0 : 75 ] + \"...\" ) print ( hsp . sbjct [ 0 : 75 ] + \"...\" ) Esto le dar\u00e1 como resultado el siguiente an\u00e1lisis Blast. A partir de este an\u00e1lisis puede realizar diferentes acciones, encontrando m\u00e1s informaci\u00f3n en el siguiente enlace a mayor informaci\u00f3n. ****Alineamiento**** Secuencia: gi|1273855477|gb|CP023760.1| Solanum lycopersicum cultivar I-3 chromosome 4 Tama\u00f1o: 66477049 e-value: 0.0 GTCAAAGAAACTGAAACTAACACAAAGCAGGAGCAGGAGCAGCAACAAACAGAGAGAAGAAAACAGAGGAAGATA... |||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||... GTCAAAGAAACTGAAACTAACACAAAGCAGGAGCAGGAGCAGCAACAAACAGAGAGAAGAAAACAGAGGAAGATA... ****Alineamiento**** Secuencia: gi|1273855477|gb|CP023760.1| Solanum lycopersicum cultivar I-3 chromosome 4 Tama\u00f1o: 66477049 e-value: 1.44242e-12 GGTGAAAAAGAGTGGTATTTTTTCTCACCAAGGGATAGAAAATATCCGAACGGTTCACGGCCGAACCGAGCAGCA... || |||||||| |||||||| ||| | ||| | |||||||||||||| || ||| |||| || | ||||| ... GGAGAAAAAGAATGGTATTTCTTCACCCCACGTGATAGAAAATATCCAAATGGTGTTAGGCCAAATAGGGCAGCT... ****Alineamiento**** Secuencia: gi|1273855477|gb|CP023760.1| Solanum lycopersicum cultivar I-3 chromosome 4 Tama\u00f1o: 66477049 e-value: 4.71528e-06 AACACAACTTCAAATCTCAAAAA-TCACAATTTCAAAAACTCATAGATTTCAACT------TCTATATTCAAACA... || ||||| ||||| | ||||| || ||| |||||||||||| || |||||||| ||||| |||||||... AAAACAACATCAAAGTTAAAAAAATCGCAACTTCAAAAACTCAAAG-TTTCAACTTCGAAATCTATGATCAAACA... ...","title":"Ejemplo pr\u00e1ctico"},{"location":"11_Biopython/#busqueda-en-bases-de-datos-pubmed-y-medline","text":"Desde Python es posible realizar b\u00fasquedas y obtener informaci\u00f3n de muchas de las principales fuentes de datos en el \u00e1mbito bioqu\u00edmico, como Pubmed y Medline . Veamos c\u00f3mo realizar una consulta en PubMed, en este caso se quiere consultar todos los art\u00edculos relacionados con Thermus aquaticus , una bacteria term\u00f3fila. Para esto utilizaremos el m\u00f3dulo Bio.Entrez , un sistema que da acceso a todas las bases del NCBI. Lo primero que queremos conocer es el n\u00famero de art\u00edculos que est\u00e1n relacionados con esta bacteria. 1 2 3 4 5 6 7 from Bio import Entrez entrez . email = \"victorfernandezramirez1@hotmail.com\" #Importante indicar su usuario busqueda = Entrez . egquery ( term = \"thermus aquaticus\" ) #Indicar la b\u00fasqueda deseada registro = Entrez . read ( busqueda ) #Leer esta b\u00fasqueda y almacenarla como una variable for fila in registro [ \"eGQueryResult\" ]: #Bucle para realizar el conteo if fila [ \"DbName\" ] == \"pubmed\" : print ( fila [ \"Count\" ]) Resultado 641 Se obtiene un total de 641 entradas relacionadas con la bacteria Thermus aquaticus . Veamos c\u00f3mo obtener los IDs de estos art\u00edculos utilizando la funci\u00f3n Bio.Entrez.esearch . 1 2 3 4 5 6 from Bio import Entrez entrez . email = \"victorfernandezramirez1@hotmail.com\" busqueda = Entrez . esearch ( db = \"pubmed\" , term = \"thermus aquaticus\" , retmax = 463 ) registro = Entrez . read ( busqueda ) busqueda . close () idlist = registro [ \"IdList\" ] #Almacena todos los IDs en una lista 1 2 >>> print ( idlist ) [ '34817221' , '34773612' , '34592573' , '34459541' , ... ] A partir de esta lista de IDs, podemos importar el m\u00f3dulo Medline y utilizar la funci\u00f3n Entrez.efetch para obtener la informaci\u00f3n de estos art\u00edculos . Tenga en cuenta que el c\u00f3digo utilizado hasta el momento sigue siendo necesario, ya que necesitamos la lista creada idlist . 1 2 3 4 5 6 7 8 9 10 from Bio import Medline busqueda_medline = Entrez . efetch ( db = \"pubmed\" , id = idlist , rettype = \"medline\" , retmode = \"text\" ) registros_nuevos = Medline . parse ( busqueda_medline ) registros_nuevos = list ( registros_nuevos ) for registro_bucle in registros_nuevos : print ( \"Titulo:\" , registro_bucle . get ( \"TI\" , \"?\" )) print ( \"Autores:\" , registro_bucle . get ( \"AU\" , \"?\" )) print ( \"Fuente:\" , registro_bucle . get ( \"SO\" , \"?\" )) print ( \"\" ) Esto le devolver\u00e1 como salida el t\u00edtulo, autor/es y fuente de todos los art\u00edculos que fueron almacenados en la lista. Titulo: A Novel Trehalose Synthase for the Production of Trehalose and Trehalulose. Autores: ['Agarwal N', 'Singh SP'] Fuente: Microbiol Spectr. 2021 Dec 22;9(3):e0133321. doi: 10.1128/Spectrum.01333-21. Epub 2021 Nov 24. Titulo: Enhancing Cohort PASA Efficiency from Lessons Assimilated by Mutant Genotyping in C. elegans. Autores: ['Pandey A', 'Bhat B', 'Aggarwal ML', 'Pandey GK'] Fuente: Methods Mol Biol. 2022;2392:17-33. doi: 10.1007/978-1-0716-1799-1_2. ... Titulo: Purification, crystallization and preliminary X-ray investigation of aqualysin I, a heat-stable serine protease. Autores: ['Green PR', 'Oliver JD', 'Strickland LC', 'Toerner DR', 'Matsuzawa H', 'Ohta T'] Fuente: Acta Crystallogr D Biol Crystallogr. 1993 May 1;49(Pt 3):349-52. doi: 10.1107/S0907444992012083. Desde Python tambi\u00e9n es posible descargar secuencias en formato FASTA o como archivo de texto plano desde GenBank, utilizando \u00fanicamente un ID de referencia. Como ejemplo se utiliza el identificador NM_001247553 , que pertenece al ARN mensajero de la prote\u00edna NAC de Solanum lycopersicum , prote\u00edna ya utilizada en ejemplos anteriores. 1 2 3 4 from Bio import Entrez Entrez . email = \"victorfernandezramirez1@hotmail.com\" busqueda = Entrez . efetch ( db = \"nucleotide\" , id = \"NM_001247553\" , rettype = \"gb\" , retmode = \"text\" ) print ( busqueda . read ()) Salida por pantalla LOCUS NM_001247553 1309 bp mRNA linear PLN 25-FEB-2019 DEFINITION Solanum lycopersicum NAC domain protein (NAC1), mRNA. ACCESSION NM_001247553 VERSION NM_001247553.3 KEYWORDS RefSeq. SOURCE Solanum lycopersicum (Lycopersicon esculentum) ORGANISM Solanum lycopersicum Eukaryota; Viridiplantae; Streptophyta; Embryophyta; Tracheophyta; Spermatophyta; Magnoliopsida; eudicotyledons; Gunneridae; Pentapetalae; asterids; lamiids; Solanales; Solanaceae; Solanoideae; Solaneae; Solanum; Solanum subgen. Lycopersicon. REFERENCE 1 (bases 1 to 1309) AUTHORS Gao Y, Wei W, Zhao X, Tan X, Fan Z, Zhang Y, Jing Y, Meng L, Zhu B, Zhu H, Chen J, Jiang CZ, Grierson D, Luo Y and Fu DQ. TITLE A NAC transcription factor, NOR-like1, is a new positive regulator of tomato fruit ripening JOURNAL Hortic Res 5, 75 (2018) PUBMED 30588320 REMARK Publication Status: Online-Only REFERENCE 2 (bases 1 to 1309) AUTHORS Giovannoni J, Nguyen C, Ampofo B, Zhong S and Fei Z. TITLE The Epigenome and Transcriptional Dynamics of Fruit Ripening JOURNAL Annu Rev Plant Biol 68, 61-84 (2017) PUBMED 28226232 REMARK Review article REFERENCE 3 (bases 1 to 1309) ... PRIMARY REFSEQ_SPAN PRIMARY_IDENTIFIER PRIMARY_SPAN COMP 1-1309 AK323390.1 1-1309 FEATURES Location/Qualifiers source 1..1309 /organism=\"Solanum lycopersicum\" /mol_type=\"mRNA\" /cultivar=\"Micro-Tom\" /db_xref=\"taxon:4081\" /chromosome=\"4\" /map=\"4\" gene 1..1309 /gene=\"NAC1\" /gene_synonym=\"NC1; SlNAC1\" /note=\"NAC domain protein\" /db_xref=\"GeneID:543917\" exon 1..327 /gene=\"NAC1\" /gene_synonym=\"NC1; SlNAC1\" /inference=\"alignment:Splign:2.1.0\" misc_feature 18..20 /gene=\"NAC1\" /gene_synonym=\"NC1; SlNAC1\" /note=\"upstream in-frame stop codon\" CDS 150..1055 /gene=\"NAC1\" /gene_synonym=\"NC1; SlNAC1\" /note=\"NAC domain protein 1; NAC domain-containing protein 2\" /codon_start=1 /product=\"NAC domain protein\" /protein_id=\"NP_001234482.1\" /db_xref=\"GeneID:543917\" /translation=\"MNKGANGNQQLELPAGFRFHPTDDELVQHYLCRKCAGQSIAVSI IAEIDLYKFDPWQLPEKALYGEKEWYFFSPRDRKYPNGSRPNRAAGTGYWKATGADKP VGKPKTLGIKKALVFYAGKAPRGIKTNWIMHEYRLANVDRSAGKNNNLRLDDWVLCRI YNKKGTLEKHYNVDNKETTSFGEFDEEIKPKILPTQLAPMPPRPRSTPANDYFYFESS ESMTRMHTTNSSSGSEHVLSPCDKEVQSAPKWDEDHRNTLDFQLNYLDGLLNEPFETQ MQQQICNFDQFNNFQDMFLYMQKPY\" exon 328..602 /gene=\"NAC1\" /gene_synonym=\"NC1; SlNAC1\" /inference=\"alignment:Splign:2.1.0\" exon 603..1302 /gene=\"NAC1\" /gene_synonym=\"NC1; SlNAC1\" /inference=\"alignment:Splign:2.1.0\" ORIGIN 1 gtcaaagaaa ctgaaactaa cacaaagcag gagcaggagc agcaacaaac agagagaaga 61 aaacagagga agataagagg aaaatttatc gaattcgaat cgagagaaaa ggggaagtga 121 agttgcgaag agtgagaatt tcaaaggaaa tgaacaaagg agcaaacgga aatcagcaat 181 tggagttacc ggcgggattc agattccatc cgacagacga cgaattggtg cagcactatc .... 1081 attgagtgtg atccatgaca ttttctttgt tctttggtgg tgtaggtcaa ctttttatta 1141 agtagtttag agaagtacaa aatgctagtc aaatttggtg ggctacagca caaatgagcc 1201 ttgataagca tagccaaaga gtcgtataga agggcttatt attattgtaa ggtatgtaaa 1261 aacaaatgaa aatttgttaa tatcaagtta tcattcttca aaaaaaaaa Existe un m\u00e9todo ya visto para poder acceder a esta informaci\u00f3n de forma individual: utilizar el m\u00f3dulo Bio.SeqIO . 1 2 3 4 5 6 from Bio import Entrez from Bio import SeqIO Entrez . email = \"victorfernandezramirez1@hotmail.com\" busqueda = Entrez . efetch ( db = \"nucleotide\" , id = \"NM_001247553\" , rettype = \"gb\" , retmode = \"text\" ) registro = SeqIO . read ( busqueda , \"genbank\" ) busqueda . close () Ahora podremos acceder de forma individual a la distinta informaci\u00f3n almacenada en la variable registro : 1 2 3 4 5 6 7 8 >>> print(registro.id) NM_001247553.3 >>> print(registro.description) print(registro.description) >>> print(registro.seq) GTCAAAGAAACTGAAACTAA...GTTATCATTCTTCAAAAAAAAAA Recomendaci\u00f3n Este apartado es fundamental que lo practique, ya que en unos simples comandos puede realizar una b\u00fasqueda en PubMed y acceder a la secuencia nucleot\u00eddica de un gen problema para trabajar con ella...\u00a1y todo desde Python!","title":"B\u00fasqueda en bases de datos: PubMed y Medline"},{"location":"11_Biopython/#resumen","text":"En este apartado se le ha ense\u00f1ado una serie de funcionalidades de Biopython que seguro que le ser\u00e1n de ayuda, pudiendo trabajar a su antojo con archivos FASTA desde la terminal de Python. No obstante, debe saber que Biopython permite realizar funciones muy avanzadas , como trabajar con archivos de secuenciaci\u00f3n (filtrado, indexado..), realizar alineamientos m\u00faltiples (basado en herramientas como MUSCLE o ClustalW) o an\u00e1lisis de motivos de secuencias. Si quiere profundizar en sus conocimientos sobre el paquete Biopython, le recomendamos que acceda al libro de cocina de Biopython.","title":"Resumen"},{"location":"2_Introduccion_python/","text":"\u00bfQu\u00e9 es Python? Python es un lenguaje de programaci\u00f3n potente y f\u00e1cil de aprender, creado por Guido van Rossum en 1990, aunque actualmente es desarrollado y mantenido por la Python Software Foundation . Este lenguaje de programaci\u00f3n multiparadigma permite: Programaci\u00f3n imperativa. Programaci\u00f3n funcional. Programaci\u00f3n orientada a objetos. A diferencia de otros lenguajes como Java o .NET, se trata de un lenguaje interpretado, es decir, no es necesario compilarlo para ejecutar las aplicaciones escritas en Python, sino que se ejecutan directamente por el ordenador utilizando un programa denominado int\u00e9rprete. Caracter\u00edsticas Las principales caracter\u00edsticas de Python son las siguientes: Multiparadigma . Multiplataforma . Se puede encontrar un int\u00e9rprete de Python para los principales sistemas operativos (Windows, Linux y MacOS), utiliz\u00e1ndose el mismo c\u00f3digo en cada una de las plataformas. Interpretado . El c\u00f3digo no se compila. Din\u00e1micamente tipado y fuertemente tipado . Esto significa que el tipo de los objetos se decide en tiempo de ejecuci\u00f3n, y que el tipo de valor no cambia repentinamente. Instalaci\u00f3n Como se ha comentado, Python presenta soporte multiplataforma, y su instalaci\u00f3n es muy similar en Windows y MacOs. Python viene instalado en la mayor\u00eda de los sistemas MacOs y Linux, pero muy probablemente se trate de una versi\u00f3n desfasada, por lo que conviene comprobar de qu\u00e9 versi\u00f3n se trata. Python permite tener instaladas distintas versiones, por ejemplo, Python 3.9 y Python 3.10 . Al no tener conocimientos avanzados, se recomienda tener instalada \u00fanicamente una versi\u00f3n de Python, la m\u00e1s reciente ( 3.10 ). En concreto, la \u00faltima versi\u00f3n de Python disponible es la 3.10.2 , lanzada el d\u00eda 14 de enero de 2022. ENLACE PYTHON 3.10.2 El siguiente enlace le redirige a la p\u00e1gina oficial de Python para la descarga de Python 3.10.2 Linux En primer lugar, abra la terminal. Ctrl + Alt + T. Buscar terminal en el tablero o Dash. Para comprobar la versi\u00f3n, se proponen tres formas diferentes: $ python -V $ python --version La \u00faltima opci\u00f3n ser\u00eda ejecutar python3 en la terminal, que producir\u00e1 una salida como esta: python 3.5.6 (default, Feb 2021, 22:59:56) [GCC 4.8.2] on linux2 Type \"help\", \"copyright\", \"credits\" or \"license\" for more information. >>> Una vez comprobada la versi\u00f3n, si desea instalar la versi\u00f3n m\u00e1s reciente, utilizaremos un paquete llamado deadsnakes , que actualizar\u00e1 el listado de paquetes disponibles de Python m\u00e1s recientes. Para salir del int\u00e9rprete de Python, pulse Control-D o escriba el comando exit() . Introduzca posteriormente los siguientes comandos: $ sudo add-apt-repository ppa:deadsnakes/ppa $ sudo apt-get update $ sudo apt install python3.10 Fallo en la actualizaci\u00f3n Si no ha conseguido actualizar Python, compruebe previamente que la lista de paquetes disponibles est\u00e1 actualizada. Introduzca en el terminal $ sudo apt update . Estos comandos deber\u00edan instalar la \u00faltima versi\u00f3n de Pyhton en su sistema. Para asegurarse que cuando ejecuta Python lo hace en la versi\u00f3n 3.10, acost\u00fambrese a ejecutarlo de la siguiente forma. $ python3.10 MacOS En primer lugar, abra una ventana del terminal: Aplicaciones > Utilidades > Terminal. Comando-Barra Espaciadora + Terminal. Para comprobar la versi\u00f3n, se proponen tres formas diferentes: $ python -V $ python --version La \u00faltima opci\u00f3n ser\u00eda ejecutar python en la terminal, que producir\u00e1 una salida como esta: python 3.5.6 (default, Feb 2021, 22:59:56) [GCC 4.8.2 Compatible Apple LLVM 9.1.0 (clang-902.0.39.2)] on darwin Type \"help\", \"copyright\", \"credits\" or \"license\" for more information. >>> Una vez comprobada la versi\u00f3n, si desea instalar la versi\u00f3n m\u00e1s reciente, tiene que descargar el instalador para su sistema, y seguir las etapas que aparecen en el apartado Windows - Etapas . Cuando haya finalizado, ya puede empezar una sesi\u00f3n de terminal de Python con el siguiente comando. $ python3 Aseg\u00farese de utilizar este comando para que se ejecute la versi\u00f3n de Python que acaba de instalar, ya que podr\u00eda ejecutar sino Python2 , con el que podr\u00eda tener problemas si intenta utilizar los c\u00f3digos que aparecen en este tutorial. Windows Etapas Una vez descargado el instalador, inicie la instalaci\u00f3n (haciendo doble click). En la primera pantalla, se pueden modificar las opciones de instalaci\u00f3n en el cuadro Customize installation . El usuario puede utilizarlo, pero en principio no va a ser necesario. S\u00ed ser\u00e1 \u00fatil seleccionar la opci\u00f3n Add Python 3.10 to PATH , fundamental para usar la l\u00ednea de comandos para ejecutar programas. Una vez seleccionado, siga adelante mediante la opci\u00f3n Install Now . A continuaci\u00f3n, se realiza la instalaci\u00f3n. Puede durar unos cuantos minutos. Finalmente cierre el programa de instalaci\u00f3n en la opci\u00f3n Close . \u00a1Ya tiene instalado Python! Ejecutar Python en el terminal Una vez instalado Python, para comprobar que se ha realizado correctamente, vamos a ejecutarlo desde la terminal. Abrir una sesi\u00f3n de terminal. Buscar terminal en el buscador de Windows o Cortana. Abrir el men\u00fa Inicio - Ejecutar - cmd. Escribir python en min\u00fascula. Deber\u00eda aparecer por pantalla un mensaje similar: Una vez abierto, Python nos permite realizar diferentes acciones: desde realizar operaciones matem\u00e1ticas hasta mostrar mensajes por pantalla. >>> print(\"\u00a1Es un placer conocerte!\") \u00a1Es un placer conocerte! >>> Ejecutar programas de Python desde el terminal En el siguiente punto se ver\u00e1n los posibles editores de texto, donde se ejecutar\u00e1n la mayor\u00eda de los programas. A veces, puede resultar \u00fatil ejecutar programas desde el terminal, como en aquellos casos en los que una limitaci\u00f3n de memoria RAM hagan que desee ejecutar un programa sin tener que abrir el editor (que implica mayor consumo). Para esto, es fundamental que conozca el directorio en el que se almacena dicho programa. A continuaci\u00f3n, se muestra un ejemplo de una ejecuci\u00f3n desde el terminal, creando previamente tanto el directorio como el archivo de texto a ejecutar. Hello World Vamos a ejecutar un programa simple: Hola Mundo . Este programa se suele usar de forma gen\u00e9rica en inform\u00e1tica como introducci\u00f3n al estudio de un lenguaje de programaci\u00f3n determinado. Hay que crear en un directorio determinado, como puede ser Python_Projects , recomend\u00e1ndose practicar este tutorial siempre en el mismo directorio. Dentro de este directorio crearemos un archivo de texto plano denominado hola_mundo.py , como se muestra a continuaci\u00f3n: hola_mundo.py print ( \"Hola Mundo!!!\" ) Nombres de Archivos Como se puede observar, el nombre del archivo es hola_mundo y no hola mundo . En general, se recomienda que los archivos de programa est\u00e9n escritos de forma clara y utilizando guiones bajos para separar n\u00fameros o palabras. El nombre del archivo debe ser representetativo del programa que codifica. Una vez creado el programa, vamos a ejecutarlo en la terminal. La ejecuci\u00f3n es similar en todos los sistemas operativos: se debe acceder desde la terminal al directorio que contiene el programa, y una vez all\u00ed ejecutarlo. A continuaci\u00f3n se pone de ejemplo la ejecuci\u00f3n en Windows: Abrir la terminal. Utilizar el comando cd (permite cambiar de directorio) hasta entrar en el directorio en el que se encuentra el archivo. Se puede observar la ruta hasta el archivo: *C:\\Users\\victo\\PycharmProjects\\pythonProject\\* Se ha utilizado el comando dir para visualizar el contenido de ese directorio (comando similar a ls en Linux y MacOs). Por \u00faltimo, ejecutamos el programa: python hola_mundo.py A continuaci\u00f3n se muestran algunos de los comandos b\u00e1sicos m\u00e1s importantes que pueden resultarle \u00fatiles a la hora de trabajar en la consola. WINDOWS LINUX FUNCI\u00d3N copy cp Copiar un archivo move mv Mover un archivo dir ls Lista de archivos del mv Borrar archivos md mkdir Crear un directorio chdir pwd Visualizar su posici\u00f3n actual cd ruta cd ruta Cambiar de directorio Editores de texto e IDE Para escribir, leer y editar c\u00f3digo de la manera m\u00e1s eficiente posible, se necesita un editor de texto o un entorno de desarrollo integrado (IDE, Integrated development environment ). Un IDE no deja de ser un editor de texto, pero que incluye otra serie de herramientas que le permiten examinar el c\u00f3digo mientras se introduce y aprender sobre el mismo. Utilizar un IDE puede parecer abrumador para un principiante al comienzo, pero una vez se aconstumbre le ser\u00e1 mucho m\u00e1s f\u00e1cil escribir y leer c\u00f3digo. Si se trabaja en un equipo que posea pocos recursos, un editor de texto simple puede ser mejor opci\u00f3n. SUBLIME TEXT Sublime Text es un editor de texto avanzado que soporta multitud de lenguajes, como C, C++, HTML o LaTex. Es un programa de pago, la licencia individual cuesta unos 69$ aunque se puede descargar una versi\u00f3n de prueba que tiene tiempo ilimitado. No es una herramienta visual, sino un editor de texto cl\u00e1sico, destacando por su rapidez en la ejecuci\u00f3n y su tama\u00f1o (7 MBytes). VISUAL STUDIO CODE Editor de texto que act\u00faa de forma muy similar a un IDE. Desarrollado por Microsoft, este editor soporta el uso eficiente de un depurador, ofrece distintas herramientas de compleci\u00f3n de c\u00f3digo e integra compatibilidad con control de versiones. Es uno de los m\u00e1s utilizados por la comunidad. PYCHARM PyCharm es un IDE muy popular desarrollado por la compa\u00f1\u00eda Jetbrains , construido espec\u00edficamente para programar en el lenguaje Python. La versi\u00f3n gratuita se denomina PyCharm Community Edition , y contiene una gran cantidad de herramientas y opciones disponibles. Integra un depurador que ayuda a resolver errores, autocompletado en la sintaxis, herramientas de prueba y debug; as\u00ed como una terminal y consola Python, lo que lo convierte en uno de los mejores editores posibles. Enlaces de inter\u00e9s Documentaci\u00f3n de Python 3.10.2 Comandos Linux vs Windows Editores de texto e IDE","title":"Introducci\u00f3n a Python"},{"location":"2_Introduccion_python/#que-es-python","text":"Python es un lenguaje de programaci\u00f3n potente y f\u00e1cil de aprender, creado por Guido van Rossum en 1990, aunque actualmente es desarrollado y mantenido por la Python Software Foundation . Este lenguaje de programaci\u00f3n multiparadigma permite: Programaci\u00f3n imperativa. Programaci\u00f3n funcional. Programaci\u00f3n orientada a objetos. A diferencia de otros lenguajes como Java o .NET, se trata de un lenguaje interpretado, es decir, no es necesario compilarlo para ejecutar las aplicaciones escritas en Python, sino que se ejecutan directamente por el ordenador utilizando un programa denominado int\u00e9rprete.","title":"\u00bfQu\u00e9 es Python?"},{"location":"2_Introduccion_python/#caracteristicas","text":"Las principales caracter\u00edsticas de Python son las siguientes: Multiparadigma . Multiplataforma . Se puede encontrar un int\u00e9rprete de Python para los principales sistemas operativos (Windows, Linux y MacOS), utiliz\u00e1ndose el mismo c\u00f3digo en cada una de las plataformas. Interpretado . El c\u00f3digo no se compila. Din\u00e1micamente tipado y fuertemente tipado . Esto significa que el tipo de los objetos se decide en tiempo de ejecuci\u00f3n, y que el tipo de valor no cambia repentinamente.","title":"Caracter\u00edsticas"},{"location":"2_Introduccion_python/#instalacion","text":"Como se ha comentado, Python presenta soporte multiplataforma, y su instalaci\u00f3n es muy similar en Windows y MacOs. Python viene instalado en la mayor\u00eda de los sistemas MacOs y Linux, pero muy probablemente se trate de una versi\u00f3n desfasada, por lo que conviene comprobar de qu\u00e9 versi\u00f3n se trata. Python permite tener instaladas distintas versiones, por ejemplo, Python 3.9 y Python 3.10 . Al no tener conocimientos avanzados, se recomienda tener instalada \u00fanicamente una versi\u00f3n de Python, la m\u00e1s reciente ( 3.10 ). En concreto, la \u00faltima versi\u00f3n de Python disponible es la 3.10.2 , lanzada el d\u00eda 14 de enero de 2022. ENLACE PYTHON 3.10.2 El siguiente enlace le redirige a la p\u00e1gina oficial de Python para la descarga de Python 3.10.2","title":"Instalaci\u00f3n"},{"location":"2_Introduccion_python/#linux","text":"En primer lugar, abra la terminal. Ctrl + Alt + T. Buscar terminal en el tablero o Dash. Para comprobar la versi\u00f3n, se proponen tres formas diferentes: $ python -V $ python --version La \u00faltima opci\u00f3n ser\u00eda ejecutar python3 en la terminal, que producir\u00e1 una salida como esta: python 3.5.6 (default, Feb 2021, 22:59:56) [GCC 4.8.2] on linux2 Type \"help\", \"copyright\", \"credits\" or \"license\" for more information. >>> Una vez comprobada la versi\u00f3n, si desea instalar la versi\u00f3n m\u00e1s reciente, utilizaremos un paquete llamado deadsnakes , que actualizar\u00e1 el listado de paquetes disponibles de Python m\u00e1s recientes. Para salir del int\u00e9rprete de Python, pulse Control-D o escriba el comando exit() . Introduzca posteriormente los siguientes comandos: $ sudo add-apt-repository ppa:deadsnakes/ppa $ sudo apt-get update $ sudo apt install python3.10 Fallo en la actualizaci\u00f3n Si no ha conseguido actualizar Python, compruebe previamente que la lista de paquetes disponibles est\u00e1 actualizada. Introduzca en el terminal $ sudo apt update . Estos comandos deber\u00edan instalar la \u00faltima versi\u00f3n de Pyhton en su sistema. Para asegurarse que cuando ejecuta Python lo hace en la versi\u00f3n 3.10, acost\u00fambrese a ejecutarlo de la siguiente forma. $ python3.10","title":"Linux"},{"location":"2_Introduccion_python/#macos","text":"En primer lugar, abra una ventana del terminal: Aplicaciones > Utilidades > Terminal. Comando-Barra Espaciadora + Terminal. Para comprobar la versi\u00f3n, se proponen tres formas diferentes: $ python -V $ python --version La \u00faltima opci\u00f3n ser\u00eda ejecutar python en la terminal, que producir\u00e1 una salida como esta: python 3.5.6 (default, Feb 2021, 22:59:56) [GCC 4.8.2 Compatible Apple LLVM 9.1.0 (clang-902.0.39.2)] on darwin Type \"help\", \"copyright\", \"credits\" or \"license\" for more information. >>> Una vez comprobada la versi\u00f3n, si desea instalar la versi\u00f3n m\u00e1s reciente, tiene que descargar el instalador para su sistema, y seguir las etapas que aparecen en el apartado Windows - Etapas . Cuando haya finalizado, ya puede empezar una sesi\u00f3n de terminal de Python con el siguiente comando. $ python3 Aseg\u00farese de utilizar este comando para que se ejecute la versi\u00f3n de Python que acaba de instalar, ya que podr\u00eda ejecutar sino Python2 , con el que podr\u00eda tener problemas si intenta utilizar los c\u00f3digos que aparecen en este tutorial.","title":"MacOS"},{"location":"2_Introduccion_python/#windows","text":"","title":"Windows"},{"location":"2_Introduccion_python/#etapas","text":"Una vez descargado el instalador, inicie la instalaci\u00f3n (haciendo doble click). En la primera pantalla, se pueden modificar las opciones de instalaci\u00f3n en el cuadro Customize installation . El usuario puede utilizarlo, pero en principio no va a ser necesario. S\u00ed ser\u00e1 \u00fatil seleccionar la opci\u00f3n Add Python 3.10 to PATH , fundamental para usar la l\u00ednea de comandos para ejecutar programas. Una vez seleccionado, siga adelante mediante la opci\u00f3n Install Now . A continuaci\u00f3n, se realiza la instalaci\u00f3n. Puede durar unos cuantos minutos. Finalmente cierre el programa de instalaci\u00f3n en la opci\u00f3n Close . \u00a1Ya tiene instalado Python!","title":"Etapas"},{"location":"2_Introduccion_python/#ejecutar-python-en-el-terminal","text":"Una vez instalado Python, para comprobar que se ha realizado correctamente, vamos a ejecutarlo desde la terminal. Abrir una sesi\u00f3n de terminal. Buscar terminal en el buscador de Windows o Cortana. Abrir el men\u00fa Inicio - Ejecutar - cmd. Escribir python en min\u00fascula. Deber\u00eda aparecer por pantalla un mensaje similar: Una vez abierto, Python nos permite realizar diferentes acciones: desde realizar operaciones matem\u00e1ticas hasta mostrar mensajes por pantalla. >>> print(\"\u00a1Es un placer conocerte!\") \u00a1Es un placer conocerte! >>>","title":"Ejecutar Python en el terminal"},{"location":"2_Introduccion_python/#ejecutar-programas-de-python-desde-el-terminal","text":"En el siguiente punto se ver\u00e1n los posibles editores de texto, donde se ejecutar\u00e1n la mayor\u00eda de los programas. A veces, puede resultar \u00fatil ejecutar programas desde el terminal, como en aquellos casos en los que una limitaci\u00f3n de memoria RAM hagan que desee ejecutar un programa sin tener que abrir el editor (que implica mayor consumo). Para esto, es fundamental que conozca el directorio en el que se almacena dicho programa. A continuaci\u00f3n, se muestra un ejemplo de una ejecuci\u00f3n desde el terminal, creando previamente tanto el directorio como el archivo de texto a ejecutar.","title":"Ejecutar programas de Python desde el terminal"},{"location":"2_Introduccion_python/#hello-world","text":"Vamos a ejecutar un programa simple: Hola Mundo . Este programa se suele usar de forma gen\u00e9rica en inform\u00e1tica como introducci\u00f3n al estudio de un lenguaje de programaci\u00f3n determinado. Hay que crear en un directorio determinado, como puede ser Python_Projects , recomend\u00e1ndose practicar este tutorial siempre en el mismo directorio. Dentro de este directorio crearemos un archivo de texto plano denominado hola_mundo.py , como se muestra a continuaci\u00f3n: hola_mundo.py print ( \"Hola Mundo!!!\" ) Nombres de Archivos Como se puede observar, el nombre del archivo es hola_mundo y no hola mundo . En general, se recomienda que los archivos de programa est\u00e9n escritos de forma clara y utilizando guiones bajos para separar n\u00fameros o palabras. El nombre del archivo debe ser representetativo del programa que codifica. Una vez creado el programa, vamos a ejecutarlo en la terminal. La ejecuci\u00f3n es similar en todos los sistemas operativos: se debe acceder desde la terminal al directorio que contiene el programa, y una vez all\u00ed ejecutarlo. A continuaci\u00f3n se pone de ejemplo la ejecuci\u00f3n en Windows: Abrir la terminal. Utilizar el comando cd (permite cambiar de directorio) hasta entrar en el directorio en el que se encuentra el archivo. Se puede observar la ruta hasta el archivo: *C:\\Users\\victo\\PycharmProjects\\pythonProject\\* Se ha utilizado el comando dir para visualizar el contenido de ese directorio (comando similar a ls en Linux y MacOs). Por \u00faltimo, ejecutamos el programa: python hola_mundo.py A continuaci\u00f3n se muestran algunos de los comandos b\u00e1sicos m\u00e1s importantes que pueden resultarle \u00fatiles a la hora de trabajar en la consola. WINDOWS LINUX FUNCI\u00d3N copy cp Copiar un archivo move mv Mover un archivo dir ls Lista de archivos del mv Borrar archivos md mkdir Crear un directorio chdir pwd Visualizar su posici\u00f3n actual cd ruta cd ruta Cambiar de directorio","title":"Hello World"},{"location":"2_Introduccion_python/#editores-de-texto-e-ide","text":"Para escribir, leer y editar c\u00f3digo de la manera m\u00e1s eficiente posible, se necesita un editor de texto o un entorno de desarrollo integrado (IDE, Integrated development environment ). Un IDE no deja de ser un editor de texto, pero que incluye otra serie de herramientas que le permiten examinar el c\u00f3digo mientras se introduce y aprender sobre el mismo. Utilizar un IDE puede parecer abrumador para un principiante al comienzo, pero una vez se aconstumbre le ser\u00e1 mucho m\u00e1s f\u00e1cil escribir y leer c\u00f3digo. Si se trabaja en un equipo que posea pocos recursos, un editor de texto simple puede ser mejor opci\u00f3n. SUBLIME TEXT Sublime Text es un editor de texto avanzado que soporta multitud de lenguajes, como C, C++, HTML o LaTex. Es un programa de pago, la licencia individual cuesta unos 69$ aunque se puede descargar una versi\u00f3n de prueba que tiene tiempo ilimitado. No es una herramienta visual, sino un editor de texto cl\u00e1sico, destacando por su rapidez en la ejecuci\u00f3n y su tama\u00f1o (7 MBytes). VISUAL STUDIO CODE Editor de texto que act\u00faa de forma muy similar a un IDE. Desarrollado por Microsoft, este editor soporta el uso eficiente de un depurador, ofrece distintas herramientas de compleci\u00f3n de c\u00f3digo e integra compatibilidad con control de versiones. Es uno de los m\u00e1s utilizados por la comunidad. PYCHARM PyCharm es un IDE muy popular desarrollado por la compa\u00f1\u00eda Jetbrains , construido espec\u00edficamente para programar en el lenguaje Python. La versi\u00f3n gratuita se denomina PyCharm Community Edition , y contiene una gran cantidad de herramientas y opciones disponibles. Integra un depurador que ayuda a resolver errores, autocompletado en la sintaxis, herramientas de prueba y debug; as\u00ed como una terminal y consola Python, lo que lo convierte en uno de los mejores editores posibles. Enlaces de inter\u00e9s Documentaci\u00f3n de Python 3.10.2 Comandos Linux vs Windows Editores de texto e IDE","title":"Editores de texto e IDE"},{"location":"3_Pycharm/","text":"PyCharm es el IDE m\u00e1s popular utilizado para Python. Este cap\u00edtulo le dar\u00e1 una introducci\u00f3n a PyCharm y explicar\u00e1 sus caracter\u00edsticas, entre las que destacan: Asistencia inteligente a Python . Proporciona una finalizaci\u00f3n e inspecci\u00f3n de c\u00f3digo inteligente, as\u00ed como indicaciones de errores y refactorizaci\u00f3n de c\u00f3digo autom\u00e1tica. Depuraci\u00f3n avanzada . Visualizaci\u00f3n de Git en Editor . Desarrollo multitecnolog\u00eda . Compatible con JavaScript, SQL y HTML/CSS entre otros. Instalaci\u00f3n El IDE PyCharm fue creado por la compa\u00f1\u00eda JetBrains , y est\u00e1 disponible para los sistemas operativos Windows, Mac y Linux. La Community Edition es gratuita y contiene todas las funcionalidades necesarias para un uso principiante - intermedio, que ser\u00e1n m\u00e1s que suficientes. La instalaci\u00f3n con el asistente no es complicada y requiere 840 MB en el sistema de archivos. ENLACE PYCHARM El siguiente enlace le redirige a la p\u00e1gina oficial de JetBrains para la descarga de PyCharm Community Edition. Nuevo Proyecto Una vez instalado, al iniciar el programa aparece una ventana de bienvenida que ofrece la opci\u00f3n de crear un nuevo proyecto. Se puede observar la ruta hasta el archivo: *C:\\Users\\victo\\PycharmProjects\\pythonProject* En la parte superior le asigna un nombre y ubicaci\u00f3n al nuevo proyecto. Inicialmente, utilice la versi\u00f3n virtual ( virutalenv ). En Base Interpreter , seleccione la \u00faltima versi\u00f3n de Python que tenga disponible para asociarla con el proyecto. Como ser\u00e1 su primer proyecto, seleccione la opci\u00f3n Create a main.py welcome script , un script de ejemplo que le ser\u00e1 de ayuda. Herramientas Como se puede observar en la imagen anterior, la interfaz se compone de un dise\u00f1o b\u00e1sico, formado principalmente por los siguientes elementos: EDITOR .La mayor parte de la interfaz estar\u00e1 ocupada por el archivo que desee editar, en el caso de la imagen se observa el c\u00f3digo del archivo main.py . PROYECTO . A la izquierda de la pantalla, encontrar\u00e1 los directorios y archivos que componen el proyecto que acaba de crear. Esta ventana es realmente \u00fatil, ya que, a parte de poder organizar de forma f\u00e1cil los archivos que crea, puede realizar diferentes acciones haciendo click derecho en el archivo. Lista desplegable Destaca la posibilidad de crear, mover, ejecutar ( run ), depurar ( debug ) y eliminar archivos. Observe adem\u00e1s que en este caso el proyecto contiene un directorio ( venv ), que contiene un \u00fanico archivo ( main.py ). BARRA DE MEN\u00daS . Situada en la parte superior de la interfaz, los diferentes men\u00fas que la componen ofrecen una amplia gama de herramientas. File . Permite crear, abrir, guardar y cerrar proyectos o archivos de diferente tipo, modificar las opciones del IDE, activar el modo ahorro de energ\u00eda o cambiar las propiedades del archivo entre otras opciones. Edit . Incluye las opciones generales de copiar, cortar, pegar, deshacer, buscar, limpiar, etc. Destacan adem\u00e1s las opciones de unir, ordenar o duplicar las l\u00edneas de c\u00f3digo seleccionadas o todo el c\u00f3digo. View . Orientado principalmente a la configuraci\u00f3n del entorno, pudiendo seleccionar los elementos que desea que se muestren u oculten en su interfaz. Adem\u00e1s es muy \u00fatil poder ver los archivos recientes, as\u00ed como un historial de las \u00faltimas modificaciones en esos archivos. Navigate . Distintas opciones de navegaci\u00f3n en el c\u00f3digo, como la navegaci\u00f3n a una l\u00ednea de c\u00f3digo espec\u00edfica, buscar un elemento en el proyecto, encontrar una ruta de archivo... Code . Opciones dirigidas principalmente a la escritura/lectura de c\u00f3digo, como la inspecci\u00f3n y an\u00e1lisis del c\u00f3digo, o mover l\u00edneas, elementos y enunciados. Refactor . La refactorizaci\u00f3n de c\u00f3digo tiene el objetivo de que este pueda leerse de la manera m\u00e1s f\u00e1cil posible, y que una persona que no haya trabajado en su escritura, pueda captar la l\u00f3gica de este. Por tanto, esto mejora la legilibilidad y reduce la complejidad, sin realizar cambios en su comportamiento. Adem\u00e1s, incluye las opciones de mover/copiar archivos, la opci\u00f3n Pull members up , que ayuda a eliminar el c\u00f3digo duplicado; y la opci\u00f3n Pull members down , que ayuda a mejorar la coherencia del c\u00f3digo. Run . Sin duda, una de las ventanas que m\u00e1s se emplear\u00e1n. Desde esta, se pueden realizar tres acciones fundamentales: RUN . Opci\u00f3n para ejecutar el programa que se est\u00e1 editando. En el entorno PyCharm encontrar\u00e1 otras formas de realizar esta acci\u00f3n. DEBUG . Dise\u00f1ado para programaci\u00f3n, ayuda a agilizar o depurar c\u00f3digo, localizando errores o elementos innecesarios. BREAKPOINTS . Realiza un punto de parada donde se haya situado el punto al correr el c\u00f3digo, de forma que sea posible la revisi\u00f3n. Estos puntos de parada se pueden establecer clickando a la derecha del n\u00famero de l\u00ednea en la que se desee poner. Tools . Puede encontrar distintas opciones relacionadas con la gesti\u00f3n de tareas y contextos e iniciar la consola interactiva de Python. VCS . Antes de explicar qu\u00e9 permite esta ventana, hay que entender una serie de conceptos: \u00bfQu\u00e9 es Git? \u00bfY GitHub? . GitHub es un servicio basado en la nube que aloja un sistema de control de versiones (VCS) llamado Git . Este permite a los desarrolladores colaborar y realizar cambios en proyectos compartidos, a la vez que mantienen un seguimiento detallado de su progreso. Todos los usuarios de GitHub pueden rastrear y gestionar los cambios que se realizan en el c\u00f3digo fuente en tiempo real, a la vez que tienen acceso a todas las dem\u00e1s funciones de Git. \u00bfEs importante que conozca GitHub? . Como bioqu\u00edmico interesado en la bioinform\u00e1tica, es muy importante que se familiarice con esta plataforma, ya que hay miles de repositorios disponibles con programas que le pueden resultar \u00fatiles, gracias a una gran red de bioinform\u00e1ticos que comparten sus trabajos y se ayudan mutuamente. Entendido esto, ya solo queda decir que en esta ventana encontraremos todo lo necesario para vincular nuestro proyecto a GitHub. Podremos elegir si hacer este repositorio p\u00fablico o privado. GitHub En el siguiente enlace puede encontrar toda la informaci\u00f3n acerca de c\u00f3mo compartir su proyecto en GitHub . Window . En esta ventana puede guardar como predeterminada la disposici\u00f3n actual de ventanas o restaurar la disposici\u00f3n original, mostrar el submen\u00fa de comandos relacionados con las pesta\u00f1as del editor o con la realizaci\u00f3n de tareas en segundo plano, o cambiar entre los proyectos que tenga abiertos. Help . Esta es una de las ventanas con m\u00e1s opciones disponibles, entre las que destacan poder obtener m\u00e1s informaci\u00f3n sobre PyCharm EduTools , abrir en archivo PDF una lista de accesos directos disponibles, sugerencias del d\u00eda, \u00faltimas novedades de PyCharm o buscar las \u00faltimas actualizaciones disponibles. VENTANAS INFERIORES . En la zona inferior de la pantalla, puede encontrar una serie de paneles que ser\u00e1n muy importantes durante el uso de PyCharm. Estas herramientas las puede encontrar tambi\u00e9n en View > Tool Windows . TODO . La mayor\u00eda de los programadores ponen comentarios TODO en su c\u00f3digo, para rastrear los problemas que ven, las ideas que tienen, o algo que queda por hacer, como un carpintero que construye una casa y escribe una medida en el marco. En esta ventana podremos seleccionar si deseamos ver todos los comentarios TODO del proyecto o solo los del archivo actual. Adem\u00e1s podremos navegar entre los distintos elementos TODO con las opciones de la izquierda: seleccionar el anterior/siguiente TODO , filtrar los distintos elementos o seleccionar c\u00f3mo agrupar estos items TODO . TODO Para escribir en su c\u00f3digo un comentario TODO , simplemente tendr\u00e1 que escribir #todo seguido del comentario. Problems . Esta ventana muestra los problemas que PyCharm detecta en su proyecto. La pesta\u00f1a Current File enumera los problemas de c\u00f3digo encontrados en el archivo actual, donde puede seleccionarlos para saltar directamente a la l\u00ednea donde se encuentra; y la pesta\u00f1a Project Errors mostrar\u00e1 todo el conjunto de errores en su proyecto. Tenga en cuenta que en la mayor\u00eda de las ocasiones, el propio IDE le va a proporcionar posibles soluciones al problema detectado. Terminal . PyCharm incluye un emulador de terminal integrado para trabajar con el shell de l\u00ednea de comandos desde dentro del IDE. Como se puede observar, en este caso el emulador se ejecuta con Windows PowerShell. El terminal ser\u00e1 fundamental para ejecutar comandos de Git, cambiar permisos de archivos o realizar otras tareas de l\u00edneas de comandos desde el propio entorno. Python Packages . Pycharm admite la instalaci\u00f3n, desinstalaci\u00f3n y actualizaci\u00f3n de paquetes de Python. De forma predeterminada, Pycharm hace uso del administrador de paquetes pip para lo mismo. Esto tambi\u00e9n se puede realizar desde: File > Settings > Project > python interpreter. pip Pip (Package Installer for Python) es un sistema de gesti\u00f3n de paquetes utilizado para instalar y administrar paquetes en Python. Una ventaja importante de pip es la facilidad de su interfaz de l\u00ednea de comandos, el cual permite instalar paquetes de software de Python f\u00e1cilmente desde solo una orden: $ pip install nombre-paquete Por tanto, como PyCharm utiliza el administrador de paquetes pip, simplifica en gran medida el manejo de paquetes. Puede utilizar el navegador para buscar e instalar paquetes gen\u00e9ricos, o bien instalar paquetes espec\u00edficos: Import\u00e1ndolos desde tu propio ordenador (utilizando la ruta al directorio del paquete o archivo). Desde el Sistema de Control de Versiones (utilizando ruta a un repositorio de Git). Python Console . PyCharm incluye en la interfaz una consola de Python propia, siendo una forma r\u00e1pida de ejecutar comandos o probar c\u00f3digo sin crear un archivo. Enlaces de inter\u00e9s Aprenda PyCharm: tutorial de consejos y trucos r\u00e1pidos. \u00cdndice de elementos del men\u00fa. Git vs GitHub: What's the difference? Instalar, desinstalar y actualizar paquetes.","title":"PyCharm"},{"location":"3_Pycharm/#instalacion","text":"El IDE PyCharm fue creado por la compa\u00f1\u00eda JetBrains , y est\u00e1 disponible para los sistemas operativos Windows, Mac y Linux. La Community Edition es gratuita y contiene todas las funcionalidades necesarias para un uso principiante - intermedio, que ser\u00e1n m\u00e1s que suficientes. La instalaci\u00f3n con el asistente no es complicada y requiere 840 MB en el sistema de archivos. ENLACE PYCHARM El siguiente enlace le redirige a la p\u00e1gina oficial de JetBrains para la descarga de PyCharm Community Edition.","title":"Instalaci\u00f3n"},{"location":"3_Pycharm/#nuevo-proyecto","text":"Una vez instalado, al iniciar el programa aparece una ventana de bienvenida que ofrece la opci\u00f3n de crear un nuevo proyecto. Se puede observar la ruta hasta el archivo: *C:\\Users\\victo\\PycharmProjects\\pythonProject* En la parte superior le asigna un nombre y ubicaci\u00f3n al nuevo proyecto. Inicialmente, utilice la versi\u00f3n virtual ( virutalenv ). En Base Interpreter , seleccione la \u00faltima versi\u00f3n de Python que tenga disponible para asociarla con el proyecto. Como ser\u00e1 su primer proyecto, seleccione la opci\u00f3n Create a main.py welcome script , un script de ejemplo que le ser\u00e1 de ayuda.","title":"Nuevo Proyecto"},{"location":"3_Pycharm/#herramientas","text":"Como se puede observar en la imagen anterior, la interfaz se compone de un dise\u00f1o b\u00e1sico, formado principalmente por los siguientes elementos: EDITOR .La mayor parte de la interfaz estar\u00e1 ocupada por el archivo que desee editar, en el caso de la imagen se observa el c\u00f3digo del archivo main.py . PROYECTO . A la izquierda de la pantalla, encontrar\u00e1 los directorios y archivos que componen el proyecto que acaba de crear. Esta ventana es realmente \u00fatil, ya que, a parte de poder organizar de forma f\u00e1cil los archivos que crea, puede realizar diferentes acciones haciendo click derecho en el archivo. Lista desplegable Destaca la posibilidad de crear, mover, ejecutar ( run ), depurar ( debug ) y eliminar archivos. Observe adem\u00e1s que en este caso el proyecto contiene un directorio ( venv ), que contiene un \u00fanico archivo ( main.py ). BARRA DE MEN\u00daS . Situada en la parte superior de la interfaz, los diferentes men\u00fas que la componen ofrecen una amplia gama de herramientas. File . Permite crear, abrir, guardar y cerrar proyectos o archivos de diferente tipo, modificar las opciones del IDE, activar el modo ahorro de energ\u00eda o cambiar las propiedades del archivo entre otras opciones. Edit . Incluye las opciones generales de copiar, cortar, pegar, deshacer, buscar, limpiar, etc. Destacan adem\u00e1s las opciones de unir, ordenar o duplicar las l\u00edneas de c\u00f3digo seleccionadas o todo el c\u00f3digo. View . Orientado principalmente a la configuraci\u00f3n del entorno, pudiendo seleccionar los elementos que desea que se muestren u oculten en su interfaz. Adem\u00e1s es muy \u00fatil poder ver los archivos recientes, as\u00ed como un historial de las \u00faltimas modificaciones en esos archivos. Navigate . Distintas opciones de navegaci\u00f3n en el c\u00f3digo, como la navegaci\u00f3n a una l\u00ednea de c\u00f3digo espec\u00edfica, buscar un elemento en el proyecto, encontrar una ruta de archivo... Code . Opciones dirigidas principalmente a la escritura/lectura de c\u00f3digo, como la inspecci\u00f3n y an\u00e1lisis del c\u00f3digo, o mover l\u00edneas, elementos y enunciados. Refactor . La refactorizaci\u00f3n de c\u00f3digo tiene el objetivo de que este pueda leerse de la manera m\u00e1s f\u00e1cil posible, y que una persona que no haya trabajado en su escritura, pueda captar la l\u00f3gica de este. Por tanto, esto mejora la legilibilidad y reduce la complejidad, sin realizar cambios en su comportamiento. Adem\u00e1s, incluye las opciones de mover/copiar archivos, la opci\u00f3n Pull members up , que ayuda a eliminar el c\u00f3digo duplicado; y la opci\u00f3n Pull members down , que ayuda a mejorar la coherencia del c\u00f3digo. Run . Sin duda, una de las ventanas que m\u00e1s se emplear\u00e1n. Desde esta, se pueden realizar tres acciones fundamentales: RUN . Opci\u00f3n para ejecutar el programa que se est\u00e1 editando. En el entorno PyCharm encontrar\u00e1 otras formas de realizar esta acci\u00f3n. DEBUG . Dise\u00f1ado para programaci\u00f3n, ayuda a agilizar o depurar c\u00f3digo, localizando errores o elementos innecesarios. BREAKPOINTS . Realiza un punto de parada donde se haya situado el punto al correr el c\u00f3digo, de forma que sea posible la revisi\u00f3n. Estos puntos de parada se pueden establecer clickando a la derecha del n\u00famero de l\u00ednea en la que se desee poner. Tools . Puede encontrar distintas opciones relacionadas con la gesti\u00f3n de tareas y contextos e iniciar la consola interactiva de Python. VCS . Antes de explicar qu\u00e9 permite esta ventana, hay que entender una serie de conceptos: \u00bfQu\u00e9 es Git? \u00bfY GitHub? . GitHub es un servicio basado en la nube que aloja un sistema de control de versiones (VCS) llamado Git . Este permite a los desarrolladores colaborar y realizar cambios en proyectos compartidos, a la vez que mantienen un seguimiento detallado de su progreso. Todos los usuarios de GitHub pueden rastrear y gestionar los cambios que se realizan en el c\u00f3digo fuente en tiempo real, a la vez que tienen acceso a todas las dem\u00e1s funciones de Git. \u00bfEs importante que conozca GitHub? . Como bioqu\u00edmico interesado en la bioinform\u00e1tica, es muy importante que se familiarice con esta plataforma, ya que hay miles de repositorios disponibles con programas que le pueden resultar \u00fatiles, gracias a una gran red de bioinform\u00e1ticos que comparten sus trabajos y se ayudan mutuamente. Entendido esto, ya solo queda decir que en esta ventana encontraremos todo lo necesario para vincular nuestro proyecto a GitHub. Podremos elegir si hacer este repositorio p\u00fablico o privado. GitHub En el siguiente enlace puede encontrar toda la informaci\u00f3n acerca de c\u00f3mo compartir su proyecto en GitHub . Window . En esta ventana puede guardar como predeterminada la disposici\u00f3n actual de ventanas o restaurar la disposici\u00f3n original, mostrar el submen\u00fa de comandos relacionados con las pesta\u00f1as del editor o con la realizaci\u00f3n de tareas en segundo plano, o cambiar entre los proyectos que tenga abiertos. Help . Esta es una de las ventanas con m\u00e1s opciones disponibles, entre las que destacan poder obtener m\u00e1s informaci\u00f3n sobre PyCharm EduTools , abrir en archivo PDF una lista de accesos directos disponibles, sugerencias del d\u00eda, \u00faltimas novedades de PyCharm o buscar las \u00faltimas actualizaciones disponibles. VENTANAS INFERIORES . En la zona inferior de la pantalla, puede encontrar una serie de paneles que ser\u00e1n muy importantes durante el uso de PyCharm. Estas herramientas las puede encontrar tambi\u00e9n en View > Tool Windows . TODO . La mayor\u00eda de los programadores ponen comentarios TODO en su c\u00f3digo, para rastrear los problemas que ven, las ideas que tienen, o algo que queda por hacer, como un carpintero que construye una casa y escribe una medida en el marco. En esta ventana podremos seleccionar si deseamos ver todos los comentarios TODO del proyecto o solo los del archivo actual. Adem\u00e1s podremos navegar entre los distintos elementos TODO con las opciones de la izquierda: seleccionar el anterior/siguiente TODO , filtrar los distintos elementos o seleccionar c\u00f3mo agrupar estos items TODO . TODO Para escribir en su c\u00f3digo un comentario TODO , simplemente tendr\u00e1 que escribir #todo seguido del comentario. Problems . Esta ventana muestra los problemas que PyCharm detecta en su proyecto. La pesta\u00f1a Current File enumera los problemas de c\u00f3digo encontrados en el archivo actual, donde puede seleccionarlos para saltar directamente a la l\u00ednea donde se encuentra; y la pesta\u00f1a Project Errors mostrar\u00e1 todo el conjunto de errores en su proyecto. Tenga en cuenta que en la mayor\u00eda de las ocasiones, el propio IDE le va a proporcionar posibles soluciones al problema detectado. Terminal . PyCharm incluye un emulador de terminal integrado para trabajar con el shell de l\u00ednea de comandos desde dentro del IDE. Como se puede observar, en este caso el emulador se ejecuta con Windows PowerShell. El terminal ser\u00e1 fundamental para ejecutar comandos de Git, cambiar permisos de archivos o realizar otras tareas de l\u00edneas de comandos desde el propio entorno. Python Packages . Pycharm admite la instalaci\u00f3n, desinstalaci\u00f3n y actualizaci\u00f3n de paquetes de Python. De forma predeterminada, Pycharm hace uso del administrador de paquetes pip para lo mismo. Esto tambi\u00e9n se puede realizar desde: File > Settings > Project > python interpreter. pip Pip (Package Installer for Python) es un sistema de gesti\u00f3n de paquetes utilizado para instalar y administrar paquetes en Python. Una ventaja importante de pip es la facilidad de su interfaz de l\u00ednea de comandos, el cual permite instalar paquetes de software de Python f\u00e1cilmente desde solo una orden: $ pip install nombre-paquete Por tanto, como PyCharm utiliza el administrador de paquetes pip, simplifica en gran medida el manejo de paquetes. Puede utilizar el navegador para buscar e instalar paquetes gen\u00e9ricos, o bien instalar paquetes espec\u00edficos: Import\u00e1ndolos desde tu propio ordenador (utilizando la ruta al directorio del paquete o archivo). Desde el Sistema de Control de Versiones (utilizando ruta a un repositorio de Git). Python Console . PyCharm incluye en la interfaz una consola de Python propia, siendo una forma r\u00e1pida de ejecutar comandos o probar c\u00f3digo sin crear un archivo. Enlaces de inter\u00e9s Aprenda PyCharm: tutorial de consejos y trucos r\u00e1pidos. \u00cdndice de elementos del men\u00fa. Git vs GitHub: What's the difference? Instalar, desinstalar y actualizar paquetes.","title":"Herramientas"},{"location":"4_Variables/","text":"Variables y constantes El concepto de variable hace referencia a un nombre simb\u00f3lico o identificador que se asocia a un dato que se almacena en la memoria principal del ordenador, y se utiliza de forma habitual en programaci\u00f3n para guardar distintos tipos de datos y operar con ellos posteriormente. Variables auxiliares . Tambi\u00e9n se llaman variables temporales. Son las que necesitamos para realizar algo de manera temporal, y seguramente esa variable no la necesites una vez ha cumplido su objetivo. Variables acumulativas . Sirven para almacenar un n\u00famero y sus valores consecutivos. Suelen utilizarse en bucles como for y while . Una constante es un tipo de variable la cual no puede ser cambiada. Por tanto, es un valor que no debe ser alterado/modificado durante la ejecuci\u00f3n de un programa, \u00fanicamente le\u00eddo. Python no tiene tipos de constantes integrados, pero los programadores utilizan may\u00fasculas para indicar que una variable deber\u00eda tratarse como una constante y no alterarse. 1 NUM_AMINOACIDOS = 500 Nombrar y usar variables Cuando utilizamos variables en Python, tenemos que seguir una serie de normas y directrices. Algunas de estas directrices \u00fanicamente se emplean para que el c\u00f3digo sea f\u00e1cil de leer y entender, adquiriendo universalidad; mientras que romper algunas reglas provocar\u00e1 errores durante la ejecuci\u00f3n del c\u00f3digo. Los nombres de variable solo pueden contener letras, n\u00fameros y guiones bajos . No pueden empezar por un n\u00famero, pero s\u00ed por una letra o guion. Ej . Puede llamar a un variable variable1 pero no 1variable . Los guiones bajos pueden servir para separar las palabras, ya que los espacios no est\u00e1n permitidos. Ej . Puede llamar a una variable primera_variable pero no primera variable . Los nombres de variable deben ser cortos pero descriptivos. No use palabras que Python tiene reservadas para un prop\u00f3sito concreto como print, return o finally . Palabras reservadas Puede verificar si una palabra esta reservada utilizando el m\u00f3dulo integrado keyword . 1 2 3 import keyword keyword . iskeyword ( \"print\" ) keyword . iskeyword ( \"fecha\" ) \u00bfC\u00f3mo escribir una variable? Para asignar un valor a una variable se utiliza el operador de igualdad (=). A la izquierda de la igualdad se escribe el nombre de la variable y a la derecha el valor que se quiere dar a la variable. 1 2 edad_paciente = 41 obj_estudio = \"prote\u00edna\" Para visualizar el valor de una variable, basta con escribir su nombre: 1 2 3 4 edad_paciente = 41 >>> edad_paciente 41 Podemos asignar un solo valor a m\u00faltiples variables de la siguiente manera: 1 x = y = z = 5 Adem\u00e1s, podemos asignar m\u00faltiples valores a m\u00faltiples variables de la siguiente manera: 1 a , b , c = 5 , 'abcde' , 9 del La instrucci\u00f3n del borra completamente una variable. 1 2 3 4 5 6 x = 5 >>> x 5 del x >>> x ERROR Tipos de variables La informaci\u00f3n que se guarda en una variable puede ser de muchos tipos: N\u00fameros (enteros, decimales, imaginarios, en notaci\u00f3n cient\u00edfica, en base decimal o en otras bases, etc.) Cadenas de texto (una sola letra o m\u00e1s letras, del juego de caracteres ASCII o Unicode, etc) Conjuntos de n\u00fameros o texto (matrices, listas, tuplas, etc.) Estructuras m\u00e1s complicadas (punteros, diccionarios, etc.) Aunque se definan de forma similar, para Python no es lo mismo un n\u00famero entero, un n\u00famero decimal o una cadena ya que, por ejemplo, dos n\u00fameros se pueden multiplicar pero dos cadenas no (aunque una cadena s\u00ed que se puede multiplicar por un n\u00famero). A continuaci\u00f3n puede ver ejemplos de estas diferencias. 1 fecha_actual = 2022 En este caso la variable fecha_actual est\u00e1 almacenando un n\u00famero entero. 1 fecha_actual = \"2022\" En este caso la variable fecha_actual est\u00e1 almacenando una cadena formada por cuatro letras. 1 fecha_actual = [ \"marzo\" , 2022 ] En este caso la variable fecha_actual est\u00e1 almacenando una lista. Este tipo de elemento se ver\u00e1 m\u00e1s adelante. Datos num\u00e9ricos Secuencia de d\u00edgitos que representan n\u00fameros, pudiendo incluir el - (guion) para negativos y el . (punto) para decimales. El tipo de datos de n\u00famero se divide en los siguientes cinco tipos de datos en Python: Entero. No son m\u00e1s que n\u00fameros enteros, y pueden ser de diferentes tipos: positivo, negativo, cero y largo. Entero largo. El sufijo L se usa para la representaci\u00f3n de enteros largos en Python, y estos se utilizan para almacenar n\u00fameros grandes sin perder precisi\u00f3n. 1 variable = 10000000 L Octales y hexadecimales. Para representar el n\u00famero octal que tiene base 8 en Python, agregue un 0 previamente para que el int\u00e9rprete de Python pueda reconocer que el valor est\u00e9 en base 8 y no en base 10. Para representar el n\u00famero hexadecimal, agregue 0x. 1 2 3 4 variable = 014 >>> variable 12 #Python devuelve por salida el valor en base decimal N\u00fameros de punto flotante. Simbolizan los n\u00fameros reales que se escriben con un punto decimal que divide las partes entera y decimal. Los n\u00fameros de punto flotante tambi\u00e9n pueden venir con notaci\u00f3n cient\u00edfica con E o e, indicando la potencia de 10.* 1 variable = 7.9e2 #Esto es igual a 7.9 * 10**2 N\u00fameros complejos. Los n\u00fameros complejos tienen la forma 'a + bj', donde a es el valor flotante de la parte real y b es el valor flotante de la parte imaginaria, y j representa la ra\u00edz cuadrada de \u22121. 1 variable = 5 + 3 j Conversi\u00f3n entre tipos de n\u00fameros Hay algunas funciones integradas de Python que nos permiten convertir n\u00fameros expl\u00edcitamente de un tipo a otro. Un ejemplo es int () . 1 2 3 4 5 valor = 1.5 valor = int ( valor ) >>> valor 1 En el siguiente enlace puede encontrar m\u00e1s informaci\u00f3n sobre las funciones de conversi\u00f3n . Cadenas de caracteres Las cadenas de caracteres son secuencias que contienen caracteres encerrados entre comillas, simples o dobles. Tambi\u00e9n podemos usar comillas triples, pero generalmente las comillas triples se usan para crear cadenas de documentos o cadenas de varias l\u00edneas. 1 2 cadena1 = 'bioquimica' cadena2 = \"cromosoma\" En Python, se puede acceder individualmente a los caracteres de la cadena, desde ambas direcciones: hacia adelante y hacia atr\u00e1s. Hacia adelante comienza desde 0, 1, 2... ; mientras que hacia atr\u00e1s comienza desde \u22121, \u22122... 1 2 3 4 5 6 cadena1 = 'bioquimica' >>> cadena1 [ 1 ] i >>> cadena1 [ - 2 ] c A continuaci\u00f3n se muestran algunas de las funciones disponibles para trabajar con cadenas: Funci\u00f3n len() . Funci\u00f3n que devuelve la longitud de la cadena. 1 2 3 4 cadena = 'espermatozoide' >>> len ( cadena ) 14 Mostrar parte de la cadena . A continuaci\u00f3n se muestra sintaxis para imprimir por pantalla parte de la cadena, ya sea el principio, final o una parte intermedia. 1 2 3 4 5 6 7 8 cadena = 'espermatozoide' >>> cadena [ 2 : 6 ] perma >>> cadena [: 6 ] esperma >>> cadena [ 6 :] atozoide Cadena inversa . No hay ninguna funci\u00f3n integrada para invertir una cadena en Python, pero la forma m\u00e1s f\u00e1cil es usar un segmento que comienza al final de la cadena y va hacia atr\u00e1s. 1 2 3 4 cadena = 'espermatozoide' [:: - 1 ] >>> cadena ediozotamrepse Concatenar cadenas . El operador + se usa para agregar una cadena a otra cadena. 1 2 3 4 5 6 cadena_1 = 'La hemoglobina ' cadena_2 = 'es una proteina' cadena_final = cadena_1 + cadena_2 >>> cadena_final La hemoglobina es una proteina Reemplazar elementos . El m\u00e9todo replace() reemplazar\u00e1 un elemento espec\u00edfico con otro. 1 2 3 4 5 cadena_1 = 'AAATTGGCCAA' cadena_final = cadena_1 . replace ( \"A\" , \"T\" ) >>> cadena_final TTTTTGGCCTT Otras funciones En el siguiente enlace puede encontrar m\u00e1s funciones disponibles para trabajar con cadenas . Es importante que se familiarice con estas, ya que ser\u00e1 importante a la hora de trabajar con secuencias de ADN, ya sea reemplazando, contando, o identificando nucl\u00e9otidos por ejemplo. Booleanos Contiene \u00fanicamente dos elementos, True y False, que representan los valores l\u00f3gicos verdadero y falso respectivamente. Por este motivo tambi\u00e9n se denominan l\u00f3gicos . Todos los otros valores son interpretados por defecto a True. >>> False == False True >>> 0 == False True >>> None == False False Alcance de las variables Las variables en Python son locales por defecto. Esto quiere decir que las variables definidas y utilizadas en el bloque de c\u00f3digo de una funci\u00f3n, solo tienen existencia dentro de la misma, y no interfieren con otras variables del resto del c\u00f3digo. En caso de que sea conveniente o necesario, una variable local puede convertirse en una variable global declar\u00e1ndola expl\u00edcitamente como tal con la sentencia global . Operadores En Python, tenemos un conjunto de s\u00edmbolos especiales que realizan varios tipos de operaciones, como operaciones l\u00f3gicas, operaciones matem\u00e1ticas y m\u00e1s. Estos s\u00edmbolos se denominan operadores . Los valores sobre los que los operadores realizan sus respectivas operaciones se conocen como operandos . Aritm\u00e9ticos Los operadores aritm\u00e9ticos se utilizan para realizar varias operaciones matem\u00e1ticas simples como sumas, restas y multiplicaciones. OPERADOR NOMBRE FUNCI\u00d3N + Suma Este operador suma los valores de los datos num\u00e9ricos - Resta Este operador resta los valores de los datos num\u00e9ricos * Multiplicaci\u00f3n Este operador multiplica los valores de los datos num\u00e9ricos / Divisi\u00f3n Este operador divide los valores de los datos num\u00e9ricos. El resultado es un n\u00famero real ** Exponente Este operador calcula el exponente entre los valores de los datos num\u00e9ricos % M\u00f3dulo Este operador devuelve el resto de la divisi\u00f3n entre los dos operandos // Divisi\u00f3n entera Este operador devuelve la parte entera del cociente de la divisi\u00f3n entre dos operandos El orden de precedencia de ejecuci\u00f3n de los operadores aritm\u00e9ticos es: Exponente: ** Multiplicaci\u00f3n, Divisi\u00f3n, Divisi\u00f3n entera, M\u00f3dulo: *, /, //, % Suma, Resta: +, - EJEMPLOS >>> 5 * 6 30 >>> 8 / 3 2.66667 >>> 8 // 3 2 >>> 7 % 2 1 Relacionales Tambi\u00e9n se conocen como operadores de comparaci\u00f3n porque comparan los valores en ambos lados del operador. Despu\u00e9s de la comparaci\u00f3n, devuelve el valor booleano, es decir, verdadero o falso. OPERADOR NOMBRE FUNCI\u00d3N == Igual a Si los dos operandos comparados son iguales, devuelve verdadero != No igual a Si los dos operandos comparados no son iguales, devuelve verdadero < Menor que Si el valor del operando izquierdo es menor que el del operando derecho, devuelve verdadero > Mayor que Si el valor del operando izquierdo es mayor que el del operando derecho, devuelve verdadero <= Menor o igual que Si el valor del operando izquierdo es menor o igual que el del operando derecho, devuelve verdadero >= Mayor o igual que Si el valor del operando izquierdo es mayor o igual que el del operando derecho, devuelve verdadero EJEMPLOS >>> 7 == 9 False >>> 5 * 2 != 30 / 2 True >>> \"genoma\" == \"genoma\" True >>> 5 ** 2 <= 15 False De Asignaci\u00f3n Los operadores de asignaci\u00f3n se utilizan para asignar valores a las variables de Python . La asignaci\u00f3n a veces se realiza directamente y, a veces, el operador primero realiza alg\u00fan tipo de operaci\u00f3n matem\u00e1tica y luego asigna el valor al operando. OPERADOR NOMBRE FUNCI\u00d3N = Asignaci\u00f3n Asigna a la variable del lado izquierdo cualquier variable o resultado del lado derecho += Sumar y asignar Realiza la suma y luego el resultado se asigna al operando de la izquierda -= Restar y asignar Realiza la resta y luego el resultado se asigna al operando de la izquierda *= Multiplicar y asignar Realiza la multiplicaci\u00f3n y luego el resultado se asigna al operando de la izquierda /= Dividir y asignar Realiza la divisi\u00f3n y luego el resultado se asigna al operando de la izquierda %= M\u00f3dulo y asignar Realiza el m\u00f3dulo y luego el resultado se asigna al operando de la izquierda **= Exponente y asignar Realiza exponente, y luego el resultado se asigna al operando de la izquierda //= Divisi\u00f3n entera y asignar Realiza la divisi\u00f3n de piso y luego el resultado se asigna al operando de la izquierda EJEMPLOS 1 2 3 4 5 6 7 8 9 x = 5 x += 10 >>> x 15 y = 5 y *= 20 >>> y 100 L\u00f3gicos Los operadores l\u00f3gicos se utilizan principalmente para declaraciones condicionales. Hay tres tipos de operadores l\u00f3gicos: AND, OR y NOT. OPERADOR NOMBRE FUNCI\u00d3N AND Logical AND Devuelve TRUE cuando ambas expresiones son verdaderas, de lo contrario FALSE OR Logical OR Devuelve TRUE si al menos una condici\u00f3n es verdadera, de lo contrario FALSE NOT Logical NOT Devuelve TRUE cuando la expresi\u00f3n no es verdadera EJEMPLOS >>> ( 2 < 1 ) and ( 2 < 3 ) False >>> ( 2 < 1 ) or ( 2 < 3 ) True >>> not ( 5 > 4 ) False >>> not ( 5 != 5 * 1 ) True Ejercicios EJERCICIO 1 . Escribir un programa que almacene la cadena \u00a1Hola Mundo! en una variable y luego muestre por pantalla el contenido de la variable. Respuesta 1 2 mensaje = \"\u00a1Hola Mundo!\" print ( mensaje ) EJERCICIO 2 . Escribir un programa que pida al usuario su peso (en kg) y estatura (en metros), calcule el \u00edndice de masa corporal y lo almacene en una variable. Respuesta 1 2 3 4 5 peso = input ( \"\u00bfCu\u00e1l es tu peso en kg? \" ) estatura = input ( \"\u00bfCu\u00e1l es tu estatura en metros?\" ) imc = round ( float ( peso ) / float ( estatura ) ** 2 , 2 ) print ( \"Tu \u00edndice de masa corporal es \" + str ( imc )) # En este caso el \u00edndice de masa corporal se ha redondeado con dos decimales. EJERCICIO 3 . Escribir un programa que pida al usuario que introduzca una frase en la consola y muestre por pantalla la frase invertida. Respuesta 1 2 frase = input ( \"Introduce una frase: \" ) print ( frase [:: - 1 ]) EJERCICIO 4 . Escribir un programa que transforme grados Kelvin en grados Celcius. Respuesta 1 2 3 grados_kelvin = input ( \"Indique los grados en unidades Kelvin:\" ) grados_celcius = ( grados_kelvin - 273.15 ) print ( f \"El valor en unidades Celcius es { grados_celcius } \" ) EJERCICIO 5 . Escribir un programa que pregunte por consola el precio de un producto en euros con dos decimales y muestre por pantalla el n\u00famero de euros y el n\u00famero de c\u00e9ntimos del precio introducido. Respuesta 1 2 precio = input ( \"Introduce el precio del producto con dos decimales: \" ) print ( precio [: precio . find ( '.' )], 'euros y' , precio [ precio . find ( '.' ) + 1 :], 'c\u00e9ntimos.' ) EJERCICIO 6 . Escribir un programa que pregunte el nombre del usuario en la consola y despu\u00e9s de que el usuario lo introduzca, muestre por pantalla el n\u00famero de letras que tiene el nombre en may\u00fasculas. Respuesta 1 2 nombre = input ( \"\u00bfC\u00f3mo te llamas? \" ) print ( nombre . upper () + \" tiene \" + str ( len ( nombre )) + \" letras\" ) Enlaces de inter\u00e9s Informaci\u00f3n acerca de cadenas de caracteres. How to use Strings in Python Operadores","title":"Variables y operadores"},{"location":"4_Variables/#variables-y-constantes","text":"El concepto de variable hace referencia a un nombre simb\u00f3lico o identificador que se asocia a un dato que se almacena en la memoria principal del ordenador, y se utiliza de forma habitual en programaci\u00f3n para guardar distintos tipos de datos y operar con ellos posteriormente. Variables auxiliares . Tambi\u00e9n se llaman variables temporales. Son las que necesitamos para realizar algo de manera temporal, y seguramente esa variable no la necesites una vez ha cumplido su objetivo. Variables acumulativas . Sirven para almacenar un n\u00famero y sus valores consecutivos. Suelen utilizarse en bucles como for y while . Una constante es un tipo de variable la cual no puede ser cambiada. Por tanto, es un valor que no debe ser alterado/modificado durante la ejecuci\u00f3n de un programa, \u00fanicamente le\u00eddo. Python no tiene tipos de constantes integrados, pero los programadores utilizan may\u00fasculas para indicar que una variable deber\u00eda tratarse como una constante y no alterarse. 1 NUM_AMINOACIDOS = 500","title":"Variables y constantes"},{"location":"4_Variables/#nombrar-y-usar-variables","text":"Cuando utilizamos variables en Python, tenemos que seguir una serie de normas y directrices. Algunas de estas directrices \u00fanicamente se emplean para que el c\u00f3digo sea f\u00e1cil de leer y entender, adquiriendo universalidad; mientras que romper algunas reglas provocar\u00e1 errores durante la ejecuci\u00f3n del c\u00f3digo. Los nombres de variable solo pueden contener letras, n\u00fameros y guiones bajos . No pueden empezar por un n\u00famero, pero s\u00ed por una letra o guion. Ej . Puede llamar a un variable variable1 pero no 1variable . Los guiones bajos pueden servir para separar las palabras, ya que los espacios no est\u00e1n permitidos. Ej . Puede llamar a una variable primera_variable pero no primera variable . Los nombres de variable deben ser cortos pero descriptivos. No use palabras que Python tiene reservadas para un prop\u00f3sito concreto como print, return o finally . Palabras reservadas Puede verificar si una palabra esta reservada utilizando el m\u00f3dulo integrado keyword . 1 2 3 import keyword keyword . iskeyword ( \"print\" ) keyword . iskeyword ( \"fecha\" )","title":"Nombrar y usar variables"},{"location":"4_Variables/#como-escribir-una-variable","text":"Para asignar un valor a una variable se utiliza el operador de igualdad (=). A la izquierda de la igualdad se escribe el nombre de la variable y a la derecha el valor que se quiere dar a la variable. 1 2 edad_paciente = 41 obj_estudio = \"prote\u00edna\" Para visualizar el valor de una variable, basta con escribir su nombre: 1 2 3 4 edad_paciente = 41 >>> edad_paciente 41 Podemos asignar un solo valor a m\u00faltiples variables de la siguiente manera: 1 x = y = z = 5 Adem\u00e1s, podemos asignar m\u00faltiples valores a m\u00faltiples variables de la siguiente manera: 1 a , b , c = 5 , 'abcde' , 9 del La instrucci\u00f3n del borra completamente una variable. 1 2 3 4 5 6 x = 5 >>> x 5 del x >>> x ERROR","title":"\u00bfC\u00f3mo escribir una variable?"},{"location":"4_Variables/#tipos-de-variables","text":"La informaci\u00f3n que se guarda en una variable puede ser de muchos tipos: N\u00fameros (enteros, decimales, imaginarios, en notaci\u00f3n cient\u00edfica, en base decimal o en otras bases, etc.) Cadenas de texto (una sola letra o m\u00e1s letras, del juego de caracteres ASCII o Unicode, etc) Conjuntos de n\u00fameros o texto (matrices, listas, tuplas, etc.) Estructuras m\u00e1s complicadas (punteros, diccionarios, etc.) Aunque se definan de forma similar, para Python no es lo mismo un n\u00famero entero, un n\u00famero decimal o una cadena ya que, por ejemplo, dos n\u00fameros se pueden multiplicar pero dos cadenas no (aunque una cadena s\u00ed que se puede multiplicar por un n\u00famero). A continuaci\u00f3n puede ver ejemplos de estas diferencias. 1 fecha_actual = 2022 En este caso la variable fecha_actual est\u00e1 almacenando un n\u00famero entero. 1 fecha_actual = \"2022\" En este caso la variable fecha_actual est\u00e1 almacenando una cadena formada por cuatro letras. 1 fecha_actual = [ \"marzo\" , 2022 ] En este caso la variable fecha_actual est\u00e1 almacenando una lista. Este tipo de elemento se ver\u00e1 m\u00e1s adelante.","title":"Tipos de variables"},{"location":"4_Variables/#datos-numericos","text":"Secuencia de d\u00edgitos que representan n\u00fameros, pudiendo incluir el - (guion) para negativos y el . (punto) para decimales. El tipo de datos de n\u00famero se divide en los siguientes cinco tipos de datos en Python: Entero. No son m\u00e1s que n\u00fameros enteros, y pueden ser de diferentes tipos: positivo, negativo, cero y largo. Entero largo. El sufijo L se usa para la representaci\u00f3n de enteros largos en Python, y estos se utilizan para almacenar n\u00fameros grandes sin perder precisi\u00f3n. 1 variable = 10000000 L Octales y hexadecimales. Para representar el n\u00famero octal que tiene base 8 en Python, agregue un 0 previamente para que el int\u00e9rprete de Python pueda reconocer que el valor est\u00e9 en base 8 y no en base 10. Para representar el n\u00famero hexadecimal, agregue 0x. 1 2 3 4 variable = 014 >>> variable 12 #Python devuelve por salida el valor en base decimal N\u00fameros de punto flotante. Simbolizan los n\u00fameros reales que se escriben con un punto decimal que divide las partes entera y decimal. Los n\u00fameros de punto flotante tambi\u00e9n pueden venir con notaci\u00f3n cient\u00edfica con E o e, indicando la potencia de 10.* 1 variable = 7.9e2 #Esto es igual a 7.9 * 10**2 N\u00fameros complejos. Los n\u00fameros complejos tienen la forma 'a + bj', donde a es el valor flotante de la parte real y b es el valor flotante de la parte imaginaria, y j representa la ra\u00edz cuadrada de \u22121. 1 variable = 5 + 3 j Conversi\u00f3n entre tipos de n\u00fameros Hay algunas funciones integradas de Python que nos permiten convertir n\u00fameros expl\u00edcitamente de un tipo a otro. Un ejemplo es int () . 1 2 3 4 5 valor = 1.5 valor = int ( valor ) >>> valor 1 En el siguiente enlace puede encontrar m\u00e1s informaci\u00f3n sobre las funciones de conversi\u00f3n .","title":"Datos num\u00e9ricos"},{"location":"4_Variables/#cadenas-de-caracteres","text":"Las cadenas de caracteres son secuencias que contienen caracteres encerrados entre comillas, simples o dobles. Tambi\u00e9n podemos usar comillas triples, pero generalmente las comillas triples se usan para crear cadenas de documentos o cadenas de varias l\u00edneas. 1 2 cadena1 = 'bioquimica' cadena2 = \"cromosoma\" En Python, se puede acceder individualmente a los caracteres de la cadena, desde ambas direcciones: hacia adelante y hacia atr\u00e1s. Hacia adelante comienza desde 0, 1, 2... ; mientras que hacia atr\u00e1s comienza desde \u22121, \u22122... 1 2 3 4 5 6 cadena1 = 'bioquimica' >>> cadena1 [ 1 ] i >>> cadena1 [ - 2 ] c A continuaci\u00f3n se muestran algunas de las funciones disponibles para trabajar con cadenas: Funci\u00f3n len() . Funci\u00f3n que devuelve la longitud de la cadena. 1 2 3 4 cadena = 'espermatozoide' >>> len ( cadena ) 14 Mostrar parte de la cadena . A continuaci\u00f3n se muestra sintaxis para imprimir por pantalla parte de la cadena, ya sea el principio, final o una parte intermedia. 1 2 3 4 5 6 7 8 cadena = 'espermatozoide' >>> cadena [ 2 : 6 ] perma >>> cadena [: 6 ] esperma >>> cadena [ 6 :] atozoide Cadena inversa . No hay ninguna funci\u00f3n integrada para invertir una cadena en Python, pero la forma m\u00e1s f\u00e1cil es usar un segmento que comienza al final de la cadena y va hacia atr\u00e1s. 1 2 3 4 cadena = 'espermatozoide' [:: - 1 ] >>> cadena ediozotamrepse Concatenar cadenas . El operador + se usa para agregar una cadena a otra cadena. 1 2 3 4 5 6 cadena_1 = 'La hemoglobina ' cadena_2 = 'es una proteina' cadena_final = cadena_1 + cadena_2 >>> cadena_final La hemoglobina es una proteina Reemplazar elementos . El m\u00e9todo replace() reemplazar\u00e1 un elemento espec\u00edfico con otro. 1 2 3 4 5 cadena_1 = 'AAATTGGCCAA' cadena_final = cadena_1 . replace ( \"A\" , \"T\" ) >>> cadena_final TTTTTGGCCTT Otras funciones En el siguiente enlace puede encontrar m\u00e1s funciones disponibles para trabajar con cadenas . Es importante que se familiarice con estas, ya que ser\u00e1 importante a la hora de trabajar con secuencias de ADN, ya sea reemplazando, contando, o identificando nucl\u00e9otidos por ejemplo.","title":"Cadenas de caracteres"},{"location":"4_Variables/#booleanos","text":"Contiene \u00fanicamente dos elementos, True y False, que representan los valores l\u00f3gicos verdadero y falso respectivamente. Por este motivo tambi\u00e9n se denominan l\u00f3gicos . Todos los otros valores son interpretados por defecto a True. >>> False == False True >>> 0 == False True >>> None == False False","title":"Booleanos"},{"location":"4_Variables/#alcance-de-las-variables","text":"Las variables en Python son locales por defecto. Esto quiere decir que las variables definidas y utilizadas en el bloque de c\u00f3digo de una funci\u00f3n, solo tienen existencia dentro de la misma, y no interfieren con otras variables del resto del c\u00f3digo. En caso de que sea conveniente o necesario, una variable local puede convertirse en una variable global declar\u00e1ndola expl\u00edcitamente como tal con la sentencia global .","title":"Alcance de las variables"},{"location":"4_Variables/#operadores","text":"En Python, tenemos un conjunto de s\u00edmbolos especiales que realizan varios tipos de operaciones, como operaciones l\u00f3gicas, operaciones matem\u00e1ticas y m\u00e1s. Estos s\u00edmbolos se denominan operadores . Los valores sobre los que los operadores realizan sus respectivas operaciones se conocen como operandos .","title":"Operadores"},{"location":"4_Variables/#aritmeticos","text":"Los operadores aritm\u00e9ticos se utilizan para realizar varias operaciones matem\u00e1ticas simples como sumas, restas y multiplicaciones. OPERADOR NOMBRE FUNCI\u00d3N + Suma Este operador suma los valores de los datos num\u00e9ricos - Resta Este operador resta los valores de los datos num\u00e9ricos * Multiplicaci\u00f3n Este operador multiplica los valores de los datos num\u00e9ricos / Divisi\u00f3n Este operador divide los valores de los datos num\u00e9ricos. El resultado es un n\u00famero real ** Exponente Este operador calcula el exponente entre los valores de los datos num\u00e9ricos % M\u00f3dulo Este operador devuelve el resto de la divisi\u00f3n entre los dos operandos // Divisi\u00f3n entera Este operador devuelve la parte entera del cociente de la divisi\u00f3n entre dos operandos El orden de precedencia de ejecuci\u00f3n de los operadores aritm\u00e9ticos es: Exponente: ** Multiplicaci\u00f3n, Divisi\u00f3n, Divisi\u00f3n entera, M\u00f3dulo: *, /, //, % Suma, Resta: +, - EJEMPLOS >>> 5 * 6 30 >>> 8 / 3 2.66667 >>> 8 // 3 2 >>> 7 % 2 1","title":"Aritm\u00e9ticos"},{"location":"4_Variables/#relacionales","text":"Tambi\u00e9n se conocen como operadores de comparaci\u00f3n porque comparan los valores en ambos lados del operador. Despu\u00e9s de la comparaci\u00f3n, devuelve el valor booleano, es decir, verdadero o falso. OPERADOR NOMBRE FUNCI\u00d3N == Igual a Si los dos operandos comparados son iguales, devuelve verdadero != No igual a Si los dos operandos comparados no son iguales, devuelve verdadero < Menor que Si el valor del operando izquierdo es menor que el del operando derecho, devuelve verdadero > Mayor que Si el valor del operando izquierdo es mayor que el del operando derecho, devuelve verdadero <= Menor o igual que Si el valor del operando izquierdo es menor o igual que el del operando derecho, devuelve verdadero >= Mayor o igual que Si el valor del operando izquierdo es mayor o igual que el del operando derecho, devuelve verdadero EJEMPLOS >>> 7 == 9 False >>> 5 * 2 != 30 / 2 True >>> \"genoma\" == \"genoma\" True >>> 5 ** 2 <= 15 False","title":"Relacionales"},{"location":"4_Variables/#de-asignacion","text":"Los operadores de asignaci\u00f3n se utilizan para asignar valores a las variables de Python . La asignaci\u00f3n a veces se realiza directamente y, a veces, el operador primero realiza alg\u00fan tipo de operaci\u00f3n matem\u00e1tica y luego asigna el valor al operando. OPERADOR NOMBRE FUNCI\u00d3N = Asignaci\u00f3n Asigna a la variable del lado izquierdo cualquier variable o resultado del lado derecho += Sumar y asignar Realiza la suma y luego el resultado se asigna al operando de la izquierda -= Restar y asignar Realiza la resta y luego el resultado se asigna al operando de la izquierda *= Multiplicar y asignar Realiza la multiplicaci\u00f3n y luego el resultado se asigna al operando de la izquierda /= Dividir y asignar Realiza la divisi\u00f3n y luego el resultado se asigna al operando de la izquierda %= M\u00f3dulo y asignar Realiza el m\u00f3dulo y luego el resultado se asigna al operando de la izquierda **= Exponente y asignar Realiza exponente, y luego el resultado se asigna al operando de la izquierda //= Divisi\u00f3n entera y asignar Realiza la divisi\u00f3n de piso y luego el resultado se asigna al operando de la izquierda EJEMPLOS 1 2 3 4 5 6 7 8 9 x = 5 x += 10 >>> x 15 y = 5 y *= 20 >>> y 100","title":"De Asignaci\u00f3n"},{"location":"4_Variables/#logicos","text":"Los operadores l\u00f3gicos se utilizan principalmente para declaraciones condicionales. Hay tres tipos de operadores l\u00f3gicos: AND, OR y NOT. OPERADOR NOMBRE FUNCI\u00d3N AND Logical AND Devuelve TRUE cuando ambas expresiones son verdaderas, de lo contrario FALSE OR Logical OR Devuelve TRUE si al menos una condici\u00f3n es verdadera, de lo contrario FALSE NOT Logical NOT Devuelve TRUE cuando la expresi\u00f3n no es verdadera EJEMPLOS >>> ( 2 < 1 ) and ( 2 < 3 ) False >>> ( 2 < 1 ) or ( 2 < 3 ) True >>> not ( 5 > 4 ) False >>> not ( 5 != 5 * 1 ) True","title":"L\u00f3gicos"},{"location":"4_Variables/#ejercicios","text":"EJERCICIO 1 . Escribir un programa que almacene la cadena \u00a1Hola Mundo! en una variable y luego muestre por pantalla el contenido de la variable. Respuesta 1 2 mensaje = \"\u00a1Hola Mundo!\" print ( mensaje ) EJERCICIO 2 . Escribir un programa que pida al usuario su peso (en kg) y estatura (en metros), calcule el \u00edndice de masa corporal y lo almacene en una variable. Respuesta 1 2 3 4 5 peso = input ( \"\u00bfCu\u00e1l es tu peso en kg? \" ) estatura = input ( \"\u00bfCu\u00e1l es tu estatura en metros?\" ) imc = round ( float ( peso ) / float ( estatura ) ** 2 , 2 ) print ( \"Tu \u00edndice de masa corporal es \" + str ( imc )) # En este caso el \u00edndice de masa corporal se ha redondeado con dos decimales. EJERCICIO 3 . Escribir un programa que pida al usuario que introduzca una frase en la consola y muestre por pantalla la frase invertida. Respuesta 1 2 frase = input ( \"Introduce una frase: \" ) print ( frase [:: - 1 ]) EJERCICIO 4 . Escribir un programa que transforme grados Kelvin en grados Celcius. Respuesta 1 2 3 grados_kelvin = input ( \"Indique los grados en unidades Kelvin:\" ) grados_celcius = ( grados_kelvin - 273.15 ) print ( f \"El valor en unidades Celcius es { grados_celcius } \" ) EJERCICIO 5 . Escribir un programa que pregunte por consola el precio de un producto en euros con dos decimales y muestre por pantalla el n\u00famero de euros y el n\u00famero de c\u00e9ntimos del precio introducido. Respuesta 1 2 precio = input ( \"Introduce el precio del producto con dos decimales: \" ) print ( precio [: precio . find ( '.' )], 'euros y' , precio [ precio . find ( '.' ) + 1 :], 'c\u00e9ntimos.' ) EJERCICIO 6 . Escribir un programa que pregunte el nombre del usuario en la consola y despu\u00e9s de que el usuario lo introduzca, muestre por pantalla el n\u00famero de letras que tiene el nombre en may\u00fasculas. Respuesta 1 2 nombre = input ( \"\u00bfC\u00f3mo te llamas? \" ) print ( nombre . upper () + \" tiene \" + str ( len ( nombre )) + \" letras\" ) Enlaces de inter\u00e9s Informaci\u00f3n acerca de cadenas de caracteres. How to use Strings in Python Operadores","title":"Ejercicios"},{"location":"5_EstructurasDatos/","text":"Una estructura de datos es una colecci\u00f3n de datos (normalmente de tipo simple) que se caracterizan por su organizaci\u00f3n y las operaciones que se definen en ellos. Por tanto, una estructura de datos vendr\u00e1 caracterizada tanto por unas ciertas relaciones entre los datos, como las operaciones posibles en ella. Listas Una lista es una colecci\u00f3n de elementos en un orden particular, y son el tipo de objeto colecci\u00f3n ordenada m\u00e1s flexible en Python, pudiendo albergar objetos de cualquier tipo de datos, como n\u00fameros, cadenas u otras listas anidadas. En Python, los corchetes ([ ]) indican una lista, y dentro, los elementos individuales se separan por comas. A continuaci\u00f3n tiene unos ejemplos de posibles listas. 1 2 3 4 5 numeros = [ 0 , 1 , 2 , 3 , 4 , 5 ] diccionario = [ 'mutaci\u00f3n' , 'nucle\u00f3tido' ] lista = [ 0 , 1 , 2 , 'mutaci\u00f3n' ] lugar_fecha = [ [ 'C\u00f3rdoba' , 2022 ], [ 'Madrid' , 2021 ] ] # El \u00faltimo es un ejemplo de lista que contiene otras listas Si pedimos a Python que imprima por pantalla esta lista, nos devolver\u00e1 lo siguiente. >>> numeros [ 0 , 1 , 2 , 3 , 4 , 5 ] Elementos de una lista Tenga en cuenta que al definir una lista se puede hacer referencia a otras variables. Esto ser\u00e1 realmente \u00fatil. 1 2 3 4 5 6 cadena_ADN = 'ATAGCGCGCATT' num_cromosoma = 14 lista = [ cadena_ADN , num_cromosoma ] >>> lista [ 'ATAGCGCGCATT' , 14 ] Acceder a los elementos Podemos acceder a cualquiera de los elementos de una lista indicando a Python la posici\u00f3n del elemento deseado. Para ello, escriba el nombre de la lista seguido del \u00edndice del elemento entre corchetes. 1 2 3 4 5 6 7 lista = [ 'A' , 'T' , 'G' , 'C' ] >>> lista [ 0 ] A >>> lista [ - 1 ] C # El orden de los elementos es 0,1,2,3...-3,-2,-1. Cambiar, a\u00f1adir y eliminar elementos Para sustituir un elemento en la lista, use el nombre de la lista seguido del \u00edndice del elemento que desea modificar y del nuevo valor que desea. 1 2 3 4 5 6 7 8 celula = [ 'membrana' , 'nucleo' , 'pared' , 'citosol' ] >>> celula [ 2 ] pared celula [ 2 ] = 'organulos' >>> celula [ 2 ] organulos En lugar de sustituir un elemento, puede interesarle a\u00f1adir uno nuevo. La forma m\u00e1s sencilla de hacerlo es utilizando el m\u00e9todo append () . 1 2 3 4 5 celula = [ 'membrana' , 'nucleo' , 'pared' , 'citosol' ] celula . append ( 'organulos' ) >>> celula [ 'membrana' , 'nucleo' , 'pared' , 'citosol' , 'organulos' ] Como se observa, el elemento organulos se a\u00f1ade al final de la lista. Podemos a\u00f1adir un elemento en cualquier posici\u00f3n con el m\u00e9todo insert () . Para esto, habr\u00e1 que especificar el \u00edndice del nuevo elemento y su valor. 1 2 3 4 5 celula = [ 'membrana' , 'nucleo' , 'pared' , 'citosol' ] celula . insert ( 0 , 'organulos' ) >>> celula [ 'organulos' , 'membrana' , 'nucleo' , 'pared' , 'citosol' ] Si en lugar de a\u00f1adir elementos, desea eliminarlos, hay distintas formas para hacerlo. Sentencia del . Esta se utiliza para eliminar un elemento en particular, del que conocemos la posici\u00f3n. 1 2 3 4 5 celula = [ 'membrana' , 'nucleo' , 'pared' , 'citosol' ] del celula [ 2 ] >>> celula [ 'membrana' , 'nucleo' , 'citosol' ] M\u00e9todo remove . Este se utilizar\u00e1 si desconocemos la posici\u00f3n del elemento que deseamos eliminar, solo conocemos su valor. 1 2 3 4 5 celula = [ 'membrana' , 'nucleo' , 'pared' , 'citosol' ] celula . remove ( \"pared\" ) >>> celula [ 'membrana' , 'nucleo' , 'citosol' ] M\u00e9todo remove Tenga en cuenta que este m\u00e9todo solo eliminar\u00e1 la primera aparici\u00f3n del valor. Si este est\u00e1 repetido en la lista, habr\u00e1 que utilizar un bucle. Se ver\u00e1 como realizarlo en el siguiente apartado. M\u00e9todo pop () . Elimina el elemento de una lista, pero permite trabajar con \u00e9l despu\u00e9s de quitarlo. 1 2 3 4 5 6 7 celula = [ 'membrana' , 'nucleo' , 'pared' , 'citosol' ] celula_pop = celula . pop ( 2 ) >>> celula [ 'membrana' , 'nucleo' , 'citosol' ] >>> celula_pop nucleo Otras funciones Count () . Este m\u00e9todo recibe un elemento como argumento, y cuenta la cantidad de veces que aparece en la lista. 1 2 3 celula = [ 'membrana' , 'nucleo' , 'membrana' , 'membrana' , 'pared' , 'citosol' ] celula . count ( \"membrana\" ) 3 Sort () . Este m\u00e9todo ordena la lista alfab\u00e9ticamente. 1 2 3 4 5 celula = [ 'membrana' , 'nucleo' , 'pared' , 'citosol' ] celula_sort () >>> celula [ 'citosol' , 'membrana' , 'nucleo' , 'pared' ] Reverse () . Este m\u00e9todo invierte el orden original de la lista. 1 2 3 4 5 celula = [ 'membrana' , 'nucleo' , 'pared' , 'citosol' ] celula_reverse () >>> celula [ 'citosol' , 'pared' , 'nucleo' , 'membrana' ] M\u00e9todo reverse () Observe que este m\u00e9todo no genera un orden alfab\u00e9tico inverso, simplemente invierte el orden de la lista. Para realizarlo, tendr\u00eda que utilizar previamente sort (). Len () . Este m\u00e9todo devuelve la longitud de la lista, es decir, el n\u00famero de elementos que la componen. 1 2 3 celula = [ 'membrana' , 'nucleo' , 'pared' , 'citosol' ] >>> len ( celula ) 4 min () / max () . Este m\u00e9todo devuelve el valor m\u00ednimo o m\u00e1ximo de una lista. 1 2 3 edad = [ 40 , 33 , 25 , 86 , 67 ] >>> min ( edad ) 25 Tuplas Las tuplas en Python son una colecci\u00f3n de varios elementos inmutables separados por comas, del mismo o diferente tipo. \u00bfEn qu\u00e9 se diferencia de las listas? Aparte de la sintaxis, ya que en las listas se utilizan corchetes y en las tuplas par\u00e9ntesis , la principal diferencia entre ambos es que los elementos de una tupla no se pueden cambiar una vez asignados; mientras que los elementos de una lista se pueden cambiar. Por tanto, siempre que necesitemos asegurarnos de que los datos permanezcan sin cambios y protegidos contra escritura, la tupla es la mejor opci\u00f3n. En Python, los par\u00e9ntesis () indican una tupla, y dentro, los elementos individuales se separan por comas. A continuaci\u00f3n tiene unos ejemplos de posibles tuplas. 1 2 3 numeros = ( 0 , 1 , 2 , 3 , 4 , 5 ) diccionario = ( 'mutaci\u00f3n' , 'nucle\u00f3tido' ) tupla = ( 0 , 1 , 2 , 'mutaci\u00f3n' ) En realidad no es necesario escribir los par\u00e9ntesis para indicar que se trata de una tupla, basta con escribir las comas, pero se recomienda escribirlas con par\u00e9ntesis. Adem\u00e1s Python siempre devuelve por salida la tupla con par\u00e9ntesis. 1 2 3 4 tupla = 75 , 'nucle\u00f3tido' , 500 >>> tupla ( 75 , 'nucle\u00f3tido' , 500 ) Trabajar con tuplas La mayor\u00eda de funciones disponibles para trabajar con las listas son v\u00e1lidas para trabajar con tuplas. Puede practicar alguno de los ejemplos del apartado anterior con este tipo de estructura. Conjuntos/Set Los conjuntos o set son una estructura de datos utilizada para almacenar elementos de distinto tipo. Estos tienen las siguientes caracter\u00edsticas: Los elementos no tienen un orden espec\u00edfico. Sus elementos deben ser \u00fanicos, por lo que no puede haber elementos duplicados. Los elementos son inmutables. Al igual que en las tuplas, no admiten cambios. \u00bfPor qu\u00e9 utilizar este tipo de estructura? A diferencia de las listas, los conjuntos contienen funciones altamente optimizadas con el \u00fanico prop\u00f3sito de verificar elementos comunes, diferencias entre conjuntos, etc. En Python, las llaves ({ }) indican un conjunto, y dentro, los elementos individuales se separan por comas. A continuaci\u00f3n tiene unos ejemplos de posibles conjuntos. 1 2 3 numeros = { 0 , 1 , 2 , 3 , 4 , 5 } diccionario = { 'mutaci\u00f3n' , 'nucle\u00f3tido' } conjunto = { 0 , 1 , 2 , 'mutaci\u00f3n' } Al igual que antes, una vez que se crea un conjunto solo podemos a\u00f1adir y eliminar elementos. A\u00f1adir y eliminar elementos Para agregar elementos, tenemos 2 m\u00e9todos: add () y update () . 1 2 3 4 5 celula_conjunto = { 'membrana' , 'nucleo' , 'pared' , 'citosol' } celula_conjunto . add ( 'organulos' ) >>> celula_conjunto { 'citosol' , 'membrana' , 'organulos' , 'nucleo' , 'pared' } 1 2 3 4 5 celula_conjunto = { 'membrana' , 'nucleo' , 'pared' , 'citosol' } celula_conjunto . update ( 'organulos' ) >>> celula_conjunto { 'pared' , 'organulos' , 'membrana' , 'citosol' , 'nucleo' } Para eliminar elementos, tenemos 2 m\u00e9todos: remove () y discard () . 1 2 3 4 5 celula_conjunto = { 'membrana' , 'nucleo' , 'pared' , 'citosol' } celula_conjunto . remove ( 'nucleo' ) >>> celula_conjunto { 'citosol' , 'membrana' , 'pared' } 1 2 3 4 5 celula_conjunto = { 'membrana' , 'nucleo' , 'pared' , 'citosol' } celula_conjunto . discard ( 'nucleo' ) >>> celula_conjunto { 'pared' , 'membrana' , 'citosol' } Elementos de un conjunto Observe c\u00f3mo los elementos no tienen un orden espec\u00edfico dentro del conjunto. Trabajar con conjuntos A continuaci\u00f3n se muestran algunas de las funciones m\u00e1s \u00fatiles para trabajar con los conjuntos. FUNCI\u00d3N DESCRIPCI\u00d3N clear() Elimina todos los elementos de un conjunto copy() Devuelve una copia de un conjunto difference() Devuelve un conjunto que contiene la diferencia entre dos o m\u00e1s conjuntos: los elementos que est\u00e1n en el primero pero no en los dem\u00e1s union() Devuelve un conjunto con todos los elementos que est\u00e1n en alguno de los conjuntos intersection() Devuelve la intersecci\u00f3n entre los conjuntos: todos los elementos que est\u00e1n en ambos Veamos un ejemplo del uso de estas funciones. 1 2 3 4 conjunto_1 = { 3 , 4 , 5 , 6 , 7 , 8 } conjunto_2 = { 6 , 7 , 8 , 9 , 10 } >>> conjunto_1 . intersection ( conjunto_2 ) { 6 , 8 , 7 } Ejercicios EJERCICIO 1 . Escribir un programa que almacene en una lista los 5 tipos principales de bases nitrogenadas, y muestre por pantalla la \u00faltima. Respuesta 1 2 bases = [ \"A\" , \"G\" , \"C\" , \"T\" , \"U\" ] print ( bases [ - 1 ]) EJERCICIO 2 . Escribir un programa que almacene en una lista una secuencia nucleot\u00eddica n = 10. Muestre por pantalla cu\u00e1ntas \"A\" aparecen. Respuesta 1 2 secuencia = [ 'A' , 'C' , 'A' , 'C' , 'T' , 'G' , 'G' , 'G' , 'A' , 'A' ] print ( secuencia . count ( 'A' )) EJERCICIO 3 . Escribir un programa que almacene en dos conjuntos secuencias aminoac\u00eddicas. Muestre por pantallas los amino\u00e1cidos en com\u00fan. Respuesta 1 2 3 proteina_1 = { 'Trp' , 'Ala' , 'Val' , 'Ser' , 'Trp' , 'Gly' } proteina_2 = { 'His' , 'Gly' , 'Cys' , 'Met' , 'Ile' , 'Glu' } print ( proteina_1 . intersection ( prote\u00edna_2 )) EJERCICIO 4 . Bas\u00e1ndose en el c\u00f3digo anterior, esta vez cree un nuevo conjunto con todos los amino\u00e1cidos que est\u00e1n en al menos uno de los conjuntos. Respuesta 1 2 3 4 proteina_1 = { 'Trp' , 'Ala' , 'Val' , 'Ser' , 'Trp' , 'Gly' } proteina_2 = { 'His' , 'Gly' , 'Cys' , 'Met' , 'Ile' , 'Glu' } aa_comunes = ( proteina_1 . union ( proteina_2 )) print ( aa_comunes ) Puede seguir practicando ejercicios m\u00e1s avanzados de listas en el apartado Estructuras de control . DICCIONARIOS Debe conocer que existe un \u00faltimo tipo de estructura de datos conocido como diccionario . Un diccionario es una colecci\u00f3n de claves - valores en lugar de solo elementos. Cada clave est\u00e1 conectada a un valor, y podemos utilizar esa clave para acceder al valor asociada a la misma. En Python, en la sintaxis de los diccionarios se utilizan las llaves ( { } ), presentando la siguiente estructura: 1 2 3 4 mutaciones = { 'nucleotido' : 41 , 'aminoacido' : 'trp' } >>> mutaciones [ 'aminoacido' ] trp Como bioqu\u00edmico principiante en Python, trabajar\u00e1 con las estructuras de datos desglosadas anteriormente, principalmente con las listas. Aun as\u00ed, si quiere puede obtener m\u00e1s informaci\u00f3n sobre los diccionarios en el siguiente enlace . Enlaces de inter\u00e9s Ampliaci\u00f3n de las estructuras de datos. Python Tutorial for Beginners 4: Lists, Tuples, and Sets","title":"Estructuras de datos"},{"location":"5_EstructurasDatos/#listas","text":"Una lista es una colecci\u00f3n de elementos en un orden particular, y son el tipo de objeto colecci\u00f3n ordenada m\u00e1s flexible en Python, pudiendo albergar objetos de cualquier tipo de datos, como n\u00fameros, cadenas u otras listas anidadas. En Python, los corchetes ([ ]) indican una lista, y dentro, los elementos individuales se separan por comas. A continuaci\u00f3n tiene unos ejemplos de posibles listas. 1 2 3 4 5 numeros = [ 0 , 1 , 2 , 3 , 4 , 5 ] diccionario = [ 'mutaci\u00f3n' , 'nucle\u00f3tido' ] lista = [ 0 , 1 , 2 , 'mutaci\u00f3n' ] lugar_fecha = [ [ 'C\u00f3rdoba' , 2022 ], [ 'Madrid' , 2021 ] ] # El \u00faltimo es un ejemplo de lista que contiene otras listas Si pedimos a Python que imprima por pantalla esta lista, nos devolver\u00e1 lo siguiente. >>> numeros [ 0 , 1 , 2 , 3 , 4 , 5 ] Elementos de una lista Tenga en cuenta que al definir una lista se puede hacer referencia a otras variables. Esto ser\u00e1 realmente \u00fatil. 1 2 3 4 5 6 cadena_ADN = 'ATAGCGCGCATT' num_cromosoma = 14 lista = [ cadena_ADN , num_cromosoma ] >>> lista [ 'ATAGCGCGCATT' , 14 ]","title":"Listas"},{"location":"5_EstructurasDatos/#acceder-a-los-elementos","text":"Podemos acceder a cualquiera de los elementos de una lista indicando a Python la posici\u00f3n del elemento deseado. Para ello, escriba el nombre de la lista seguido del \u00edndice del elemento entre corchetes. 1 2 3 4 5 6 7 lista = [ 'A' , 'T' , 'G' , 'C' ] >>> lista [ 0 ] A >>> lista [ - 1 ] C # El orden de los elementos es 0,1,2,3...-3,-2,-1.","title":"Acceder a los elementos"},{"location":"5_EstructurasDatos/#cambiar-anadir-y-eliminar-elementos","text":"Para sustituir un elemento en la lista, use el nombre de la lista seguido del \u00edndice del elemento que desea modificar y del nuevo valor que desea. 1 2 3 4 5 6 7 8 celula = [ 'membrana' , 'nucleo' , 'pared' , 'citosol' ] >>> celula [ 2 ] pared celula [ 2 ] = 'organulos' >>> celula [ 2 ] organulos En lugar de sustituir un elemento, puede interesarle a\u00f1adir uno nuevo. La forma m\u00e1s sencilla de hacerlo es utilizando el m\u00e9todo append () . 1 2 3 4 5 celula = [ 'membrana' , 'nucleo' , 'pared' , 'citosol' ] celula . append ( 'organulos' ) >>> celula [ 'membrana' , 'nucleo' , 'pared' , 'citosol' , 'organulos' ] Como se observa, el elemento organulos se a\u00f1ade al final de la lista. Podemos a\u00f1adir un elemento en cualquier posici\u00f3n con el m\u00e9todo insert () . Para esto, habr\u00e1 que especificar el \u00edndice del nuevo elemento y su valor. 1 2 3 4 5 celula = [ 'membrana' , 'nucleo' , 'pared' , 'citosol' ] celula . insert ( 0 , 'organulos' ) >>> celula [ 'organulos' , 'membrana' , 'nucleo' , 'pared' , 'citosol' ] Si en lugar de a\u00f1adir elementos, desea eliminarlos, hay distintas formas para hacerlo. Sentencia del . Esta se utiliza para eliminar un elemento en particular, del que conocemos la posici\u00f3n. 1 2 3 4 5 celula = [ 'membrana' , 'nucleo' , 'pared' , 'citosol' ] del celula [ 2 ] >>> celula [ 'membrana' , 'nucleo' , 'citosol' ] M\u00e9todo remove . Este se utilizar\u00e1 si desconocemos la posici\u00f3n del elemento que deseamos eliminar, solo conocemos su valor. 1 2 3 4 5 celula = [ 'membrana' , 'nucleo' , 'pared' , 'citosol' ] celula . remove ( \"pared\" ) >>> celula [ 'membrana' , 'nucleo' , 'citosol' ] M\u00e9todo remove Tenga en cuenta que este m\u00e9todo solo eliminar\u00e1 la primera aparici\u00f3n del valor. Si este est\u00e1 repetido en la lista, habr\u00e1 que utilizar un bucle. Se ver\u00e1 como realizarlo en el siguiente apartado. M\u00e9todo pop () . Elimina el elemento de una lista, pero permite trabajar con \u00e9l despu\u00e9s de quitarlo. 1 2 3 4 5 6 7 celula = [ 'membrana' , 'nucleo' , 'pared' , 'citosol' ] celula_pop = celula . pop ( 2 ) >>> celula [ 'membrana' , 'nucleo' , 'citosol' ] >>> celula_pop nucleo","title":"Cambiar, a\u00f1adir y eliminar elementos"},{"location":"5_EstructurasDatos/#otras-funciones","text":"Count () . Este m\u00e9todo recibe un elemento como argumento, y cuenta la cantidad de veces que aparece en la lista. 1 2 3 celula = [ 'membrana' , 'nucleo' , 'membrana' , 'membrana' , 'pared' , 'citosol' ] celula . count ( \"membrana\" ) 3 Sort () . Este m\u00e9todo ordena la lista alfab\u00e9ticamente. 1 2 3 4 5 celula = [ 'membrana' , 'nucleo' , 'pared' , 'citosol' ] celula_sort () >>> celula [ 'citosol' , 'membrana' , 'nucleo' , 'pared' ] Reverse () . Este m\u00e9todo invierte el orden original de la lista. 1 2 3 4 5 celula = [ 'membrana' , 'nucleo' , 'pared' , 'citosol' ] celula_reverse () >>> celula [ 'citosol' , 'pared' , 'nucleo' , 'membrana' ] M\u00e9todo reverse () Observe que este m\u00e9todo no genera un orden alfab\u00e9tico inverso, simplemente invierte el orden de la lista. Para realizarlo, tendr\u00eda que utilizar previamente sort (). Len () . Este m\u00e9todo devuelve la longitud de la lista, es decir, el n\u00famero de elementos que la componen. 1 2 3 celula = [ 'membrana' , 'nucleo' , 'pared' , 'citosol' ] >>> len ( celula ) 4 min () / max () . Este m\u00e9todo devuelve el valor m\u00ednimo o m\u00e1ximo de una lista. 1 2 3 edad = [ 40 , 33 , 25 , 86 , 67 ] >>> min ( edad ) 25","title":"Otras funciones"},{"location":"5_EstructurasDatos/#tuplas","text":"Las tuplas en Python son una colecci\u00f3n de varios elementos inmutables separados por comas, del mismo o diferente tipo. \u00bfEn qu\u00e9 se diferencia de las listas? Aparte de la sintaxis, ya que en las listas se utilizan corchetes y en las tuplas par\u00e9ntesis , la principal diferencia entre ambos es que los elementos de una tupla no se pueden cambiar una vez asignados; mientras que los elementos de una lista se pueden cambiar. Por tanto, siempre que necesitemos asegurarnos de que los datos permanezcan sin cambios y protegidos contra escritura, la tupla es la mejor opci\u00f3n. En Python, los par\u00e9ntesis () indican una tupla, y dentro, los elementos individuales se separan por comas. A continuaci\u00f3n tiene unos ejemplos de posibles tuplas. 1 2 3 numeros = ( 0 , 1 , 2 , 3 , 4 , 5 ) diccionario = ( 'mutaci\u00f3n' , 'nucle\u00f3tido' ) tupla = ( 0 , 1 , 2 , 'mutaci\u00f3n' ) En realidad no es necesario escribir los par\u00e9ntesis para indicar que se trata de una tupla, basta con escribir las comas, pero se recomienda escribirlas con par\u00e9ntesis. Adem\u00e1s Python siempre devuelve por salida la tupla con par\u00e9ntesis. 1 2 3 4 tupla = 75 , 'nucle\u00f3tido' , 500 >>> tupla ( 75 , 'nucle\u00f3tido' , 500 ) Trabajar con tuplas La mayor\u00eda de funciones disponibles para trabajar con las listas son v\u00e1lidas para trabajar con tuplas. Puede practicar alguno de los ejemplos del apartado anterior con este tipo de estructura.","title":"Tuplas"},{"location":"5_EstructurasDatos/#conjuntosset","text":"Los conjuntos o set son una estructura de datos utilizada para almacenar elementos de distinto tipo. Estos tienen las siguientes caracter\u00edsticas: Los elementos no tienen un orden espec\u00edfico. Sus elementos deben ser \u00fanicos, por lo que no puede haber elementos duplicados. Los elementos son inmutables. Al igual que en las tuplas, no admiten cambios. \u00bfPor qu\u00e9 utilizar este tipo de estructura? A diferencia de las listas, los conjuntos contienen funciones altamente optimizadas con el \u00fanico prop\u00f3sito de verificar elementos comunes, diferencias entre conjuntos, etc. En Python, las llaves ({ }) indican un conjunto, y dentro, los elementos individuales se separan por comas. A continuaci\u00f3n tiene unos ejemplos de posibles conjuntos. 1 2 3 numeros = { 0 , 1 , 2 , 3 , 4 , 5 } diccionario = { 'mutaci\u00f3n' , 'nucle\u00f3tido' } conjunto = { 0 , 1 , 2 , 'mutaci\u00f3n' } Al igual que antes, una vez que se crea un conjunto solo podemos a\u00f1adir y eliminar elementos.","title":"Conjuntos/Set"},{"location":"5_EstructurasDatos/#anadir-y-eliminar-elementos","text":"Para agregar elementos, tenemos 2 m\u00e9todos: add () y update () . 1 2 3 4 5 celula_conjunto = { 'membrana' , 'nucleo' , 'pared' , 'citosol' } celula_conjunto . add ( 'organulos' ) >>> celula_conjunto { 'citosol' , 'membrana' , 'organulos' , 'nucleo' , 'pared' } 1 2 3 4 5 celula_conjunto = { 'membrana' , 'nucleo' , 'pared' , 'citosol' } celula_conjunto . update ( 'organulos' ) >>> celula_conjunto { 'pared' , 'organulos' , 'membrana' , 'citosol' , 'nucleo' } Para eliminar elementos, tenemos 2 m\u00e9todos: remove () y discard () . 1 2 3 4 5 celula_conjunto = { 'membrana' , 'nucleo' , 'pared' , 'citosol' } celula_conjunto . remove ( 'nucleo' ) >>> celula_conjunto { 'citosol' , 'membrana' , 'pared' } 1 2 3 4 5 celula_conjunto = { 'membrana' , 'nucleo' , 'pared' , 'citosol' } celula_conjunto . discard ( 'nucleo' ) >>> celula_conjunto { 'pared' , 'membrana' , 'citosol' } Elementos de un conjunto Observe c\u00f3mo los elementos no tienen un orden espec\u00edfico dentro del conjunto.","title":"A\u00f1adir y eliminar elementos"},{"location":"5_EstructurasDatos/#trabajar-con-conjuntos","text":"A continuaci\u00f3n se muestran algunas de las funciones m\u00e1s \u00fatiles para trabajar con los conjuntos. FUNCI\u00d3N DESCRIPCI\u00d3N clear() Elimina todos los elementos de un conjunto copy() Devuelve una copia de un conjunto difference() Devuelve un conjunto que contiene la diferencia entre dos o m\u00e1s conjuntos: los elementos que est\u00e1n en el primero pero no en los dem\u00e1s union() Devuelve un conjunto con todos los elementos que est\u00e1n en alguno de los conjuntos intersection() Devuelve la intersecci\u00f3n entre los conjuntos: todos los elementos que est\u00e1n en ambos Veamos un ejemplo del uso de estas funciones. 1 2 3 4 conjunto_1 = { 3 , 4 , 5 , 6 , 7 , 8 } conjunto_2 = { 6 , 7 , 8 , 9 , 10 } >>> conjunto_1 . intersection ( conjunto_2 ) { 6 , 8 , 7 }","title":"Trabajar con conjuntos"},{"location":"5_EstructurasDatos/#ejercicios","text":"EJERCICIO 1 . Escribir un programa que almacene en una lista los 5 tipos principales de bases nitrogenadas, y muestre por pantalla la \u00faltima. Respuesta 1 2 bases = [ \"A\" , \"G\" , \"C\" , \"T\" , \"U\" ] print ( bases [ - 1 ]) EJERCICIO 2 . Escribir un programa que almacene en una lista una secuencia nucleot\u00eddica n = 10. Muestre por pantalla cu\u00e1ntas \"A\" aparecen. Respuesta 1 2 secuencia = [ 'A' , 'C' , 'A' , 'C' , 'T' , 'G' , 'G' , 'G' , 'A' , 'A' ] print ( secuencia . count ( 'A' )) EJERCICIO 3 . Escribir un programa que almacene en dos conjuntos secuencias aminoac\u00eddicas. Muestre por pantallas los amino\u00e1cidos en com\u00fan. Respuesta 1 2 3 proteina_1 = { 'Trp' , 'Ala' , 'Val' , 'Ser' , 'Trp' , 'Gly' } proteina_2 = { 'His' , 'Gly' , 'Cys' , 'Met' , 'Ile' , 'Glu' } print ( proteina_1 . intersection ( prote\u00edna_2 )) EJERCICIO 4 . Bas\u00e1ndose en el c\u00f3digo anterior, esta vez cree un nuevo conjunto con todos los amino\u00e1cidos que est\u00e1n en al menos uno de los conjuntos. Respuesta 1 2 3 4 proteina_1 = { 'Trp' , 'Ala' , 'Val' , 'Ser' , 'Trp' , 'Gly' } proteina_2 = { 'His' , 'Gly' , 'Cys' , 'Met' , 'Ile' , 'Glu' } aa_comunes = ( proteina_1 . union ( proteina_2 )) print ( aa_comunes ) Puede seguir practicando ejercicios m\u00e1s avanzados de listas en el apartado Estructuras de control . DICCIONARIOS Debe conocer que existe un \u00faltimo tipo de estructura de datos conocido como diccionario . Un diccionario es una colecci\u00f3n de claves - valores en lugar de solo elementos. Cada clave est\u00e1 conectada a un valor, y podemos utilizar esa clave para acceder al valor asociada a la misma. En Python, en la sintaxis de los diccionarios se utilizan las llaves ( { } ), presentando la siguiente estructura: 1 2 3 4 mutaciones = { 'nucleotido' : 41 , 'aminoacido' : 'trp' } >>> mutaciones [ 'aminoacido' ] trp Como bioqu\u00edmico principiante en Python, trabajar\u00e1 con las estructuras de datos desglosadas anteriormente, principalmente con las listas. Aun as\u00ed, si quiere puede obtener m\u00e1s informaci\u00f3n sobre los diccionarios en el siguiente enlace . Enlaces de inter\u00e9s Ampliaci\u00f3n de las estructuras de datos. Python Tutorial for Beginners 4: Lists, Tuples, and Sets","title":"Ejercicios"},{"location":"6_EstructurasControl/","text":"Las estructuras de control son aquellas que permiten modificar el flujo normal de ejecuci\u00f3n de instrucciones de un programa, dependiendo del resultado de unas condiciones. Estas estructuras nos permiten realizar acciones t\u00edpicas en nuestros scripts, como pueden ser bucles o la toma de decisiones. L\u00f3gica de Programaci\u00f3n. Universidad Polit\u00e9cnica de Puebla (UPP). Bucles FOR Un bucle es una estructura de control que repite un bloque de instrucciones, denominado cuerpo , siendo cada repetici\u00f3n conocida como iteraci\u00f3n . En el caso del bucle for , se repite el bloque de instrucciones un n\u00famero determinado de veces. Los bucles nos permiten realizar las mismas acciones con los elementos de una lista, como puede ser realizar una misma operaci\u00f3n matem\u00e1tica con cada elemento. Sintaxis Si tiene una lista con diferentes elementos, como distintos tipos de prote\u00ednas, y quiere imprimir por pantalla todos los nombres, puede hacerlo de forma individual como ya se ense\u00f1\u00f3 anteriormente. Esto nos conduce a los siguientes problemas: C\u00f3digo muy repetitivo. Trabajo lento y poco eficiente. Cada vez que se altere la longitud de la lista, cambiar el c\u00f3digo. Por este motivo, lo recomendable es utilizar la siguiente estructura. 1 2 3 proteinas = [ 'hemoglobina' , 'caseina' , 'lacasa' , 'albumina' ] for proteina in proteinas : print ( proteina ) En este caso, se ha definido la lista proteinas , y el bucle le indica a Python que cada elemento de esta lista se asocie con la variable proteina . Posteriormente, se indica que imprima cada elemento que se ha ido asignando a la variable proteina . La salida ser\u00e1 la siguiente: hemoglobina caseina lacasa albumina Por tanto, Python va imprimiendo el valor actual de la variable proteina , que va cambiando al repetir el bucle. Cuando ya no hay m\u00e1s elementos en la lista, finaliza el programa. Nomenclatura de la variable Tenga en cuenta que puede elegir el nombre que quiera para la variable temporal. Se ha elegido en este caso proteina porque conviene utilizar nombres significativos, que representen los elementos de la lista. Es muy importante tener cuidado con las l\u00edneas sangradas. A veces, el bucle se puede ejecutar sin problemas pero que no produzca el resultado esperado. Veamos algunos ejemplos de esto: 1 2 3 4 proteinas = [ 'hemoglobina' , 'caseina' , 'lacasa' , 'albumina' ] for proteina in proteinas : print ( f \"La { proteina } es una prote\u00edna.\" ) print ( proteina ) Este c\u00f3digo imprime por pantalla el siguiente texto. Observe c\u00f3mo en la \u00faltima l\u00ednea de c\u00f3digo, \u00fanicamente se muestra el \u00faltimo elemento asociado a la variable proteina . La hemoglobina es una prote\u00edna . La caseina es una prote\u00edna . La lacasa es una prote\u00edna . La albumina es una prote\u00edna . albumina Trabajar con bucles for Funci\u00f3n range () La funci\u00f3n range () se utiliza principalmente para generar y trabajar con una serie de n\u00fameros. Veamos un ejemplo simple: 1 2 3 4 5 for numero in range ( 1 , 4 ): #Imprime hasta el n\u00famero n-1 print ( numero ) for valor in range ( 4 ): print ( valor ) Esto dar\u00eda lugar a la siguiente salida por pantalla: 1 2 3 0 1 2 3 Funci\u00f3n list () Los resultados generados por la funci\u00f3n range () pueden convertirse directamente en una lista. Para esto se utiliza la funci\u00f3n list (). 1 2 3 4 lista = list ( range ( 2 , 19 , 2 )) >>> lista [ 2 , 4 , 6 , 8 , 10 , 12 , 14 , 16 , 18 ] Observe que en este caso el rango determinado es (2,19,2) . Los dos primeros argumentos indican el rango de valor de los elementos (entre 2 y 19), y el tercero indica el tama\u00f1o de salto entre los valores (de 2 en 2). Ejemplo Tabla de multiplicar del 5 1 2 3 for numero in range ( 11 ): multiplicacion = 5 * numero print ( f \"5 * { numero } = { multiplicacion } \" ) 5 * 0 = 0 5 * 1 = 5 5 * 2 = 10 5 * 3 = 15 5 * 4 = 20 5 * 5 = 25 5 * 6 = 30 5 * 7 = 35 5 * 8 = 40 5 * 9 = 45 5 * 10 = 50 Condicional IF La estructura de control o sentencia condicional if permite que un programa ejecute una serie de acciones en funci\u00f3n de si se cumple una determinada condici\u00f3n. Esta sentencia es la toma de decisi\u00f3n m\u00e1s b\u00e1sica, ya que consiste en comprobar si la prueba condicional o predicado es verdadero o falso, y en base a esto, ejecutar o no el c\u00f3digo que sigue a la sentencia. Sentencias if La sentencia if m\u00e1s simple est\u00e1 compuesta por dos elementos: una prueba condicional y una acci\u00f3n . 1 2 3 organulo = 'ribosoma' if organulo == 'ribosoma' : print ( \"\u00a1Era el organulo correcto!\" ) Como podr\u00e1 comprobar, si no se cumple esta condici\u00f3n no se generar\u00eda ninguna salida. Sangrado Al igual que ocurr\u00eda anteriormente, es fundamental prestarle atenci\u00f3n al sangrado. Despu\u00e9s de la sentencia if , todas las l\u00edneas sangradas se ejecutar\u00e1n si cumple la condici\u00f3n, y se ignorar\u00e1 todo el bloque si no se cumple. Sentencias if-else \u00bfQu\u00e9 ocurre si queremos que se genere una salida si no se cumple la condici\u00f3n? Para esto, utilizamos las sentencias if-else . El bloque if-else es equivalente a la sentencia if ya vista, pero incluye una sentencia else en la que se define una acci\u00f3n si la prueba condicional no es verdadera. Ve\u00e1moslo con el mismo ejemplo de antes: 1 2 3 4 5 organulo = 'vacuola' if organulo == 'ribosoma' : print ( \"\u00a1Era el organulo correcto!\" ) else : print ( \"\u00a1Ese no es el organulo!\" ) Sentencias if-elif-else En muchas ocasiones, va a necesitar probar m\u00e1s de dos situaciones, y para ello es recomendable utilizar las sentencias if-elif-else . En este caso, Python va a ejecutar en orden las condiciones, y la primera que se cumpla ser\u00e1 de la que ejecute su c\u00f3digo asociado. Si ninguna de las condiciones es verdadera, ejecutar\u00e1 el c\u00f3digo asociado a else como anteriormente. 1 2 3 4 5 6 7 num_individuos = 1500 if num_individuos < 1000 : print ( \"El numero de individuos es demasiado bajo\" ) elif num_individuos > 5000 : print ( \"El numero de individuos es demasiado alto\" ) else : print ( \"El numero de individuos para el muestreo es suficiente\" ) Sentencias if-elif-else Tenga en cuenta que puede utilizar m\u00faltiples bloques elif , a\u00f1adiendo todas las pruebas condicionales que vea necesarias. Adem\u00e1s, en este tipo de cadena Python no requiere un bloque else al final, por lo que puede omitirlo, siempre y cuando estos bloques elif engloben todas las posibles situaciones. Es decir, ha de cumplirse uno. Combinaci\u00f3n con listas La combinaci\u00f3n de sentencias if con listas es especialmente \u00fatil. Veamos un ejemplo: 1 2 3 4 5 6 proteinas = [ 'hemoglobina' , 'glucosa' , 'caseina' , 'lacasa' , 'albumina' ] for proteina in proteinas : if proteina == 'glucosa' : print ( f \"La { proteina } no es una prote\u00edna\" ) else : print ( proteina ) Ejemplo Comprobar si un numero es mayor a 0 1 2 3 4 5 6 7 8 9 numero = int ( input ( \"Introduce un n\u00famero:\" )) #Recibir un n\u00famero por usuario if numero == 0 : print ( \"El n\u00famero es igual a 0\" ) elif numero > 0 : print ( \"El n\u00famero es mayor a 0\" ) else : print ( \"El n\u00famero es menor a 0\" ) #Tenga en cuenta que este es un ejemplo de las distintas opciones para realizar este ejercicio. Divisores de un n\u00famero 1 2 3 4 5 6 7 8 numero = ( int ( input ( 'Introduzca un numero: \\n ' ))) contador = 0 print ( f 'Los divisores de { numero } son:' ) for divisor in range ( 1 , numero + 1 ): if ( numero % divisor ) == 0 : print ( divisor , \"es divisor\" ) contador += 1 print ( f \"El numero { numero } tiene { contador } divisores.\" ) #Observe c\u00f3mo esta sentencia queda fuera del bucle y condicional por el sangrado. Bucles WHILE A diferencia de los bucles for , que ejecutan un bloque de c\u00f3digo por cada elemento que compone la condici\u00f3n, los bucles while ejecutan el bloque de c\u00f3digo siempre que se cumpla una condici\u00f3n determinada, dej\u00e1ndolo de repetir cuando sea falsa. Es decir, el bucle while nos permite realizar m\u00faltiples iteraciones bas\u00e1ndonos en el resultado de una expresi\u00f3n l\u00f3gica que puede tener como resultado un valor True o False. Sintaxis A continuaci\u00f3n se muestra la sintaxis b\u00e1sica de un bucle while : 1 2 3 4 5 i = 1 while ( i < 6 ): print ( f \"N\u00ba veces se ha completado el bucle: { i } \" ) i = i + 1 print ( \"El bucle ha terminado\" ) En este caso, se ha definido la variable i , que aumentar\u00e1 una unidad cada vez que se complete el bucle. Cuando esta variable sea igual a 6, dejar\u00e1 de cumplirse la condici\u00f3n y finalizar\u00e1 el bucle. El resultado ser\u00e1 el siguiente: N\u00ba veces se ha completado el bucle : 1 N\u00ba veces se ha completado el bucle : 2 N\u00ba veces se ha completado el bucle : 3 N\u00ba veces se ha completado el bucle : 4 N\u00ba veces se ha completado el bucle : 5 El bucle ha terminado Bucle infinito Es f\u00e1cil cometer errores y programar un bucle infinito involuntariamente. Para parar este ciclo, presione Ctrl + C . Trabajar con bucles while Funci\u00f3n break Existe una forma alternativa de interrumpir o cortar los ciclos: utilizando la palabra reservada break . Esta nos permite salir del ciclo incluso si la expresi\u00f3n evaluada en el bucle es verdadera. 1 2 3 4 5 6 variable = int ( input ( \"Introduzca un valor >5 : \" )) while variable > 0 : print ( \"Actual valor de variable:\" , variable ) variable = variable - 1 if variable == 5 : break En este ejemplo, se muestra c\u00f3mo el valor de la variable va disminuyendo una unidad hasta que sea igual a 5, finalizando el c\u00f3digo. Observe c\u00f3mo finaliza el c\u00f3digo aunque el bucle while se siga cumpliendo (ya que el valor sigue siendo superior a 0). Funci\u00f3n continue En lugar de interrumpir el bucle, podemos utilizar la sentencia continue para volver al principio del bucle en funci\u00f3n del resultado de la prueba condicional. Veamos un ejemplo en el que un bucle imprime los n\u00fameros impares entre el 1 y el 20. 1 2 3 4 5 6 num = 0 while num < 20 : num += 1 if num % 2 == 0 : continue print ( num ) Ejemplo Suma de n n\u00fameros enteros 1 2 3 4 5 6 7 numero = int ( input ( \"Introduce un n\u00famero: \" )) suma = 0 x = 0 while ( x <= numero ): suma = suma + x x = x + 1 print ( f 'El resultado es { suma } ' ) Ejercicios EJERCICIO 1 . Escribir un programa que le pida al usuario un n\u00famero, y si es impar lo eleva al cuadrado, si no al cubo. Respuesta 1 2 3 4 5 6 numero = int ( input ( \"Introduzca un n\u00famero: \" )) if numero % 2 == 0 : resultado = numero ** 3 else : resultado = numero ** 2 print ( resultado ) EJERCICIO 2 . Escribir un programa que almacenen en una lista el cuadrado de los diez primeros n\u00fameros enteros. Respuesta 1 2 3 4 5 squares = [] #Creaci\u00f3n de una lista vac\u00eda for value in range ( 1 , 11 ): square = value ** 2 squares . append ( square ) print ( squares ) EJERCICIO 3 . Escribir un programa que le pida al usuario un n\u00famero y le diga a qu\u00e9 d\u00eda de la semana corresponde. Respuesta 1 2 3 4 5 6 7 8 9 10 11 12 13 14 if dia == 1 : print ( \"Es lunes\" ) elif dia == 2 : print ( \"Es martes\" ) elif dia == 3 : print ( \"Es miercoles\" ) elif dia == 4 : print ( \"Es jueves\" ) elif dia == 5 : print ( \"Es viernes\" ) elif dia == 6 : print ( \"Es sabado\" ) else : print ( \"Es domingo\" ) EJERCICIO 4 . Escribir un programa que le pregunte al usuario una contrase\u00f1a. Si coincide con contrase\u00f1a, debe indicar que es correcta. Respuesta 1 2 3 4 5 6 key = \"contrase\u00f1a\" password = input ( \"Introduce la contrase\u00f1a: \" ) while password != key : print ( \"La contrase\u00f1a no coincide\" ) password = input ( \"Introduce la contrase\u00f1a: \" ) print ( \"La contrase\u00f1a coincide\" ) EJERCICIO 5 . Escribir un programa que calcule el factorial de un n\u00famero introducido por el usuario. Respuesta 1 2 3 4 5 6 7 numero = int ( input ( \"Introduzca un n\u00famero:\" )) x = 1 resultado = 1 while x <= numero : resultado = resultado * x x = x + 1 print ( f 'El factorial de { numero } es { resultado } ' ) EJERCICIO 6 . Escribir un programa que calcule la suma de los n primeros n\u00fameros impares. Respuesta 1 2 3 4 5 6 7 8 9 numero = int ( input ( \"Introduzca un valor:\" )) sumatorio = 0 x = 1 variable = 1 while variable <= numero : sumatorio = sumatorio + x x = x + 2 variable = variable + 1 print ( f 'El resultado es { sumatorio } .' ) EJERCICIO 7 . Escribir un programa que le pida al usuario un n\u00famero y le diga si es un n\u00famero primo o no. Respuesta 1 2 3 4 5 6 7 8 9 10 11 numero = int ( input ( \"\u00bfQu\u00e9 n\u00famero quieres saber si es primo?: \\n \" )) valor = range ( 2 , numero ) contador = 0 for n in valor : if numero % n == 0 : contador += 1 print ( \"divisor:\" , n ) if contador > 0 : print ( \"El numero no es primo\" ) else : print ( \"El numero es primo\" ) Enlaces de inter\u00e9s Informaci\u00f3n acerca de estructuras de control. Flow Control in Python. Great Learning Programming in Python 3. Chapter 4. Mark Summerfield (2010). Addison-Wesley.","title":"Estructuras de control"},{"location":"6_EstructurasControl/#bucles-for","text":"Un bucle es una estructura de control que repite un bloque de instrucciones, denominado cuerpo , siendo cada repetici\u00f3n conocida como iteraci\u00f3n . En el caso del bucle for , se repite el bloque de instrucciones un n\u00famero determinado de veces. Los bucles nos permiten realizar las mismas acciones con los elementos de una lista, como puede ser realizar una misma operaci\u00f3n matem\u00e1tica con cada elemento.","title":"Bucles FOR"},{"location":"6_EstructurasControl/#sintaxis","text":"Si tiene una lista con diferentes elementos, como distintos tipos de prote\u00ednas, y quiere imprimir por pantalla todos los nombres, puede hacerlo de forma individual como ya se ense\u00f1\u00f3 anteriormente. Esto nos conduce a los siguientes problemas: C\u00f3digo muy repetitivo. Trabajo lento y poco eficiente. Cada vez que se altere la longitud de la lista, cambiar el c\u00f3digo. Por este motivo, lo recomendable es utilizar la siguiente estructura. 1 2 3 proteinas = [ 'hemoglobina' , 'caseina' , 'lacasa' , 'albumina' ] for proteina in proteinas : print ( proteina ) En este caso, se ha definido la lista proteinas , y el bucle le indica a Python que cada elemento de esta lista se asocie con la variable proteina . Posteriormente, se indica que imprima cada elemento que se ha ido asignando a la variable proteina . La salida ser\u00e1 la siguiente: hemoglobina caseina lacasa albumina Por tanto, Python va imprimiendo el valor actual de la variable proteina , que va cambiando al repetir el bucle. Cuando ya no hay m\u00e1s elementos en la lista, finaliza el programa. Nomenclatura de la variable Tenga en cuenta que puede elegir el nombre que quiera para la variable temporal. Se ha elegido en este caso proteina porque conviene utilizar nombres significativos, que representen los elementos de la lista. Es muy importante tener cuidado con las l\u00edneas sangradas. A veces, el bucle se puede ejecutar sin problemas pero que no produzca el resultado esperado. Veamos algunos ejemplos de esto: 1 2 3 4 proteinas = [ 'hemoglobina' , 'caseina' , 'lacasa' , 'albumina' ] for proteina in proteinas : print ( f \"La { proteina } es una prote\u00edna.\" ) print ( proteina ) Este c\u00f3digo imprime por pantalla el siguiente texto. Observe c\u00f3mo en la \u00faltima l\u00ednea de c\u00f3digo, \u00fanicamente se muestra el \u00faltimo elemento asociado a la variable proteina . La hemoglobina es una prote\u00edna . La caseina es una prote\u00edna . La lacasa es una prote\u00edna . La albumina es una prote\u00edna . albumina","title":"Sintaxis"},{"location":"6_EstructurasControl/#trabajar-con-bucles-for","text":"","title":"Trabajar con bucles for"},{"location":"6_EstructurasControl/#funcion-range","text":"La funci\u00f3n range () se utiliza principalmente para generar y trabajar con una serie de n\u00fameros. Veamos un ejemplo simple: 1 2 3 4 5 for numero in range ( 1 , 4 ): #Imprime hasta el n\u00famero n-1 print ( numero ) for valor in range ( 4 ): print ( valor ) Esto dar\u00eda lugar a la siguiente salida por pantalla: 1 2 3 0 1 2 3","title":"Funci\u00f3n range ()"},{"location":"6_EstructurasControl/#funcion-list","text":"Los resultados generados por la funci\u00f3n range () pueden convertirse directamente en una lista. Para esto se utiliza la funci\u00f3n list (). 1 2 3 4 lista = list ( range ( 2 , 19 , 2 )) >>> lista [ 2 , 4 , 6 , 8 , 10 , 12 , 14 , 16 , 18 ] Observe que en este caso el rango determinado es (2,19,2) . Los dos primeros argumentos indican el rango de valor de los elementos (entre 2 y 19), y el tercero indica el tama\u00f1o de salto entre los valores (de 2 en 2).","title":"Funci\u00f3n list ()"},{"location":"6_EstructurasControl/#ejemplo","text":"Tabla de multiplicar del 5 1 2 3 for numero in range ( 11 ): multiplicacion = 5 * numero print ( f \"5 * { numero } = { multiplicacion } \" ) 5 * 0 = 0 5 * 1 = 5 5 * 2 = 10 5 * 3 = 15 5 * 4 = 20 5 * 5 = 25 5 * 6 = 30 5 * 7 = 35 5 * 8 = 40 5 * 9 = 45 5 * 10 = 50","title":"Ejemplo"},{"location":"6_EstructurasControl/#condicional-if","text":"La estructura de control o sentencia condicional if permite que un programa ejecute una serie de acciones en funci\u00f3n de si se cumple una determinada condici\u00f3n. Esta sentencia es la toma de decisi\u00f3n m\u00e1s b\u00e1sica, ya que consiste en comprobar si la prueba condicional o predicado es verdadero o falso, y en base a esto, ejecutar o no el c\u00f3digo que sigue a la sentencia.","title":"Condicional IF"},{"location":"6_EstructurasControl/#sentencias-if","text":"La sentencia if m\u00e1s simple est\u00e1 compuesta por dos elementos: una prueba condicional y una acci\u00f3n . 1 2 3 organulo = 'ribosoma' if organulo == 'ribosoma' : print ( \"\u00a1Era el organulo correcto!\" ) Como podr\u00e1 comprobar, si no se cumple esta condici\u00f3n no se generar\u00eda ninguna salida. Sangrado Al igual que ocurr\u00eda anteriormente, es fundamental prestarle atenci\u00f3n al sangrado. Despu\u00e9s de la sentencia if , todas las l\u00edneas sangradas se ejecutar\u00e1n si cumple la condici\u00f3n, y se ignorar\u00e1 todo el bloque si no se cumple.","title":"Sentencias if"},{"location":"6_EstructurasControl/#sentencias-if-else","text":"\u00bfQu\u00e9 ocurre si queremos que se genere una salida si no se cumple la condici\u00f3n? Para esto, utilizamos las sentencias if-else . El bloque if-else es equivalente a la sentencia if ya vista, pero incluye una sentencia else en la que se define una acci\u00f3n si la prueba condicional no es verdadera. Ve\u00e1moslo con el mismo ejemplo de antes: 1 2 3 4 5 organulo = 'vacuola' if organulo == 'ribosoma' : print ( \"\u00a1Era el organulo correcto!\" ) else : print ( \"\u00a1Ese no es el organulo!\" )","title":"Sentencias if-else"},{"location":"6_EstructurasControl/#sentencias-if-elif-else","text":"En muchas ocasiones, va a necesitar probar m\u00e1s de dos situaciones, y para ello es recomendable utilizar las sentencias if-elif-else . En este caso, Python va a ejecutar en orden las condiciones, y la primera que se cumpla ser\u00e1 de la que ejecute su c\u00f3digo asociado. Si ninguna de las condiciones es verdadera, ejecutar\u00e1 el c\u00f3digo asociado a else como anteriormente. 1 2 3 4 5 6 7 num_individuos = 1500 if num_individuos < 1000 : print ( \"El numero de individuos es demasiado bajo\" ) elif num_individuos > 5000 : print ( \"El numero de individuos es demasiado alto\" ) else : print ( \"El numero de individuos para el muestreo es suficiente\" ) Sentencias if-elif-else Tenga en cuenta que puede utilizar m\u00faltiples bloques elif , a\u00f1adiendo todas las pruebas condicionales que vea necesarias. Adem\u00e1s, en este tipo de cadena Python no requiere un bloque else al final, por lo que puede omitirlo, siempre y cuando estos bloques elif engloben todas las posibles situaciones. Es decir, ha de cumplirse uno.","title":"Sentencias if-elif-else"},{"location":"6_EstructurasControl/#combinacion-con-listas","text":"La combinaci\u00f3n de sentencias if con listas es especialmente \u00fatil. Veamos un ejemplo: 1 2 3 4 5 6 proteinas = [ 'hemoglobina' , 'glucosa' , 'caseina' , 'lacasa' , 'albumina' ] for proteina in proteinas : if proteina == 'glucosa' : print ( f \"La { proteina } no es una prote\u00edna\" ) else : print ( proteina )","title":"Combinaci\u00f3n con listas"},{"location":"6_EstructurasControl/#ejemplo_1","text":"Comprobar si un numero es mayor a 0 1 2 3 4 5 6 7 8 9 numero = int ( input ( \"Introduce un n\u00famero:\" )) #Recibir un n\u00famero por usuario if numero == 0 : print ( \"El n\u00famero es igual a 0\" ) elif numero > 0 : print ( \"El n\u00famero es mayor a 0\" ) else : print ( \"El n\u00famero es menor a 0\" ) #Tenga en cuenta que este es un ejemplo de las distintas opciones para realizar este ejercicio. Divisores de un n\u00famero 1 2 3 4 5 6 7 8 numero = ( int ( input ( 'Introduzca un numero: \\n ' ))) contador = 0 print ( f 'Los divisores de { numero } son:' ) for divisor in range ( 1 , numero + 1 ): if ( numero % divisor ) == 0 : print ( divisor , \"es divisor\" ) contador += 1 print ( f \"El numero { numero } tiene { contador } divisores.\" ) #Observe c\u00f3mo esta sentencia queda fuera del bucle y condicional por el sangrado.","title":"Ejemplo"},{"location":"6_EstructurasControl/#bucles-while","text":"A diferencia de los bucles for , que ejecutan un bloque de c\u00f3digo por cada elemento que compone la condici\u00f3n, los bucles while ejecutan el bloque de c\u00f3digo siempre que se cumpla una condici\u00f3n determinada, dej\u00e1ndolo de repetir cuando sea falsa. Es decir, el bucle while nos permite realizar m\u00faltiples iteraciones bas\u00e1ndonos en el resultado de una expresi\u00f3n l\u00f3gica que puede tener como resultado un valor True o False.","title":"Bucles WHILE"},{"location":"6_EstructurasControl/#sintaxis_1","text":"A continuaci\u00f3n se muestra la sintaxis b\u00e1sica de un bucle while : 1 2 3 4 5 i = 1 while ( i < 6 ): print ( f \"N\u00ba veces se ha completado el bucle: { i } \" ) i = i + 1 print ( \"El bucle ha terminado\" ) En este caso, se ha definido la variable i , que aumentar\u00e1 una unidad cada vez que se complete el bucle. Cuando esta variable sea igual a 6, dejar\u00e1 de cumplirse la condici\u00f3n y finalizar\u00e1 el bucle. El resultado ser\u00e1 el siguiente: N\u00ba veces se ha completado el bucle : 1 N\u00ba veces se ha completado el bucle : 2 N\u00ba veces se ha completado el bucle : 3 N\u00ba veces se ha completado el bucle : 4 N\u00ba veces se ha completado el bucle : 5 El bucle ha terminado Bucle infinito Es f\u00e1cil cometer errores y programar un bucle infinito involuntariamente. Para parar este ciclo, presione Ctrl + C .","title":"Sintaxis"},{"location":"6_EstructurasControl/#trabajar-con-bucles-while","text":"","title":"Trabajar con bucles while"},{"location":"6_EstructurasControl/#funcion-break","text":"Existe una forma alternativa de interrumpir o cortar los ciclos: utilizando la palabra reservada break . Esta nos permite salir del ciclo incluso si la expresi\u00f3n evaluada en el bucle es verdadera. 1 2 3 4 5 6 variable = int ( input ( \"Introduzca un valor >5 : \" )) while variable > 0 : print ( \"Actual valor de variable:\" , variable ) variable = variable - 1 if variable == 5 : break En este ejemplo, se muestra c\u00f3mo el valor de la variable va disminuyendo una unidad hasta que sea igual a 5, finalizando el c\u00f3digo. Observe c\u00f3mo finaliza el c\u00f3digo aunque el bucle while se siga cumpliendo (ya que el valor sigue siendo superior a 0).","title":"Funci\u00f3n break"},{"location":"6_EstructurasControl/#funcion-continue","text":"En lugar de interrumpir el bucle, podemos utilizar la sentencia continue para volver al principio del bucle en funci\u00f3n del resultado de la prueba condicional. Veamos un ejemplo en el que un bucle imprime los n\u00fameros impares entre el 1 y el 20. 1 2 3 4 5 6 num = 0 while num < 20 : num += 1 if num % 2 == 0 : continue print ( num )","title":"Funci\u00f3n continue"},{"location":"6_EstructurasControl/#ejemplo_2","text":"Suma de n n\u00fameros enteros 1 2 3 4 5 6 7 numero = int ( input ( \"Introduce un n\u00famero: \" )) suma = 0 x = 0 while ( x <= numero ): suma = suma + x x = x + 1 print ( f 'El resultado es { suma } ' )","title":"Ejemplo"},{"location":"6_EstructurasControl/#ejercicios","text":"EJERCICIO 1 . Escribir un programa que le pida al usuario un n\u00famero, y si es impar lo eleva al cuadrado, si no al cubo. Respuesta 1 2 3 4 5 6 numero = int ( input ( \"Introduzca un n\u00famero: \" )) if numero % 2 == 0 : resultado = numero ** 3 else : resultado = numero ** 2 print ( resultado ) EJERCICIO 2 . Escribir un programa que almacenen en una lista el cuadrado de los diez primeros n\u00fameros enteros. Respuesta 1 2 3 4 5 squares = [] #Creaci\u00f3n de una lista vac\u00eda for value in range ( 1 , 11 ): square = value ** 2 squares . append ( square ) print ( squares ) EJERCICIO 3 . Escribir un programa que le pida al usuario un n\u00famero y le diga a qu\u00e9 d\u00eda de la semana corresponde. Respuesta 1 2 3 4 5 6 7 8 9 10 11 12 13 14 if dia == 1 : print ( \"Es lunes\" ) elif dia == 2 : print ( \"Es martes\" ) elif dia == 3 : print ( \"Es miercoles\" ) elif dia == 4 : print ( \"Es jueves\" ) elif dia == 5 : print ( \"Es viernes\" ) elif dia == 6 : print ( \"Es sabado\" ) else : print ( \"Es domingo\" ) EJERCICIO 4 . Escribir un programa que le pregunte al usuario una contrase\u00f1a. Si coincide con contrase\u00f1a, debe indicar que es correcta. Respuesta 1 2 3 4 5 6 key = \"contrase\u00f1a\" password = input ( \"Introduce la contrase\u00f1a: \" ) while password != key : print ( \"La contrase\u00f1a no coincide\" ) password = input ( \"Introduce la contrase\u00f1a: \" ) print ( \"La contrase\u00f1a coincide\" ) EJERCICIO 5 . Escribir un programa que calcule el factorial de un n\u00famero introducido por el usuario. Respuesta 1 2 3 4 5 6 7 numero = int ( input ( \"Introduzca un n\u00famero:\" )) x = 1 resultado = 1 while x <= numero : resultado = resultado * x x = x + 1 print ( f 'El factorial de { numero } es { resultado } ' ) EJERCICIO 6 . Escribir un programa que calcule la suma de los n primeros n\u00fameros impares. Respuesta 1 2 3 4 5 6 7 8 9 numero = int ( input ( \"Introduzca un valor:\" )) sumatorio = 0 x = 1 variable = 1 while variable <= numero : sumatorio = sumatorio + x x = x + 2 variable = variable + 1 print ( f 'El resultado es { sumatorio } .' ) EJERCICIO 7 . Escribir un programa que le pida al usuario un n\u00famero y le diga si es un n\u00famero primo o no. Respuesta 1 2 3 4 5 6 7 8 9 10 11 numero = int ( input ( \"\u00bfQu\u00e9 n\u00famero quieres saber si es primo?: \\n \" )) valor = range ( 2 , numero ) contador = 0 for n in valor : if numero % n == 0 : contador += 1 print ( \"divisor:\" , n ) if contador > 0 : print ( \"El numero no es primo\" ) else : print ( \"El numero es primo\" ) Enlaces de inter\u00e9s Informaci\u00f3n acerca de estructuras de control. Flow Control in Python. Great Learning Programming in Python 3. Chapter 4. Mark Summerfield (2010). Addison-Wesley.","title":"Ejercicios"},{"location":"7_Funciones/","text":"\u00bfQu\u00e9 es una funci\u00f3n? Una funci\u00f3n es un bloque de c\u00f3digo que ha sido dise\u00f1ado para realizar una tarea, y que una vez definida puede utilizarse en el momento que se desee. Es decir, si tiene que realizar una misma tarea varias veces, en lugar de repetir una y otra vez el c\u00f3digo, lo m\u00e1s eficiente es definirlo en una funci\u00f3n y utilizarlo de forma mucho m\u00e1s simple. Esto hace que el c\u00f3digo sea m\u00e1s legible y limita los errores de escritura. A continuaci\u00f3n aprender\u00e1 a trabajar con funciones, aunque de hecho ya las ha estado utilizando. A lo largo del tutorial ha utilizado funciones b\u00e1sicas como print () o len () , ya implementadas en Python. Definir y llamar una funci\u00f3n Las funciones en Python se crean usando la palabra clave def , seguida de un nombre de funci\u00f3n y par\u00e1metros de funci\u00f3n entre par\u00e9ntesis. Veamos un ejemplo: 1 2 def saludar_usuario (): print ( \"\u00a1Hola a todos!\" ) Esta es la estructura m\u00e1s simple para definir una funci\u00f3n. En este caso, la funci\u00f3n se denomina saludar_usuario () , y como para esta tarea no se necesita informaci\u00f3n, los par\u00e9ntesis no contienen par\u00e1metros (aunque es fundamental incluirlos). Tras los dos puntos, las siguientes l\u00edneas sangradas forman el denominado cuerpo de la funci\u00f3n que contiene la tarea a realizar, en este caso un saludo al usuario. Llamada Para llamar a una funci\u00f3n, hay que escribir su nombre seguida de la informaci\u00f3n que sea necesaria entre par\u00e9ntesis. En el caso de la funci\u00f3n print () , como ya se habr\u00e1 dado cuenta, es necesario escribir entre los par\u00e9ntesis informaci\u00f3n, si no esta dar\u00e1 error. Al contrario, en la funci\u00f3n anterior no es necesaria informaci\u00f3n, por lo que simplemente defini\u00e9ndola ya dar\u00e1 el resultado esperado. >>> saludar_usuario () \u00a1 Hola a todos ! Modificar la funci\u00f3n Par\u00e1metro y argumento Si deseamos que la funci\u00f3n salude a una persona en concreto, tenemos que incluir par\u00e1metros de la funci\u00f3n entre par\u00e9ntesis. Ahora Python esperar\u00e1 que proporcionemos un valor a esta funci\u00f3n. Veamos dos ejemplos: 1 2 def saludar_usuario ( usuario ): print ( f \"\u00a1Hola { usuario } !\" ) >>> saludar_usuario (\"Victor\") \u00a1Hola Victor! 1 2 3 4 5 6 def multiplicacion ( a , b ): return ( a * b ) resultado = multiplicacion ( 7 , 5 ) >>> multiplicacion 35 Aunque a veces se pueden llegar a utilizar de forma similar, es importante tener claro dos conceptos: Par\u00e1metro : usuario; a,b. Argumento : V\u00edctor; 7,5. Como observar\u00e1 en el segundo ejemplo, Python asocia cada argumento introducido con un par\u00e1metro (a-7, b-5). Esta asociaci\u00f3n es muy importante, ya que podemos obtener alg\u00fan resultado inesperado si mezclamos argumentos al llamar la funci\u00f3n. 1 2 3 4 5 def saludo ( nombre , profesion ): print ( f \"Me llamo { nombre } y soy { profesion } .\" ) >>> saludo ( \"estudiante\" , \"Victor\" ) Me llamo estudiante y soy Victor . Observe que cuando llama a la funci\u00f3n, PyCharm le indica sobre qu\u00e9 par\u00e1metro est\u00e1 escribiendo su argumento. Esto es muy \u00fatil y evita muchos errores de escritura como el anterior. Otra forma de solucionarlo es utilizar los argumentos de palabra clave . 1 2 3 4 5 def saludo ( nombre , profesion ): print ( f \"Me llamo { nombre } y soy { profesion } .\" ) >>> saludo ( profesion = \"estudiante\" , nombre = \"Victor\" ) Me llamo Victor y soy estudiante . Al escribir una funci\u00f3n, podemos definir un argumento predeterminado para cada par\u00e1metro. Si se utilizan argumentos predeterminados, no es necesario incluirlos al llamar la funci\u00f3n. 1 2 3 4 5 def saludo ( nombre , profesion = \"estudiante\" ): print ( f \"Me llamo { nombre } y soy { profesion } .\" ) >>> saludo ( \"Victor\" ) Me llamo Victor y soy estudiante . Argumentos predeterminados Tenga en cuenta que no es posible utilizar un argumento predeterminado antes que un par\u00e1metro no prederminado. Por lo tanto, en primer lugar escriba todos los valores no predeterminados. Cuerpo de la funci\u00f3n En el cuerpo de una funci\u00f3n se pueden encontrar todo tipo de estructuras, desde estructuras de datos simples como listas, hasta estructuras de control como bucles. BUCLE FOR. Sumatorio de una lista. 1 2 3 4 5 6 def sumatorio ( lista ): suma = 0 or x in range ( len ( lista )): suma = suma + lista [ x ] return ( suma ) # Busque informaci\u00f3n acerca de la funci\u00f3n sum(). SENTENCIA IF-ELSE. Mayor/menor de una lista. 1 2 3 4 5 6 7 8 9 10 11 def mayormenor ( lista ): may = lista [ 0 ] men = lista [ 0 ] for x in range ( 1 , len ( lista )): #Esta funci\u00f3n se defini\u00f3 en las cadenas de caracteres if lista [ x ] > may : may = lista [ x ] else : if lista [ x ] < men : men = lista [ x ] return ( may ) return ( men ) Funciones ya definidas Como se ha comentado anteriormente, Python ya contiene algunas funciones que puede utilizar denominadas funciones Built-in . En el apartado Estructuras de datos puede encontrar algunos ejemplos ya utilizados como len () , max () o reverse () . A continuaci\u00f3n puede encontrar otros ejemplos: FUNCI\u00d3N DESCRIPCI\u00d3N chr() Convierte el n\u00famero entero que representa el c\u00f3digo Unicode en el car\u00e1cter correspondiente input() Permite recibir informaci\u00f3n del usuario, convirti\u00e9ndola en una cadena sorted() Devuelve una lista ordenada help() Obtener informaci\u00f3n acerca de un argumento indicado abs() Devuelve el valor absoluto de un n\u00famero id() Retorna la identidad de un objeto M\u00f3dulos Las funciones pueden almacenarse en un archivo denominado m\u00f3dulo , que se puede importar posteriormente al programa principal. Por tanto, un m\u00f3dulo no es otra cosa que un archivo con extensi\u00f3n .py que puede definir funciones, clases o variables. Esto nos permite reutilizar las funciones en distintos programas, por lo que si tiene que utilizar una misma funci\u00f3n en varios programas distintos, no tendr\u00e1 que definirla una y otra vez, simplemente tendr\u00e1 que importar el m\u00f3dulo . En primer lugar debe crear el archivo .py que contenga el c\u00f3digo que desea importar. Ve\u00e1moslo con un ejemplo anterior: multiplicar_funcion.py 1 2 def multiplicacion ( a , b ): return ( a * b ) En el mismo directorio que el archivo multiplicacion.py , cree un archivo independiente que importar\u00e1 el m\u00f3dulo creado. comprobacion.py 1 2 3 4 import multiplicar_funcion >>> multiplicacion ( 8 , 7 ) 56 \u00bfQu\u00e9 hace la l\u00ednea import? La l\u00ednea import multiplicar_funcion le dice a Python que abra el archivo multiplicar_funcion.py , y que copie todas las funciones que encuentre en este archivo. De esta forma, cualquier funci\u00f3n definida en el archivo multiplicar_funcion.py estar\u00e1 disponible en el archivo comprobacion.py . Una acci\u00f3n de buenas pr\u00e1cticas trabajando en programaci\u00f3n es incluir en un mismo archivo todas las funciones que le puedan ser \u00fatiles, y as\u00ed evitar tener muchos archivos que definan funciones distintas. De hecho, desde este archivo puede importar \u00fanicamente las funciones que desee en un momento determinado. 1 from nombre_m\u00f3dulo import funcion_1 , funcion_2 1 from nombre_m\u00f3dulo import * #Otra forma de importar todas las funciones Ejercicios EJERCICIO 1 . Escribir una funci\u00f3n que calcule el \u00e1rea de un c\u00edrculo. Respuesta 1 2 3 def circle_area ( radius ): pi = 3.1415 return pi * radius ** 2 EJERCICIO 2 . Escribir una funci\u00f3n que calcule la media de una lista. Respuesta 1 2 def mean ( lista ): return sum ( lista ) / len ( lista ) EJERCICIO 3 . Escribir una funci\u00f3n que calcule el m\u00e1ximo com\u00fan divisor de dos n\u00fameros. Respuesta 1 2 3 4 5 6 7 def mcd ( a , b ): resto = 0 while ( b > 0 ): resto = b b = a % b a = resto return a Enlaces de inter\u00e9s El tutorial de Python. Definiendo funciones. Guido van Rossum (2009). Python Software Foundation. Python Tutorial for Beginners 8: Functions.","title":"Funciones"},{"location":"7_Funciones/#que-es-una-funcion","text":"Una funci\u00f3n es un bloque de c\u00f3digo que ha sido dise\u00f1ado para realizar una tarea, y que una vez definida puede utilizarse en el momento que se desee. Es decir, si tiene que realizar una misma tarea varias veces, en lugar de repetir una y otra vez el c\u00f3digo, lo m\u00e1s eficiente es definirlo en una funci\u00f3n y utilizarlo de forma mucho m\u00e1s simple. Esto hace que el c\u00f3digo sea m\u00e1s legible y limita los errores de escritura. A continuaci\u00f3n aprender\u00e1 a trabajar con funciones, aunque de hecho ya las ha estado utilizando. A lo largo del tutorial ha utilizado funciones b\u00e1sicas como print () o len () , ya implementadas en Python.","title":"\u00bfQu\u00e9 es una funci\u00f3n?"},{"location":"7_Funciones/#definir-y-llamar-una-funcion","text":"Las funciones en Python se crean usando la palabra clave def , seguida de un nombre de funci\u00f3n y par\u00e1metros de funci\u00f3n entre par\u00e9ntesis. Veamos un ejemplo: 1 2 def saludar_usuario (): print ( \"\u00a1Hola a todos!\" ) Esta es la estructura m\u00e1s simple para definir una funci\u00f3n. En este caso, la funci\u00f3n se denomina saludar_usuario () , y como para esta tarea no se necesita informaci\u00f3n, los par\u00e9ntesis no contienen par\u00e1metros (aunque es fundamental incluirlos). Tras los dos puntos, las siguientes l\u00edneas sangradas forman el denominado cuerpo de la funci\u00f3n que contiene la tarea a realizar, en este caso un saludo al usuario.","title":"Definir y llamar una funci\u00f3n"},{"location":"7_Funciones/#llamada","text":"Para llamar a una funci\u00f3n, hay que escribir su nombre seguida de la informaci\u00f3n que sea necesaria entre par\u00e9ntesis. En el caso de la funci\u00f3n print () , como ya se habr\u00e1 dado cuenta, es necesario escribir entre los par\u00e9ntesis informaci\u00f3n, si no esta dar\u00e1 error. Al contrario, en la funci\u00f3n anterior no es necesaria informaci\u00f3n, por lo que simplemente defini\u00e9ndola ya dar\u00e1 el resultado esperado. >>> saludar_usuario () \u00a1 Hola a todos !","title":"Llamada"},{"location":"7_Funciones/#modificar-la-funcion","text":"","title":"Modificar la funci\u00f3n"},{"location":"7_Funciones/#parametro-y-argumento","text":"Si deseamos que la funci\u00f3n salude a una persona en concreto, tenemos que incluir par\u00e1metros de la funci\u00f3n entre par\u00e9ntesis. Ahora Python esperar\u00e1 que proporcionemos un valor a esta funci\u00f3n. Veamos dos ejemplos: 1 2 def saludar_usuario ( usuario ): print ( f \"\u00a1Hola { usuario } !\" ) >>> saludar_usuario (\"Victor\") \u00a1Hola Victor! 1 2 3 4 5 6 def multiplicacion ( a , b ): return ( a * b ) resultado = multiplicacion ( 7 , 5 ) >>> multiplicacion 35 Aunque a veces se pueden llegar a utilizar de forma similar, es importante tener claro dos conceptos: Par\u00e1metro : usuario; a,b. Argumento : V\u00edctor; 7,5. Como observar\u00e1 en el segundo ejemplo, Python asocia cada argumento introducido con un par\u00e1metro (a-7, b-5). Esta asociaci\u00f3n es muy importante, ya que podemos obtener alg\u00fan resultado inesperado si mezclamos argumentos al llamar la funci\u00f3n. 1 2 3 4 5 def saludo ( nombre , profesion ): print ( f \"Me llamo { nombre } y soy { profesion } .\" ) >>> saludo ( \"estudiante\" , \"Victor\" ) Me llamo estudiante y soy Victor . Observe que cuando llama a la funci\u00f3n, PyCharm le indica sobre qu\u00e9 par\u00e1metro est\u00e1 escribiendo su argumento. Esto es muy \u00fatil y evita muchos errores de escritura como el anterior. Otra forma de solucionarlo es utilizar los argumentos de palabra clave . 1 2 3 4 5 def saludo ( nombre , profesion ): print ( f \"Me llamo { nombre } y soy { profesion } .\" ) >>> saludo ( profesion = \"estudiante\" , nombre = \"Victor\" ) Me llamo Victor y soy estudiante . Al escribir una funci\u00f3n, podemos definir un argumento predeterminado para cada par\u00e1metro. Si se utilizan argumentos predeterminados, no es necesario incluirlos al llamar la funci\u00f3n. 1 2 3 4 5 def saludo ( nombre , profesion = \"estudiante\" ): print ( f \"Me llamo { nombre } y soy { profesion } .\" ) >>> saludo ( \"Victor\" ) Me llamo Victor y soy estudiante . Argumentos predeterminados Tenga en cuenta que no es posible utilizar un argumento predeterminado antes que un par\u00e1metro no prederminado. Por lo tanto, en primer lugar escriba todos los valores no predeterminados.","title":"Par\u00e1metro y argumento"},{"location":"7_Funciones/#cuerpo-de-la-funcion","text":"En el cuerpo de una funci\u00f3n se pueden encontrar todo tipo de estructuras, desde estructuras de datos simples como listas, hasta estructuras de control como bucles. BUCLE FOR. Sumatorio de una lista. 1 2 3 4 5 6 def sumatorio ( lista ): suma = 0 or x in range ( len ( lista )): suma = suma + lista [ x ] return ( suma ) # Busque informaci\u00f3n acerca de la funci\u00f3n sum(). SENTENCIA IF-ELSE. Mayor/menor de una lista. 1 2 3 4 5 6 7 8 9 10 11 def mayormenor ( lista ): may = lista [ 0 ] men = lista [ 0 ] for x in range ( 1 , len ( lista )): #Esta funci\u00f3n se defini\u00f3 en las cadenas de caracteres if lista [ x ] > may : may = lista [ x ] else : if lista [ x ] < men : men = lista [ x ] return ( may ) return ( men )","title":"Cuerpo de la funci\u00f3n"},{"location":"7_Funciones/#funciones-ya-definidas","text":"Como se ha comentado anteriormente, Python ya contiene algunas funciones que puede utilizar denominadas funciones Built-in . En el apartado Estructuras de datos puede encontrar algunos ejemplos ya utilizados como len () , max () o reverse () . A continuaci\u00f3n puede encontrar otros ejemplos: FUNCI\u00d3N DESCRIPCI\u00d3N chr() Convierte el n\u00famero entero que representa el c\u00f3digo Unicode en el car\u00e1cter correspondiente input() Permite recibir informaci\u00f3n del usuario, convirti\u00e9ndola en una cadena sorted() Devuelve una lista ordenada help() Obtener informaci\u00f3n acerca de un argumento indicado abs() Devuelve el valor absoluto de un n\u00famero id() Retorna la identidad de un objeto","title":"Funciones ya definidas"},{"location":"7_Funciones/#modulos","text":"Las funciones pueden almacenarse en un archivo denominado m\u00f3dulo , que se puede importar posteriormente al programa principal. Por tanto, un m\u00f3dulo no es otra cosa que un archivo con extensi\u00f3n .py que puede definir funciones, clases o variables. Esto nos permite reutilizar las funciones en distintos programas, por lo que si tiene que utilizar una misma funci\u00f3n en varios programas distintos, no tendr\u00e1 que definirla una y otra vez, simplemente tendr\u00e1 que importar el m\u00f3dulo . En primer lugar debe crear el archivo .py que contenga el c\u00f3digo que desea importar. Ve\u00e1moslo con un ejemplo anterior: multiplicar_funcion.py 1 2 def multiplicacion ( a , b ): return ( a * b ) En el mismo directorio que el archivo multiplicacion.py , cree un archivo independiente que importar\u00e1 el m\u00f3dulo creado. comprobacion.py 1 2 3 4 import multiplicar_funcion >>> multiplicacion ( 8 , 7 ) 56 \u00bfQu\u00e9 hace la l\u00ednea import? La l\u00ednea import multiplicar_funcion le dice a Python que abra el archivo multiplicar_funcion.py , y que copie todas las funciones que encuentre en este archivo. De esta forma, cualquier funci\u00f3n definida en el archivo multiplicar_funcion.py estar\u00e1 disponible en el archivo comprobacion.py . Una acci\u00f3n de buenas pr\u00e1cticas trabajando en programaci\u00f3n es incluir en un mismo archivo todas las funciones que le puedan ser \u00fatiles, y as\u00ed evitar tener muchos archivos que definan funciones distintas. De hecho, desde este archivo puede importar \u00fanicamente las funciones que desee en un momento determinado. 1 from nombre_m\u00f3dulo import funcion_1 , funcion_2 1 from nombre_m\u00f3dulo import * #Otra forma de importar todas las funciones","title":"M\u00f3dulos"},{"location":"7_Funciones/#ejercicios","text":"EJERCICIO 1 . Escribir una funci\u00f3n que calcule el \u00e1rea de un c\u00edrculo. Respuesta 1 2 3 def circle_area ( radius ): pi = 3.1415 return pi * radius ** 2 EJERCICIO 2 . Escribir una funci\u00f3n que calcule la media de una lista. Respuesta 1 2 def mean ( lista ): return sum ( lista ) / len ( lista ) EJERCICIO 3 . Escribir una funci\u00f3n que calcule el m\u00e1ximo com\u00fan divisor de dos n\u00fameros. Respuesta 1 2 3 4 5 6 7 def mcd ( a , b ): resto = 0 while ( b > 0 ): resto = b b = a % b a = resto return a Enlaces de inter\u00e9s El tutorial de Python. Definiendo funciones. Guido van Rossum (2009). Python Software Foundation. Python Tutorial for Beginners 8: Functions.","title":"Ejercicios"},{"location":"8_ArchivosyDatos/","text":"Como bioqu\u00edmico, en la mayor\u00eda de ocasiones necesitar\u00e1 trabajar con archivos y datos en Python. Por ese motivo, en este apartado aprender\u00e1 conceptos b\u00e1sicos relacionados con la lectura y manipulaci\u00f3n de archivos, y la importaci\u00f3n/exportaci\u00f3n de datos. Trabajar con un archivo Lectura Para poder aprender a trabajar con un archivo de texto ( .txt ), necesitar\u00e1 crear uno utilizando el editor de texto que desee o el propio IDE. Es fundamental que almacene este archivo en el mismo directorio donde est\u00e9 trabajando. A continuaci\u00f3n le proponemos un ejemplo, en este caso un archivo que contiene el n\u00famero pi (10 decimales por l\u00ednea). num_pi.txt 3.1415926535 8979323846 Una vez creado el archivo, veamos c\u00f3mo abrirlo e imprimir el contenido en la pantalla en un archivo .py . leer_pi.py 1 2 3 with open ( \"num_pi.txt\" ) as file_object : contenido = file_object . read () print ( contenido ) Funci\u00f3n open() . Le indica a Python qu\u00e9 archivo deseamos abrir, busc\u00e1ndolo en el mismo directorio que leer_pi.py . File_object . La funci\u00f3n open () devuelve un objeto, que lo asignaremos a esta variable. Funci\u00f3n read() . Lee todo el contenido del archivo y lo guarda como una cadena denominada contenido . Una vez creada la cadena, la imprimimos por pantalla. Eliminar l\u00ednea en blanco Se habr\u00e1 dado cuenta que al final de la salida se muestra una l\u00ednea en blanco que no estaba en el archivo original. Si la quiere eliminar, utilice rstrip() al utilizar la funci\u00f3n print() . Aunque existe probabilidad de que su archivo .txt se encuentre en el mismo directorio de trabajo, normalmente estar\u00e1 en otro diferente. Para que Python pueda abrir y leer archivos de un directorio distinto, debe incluir la ruta de archivo . leer_pi.py 1 2 3 with open ( \"C: \\\\ Users \\\\ Downloads \\\\ num_pi.txt\" ) as file_object : contenido = file_object . read () print ( contenido ) Tambi\u00e9n podr\u00eda asignar una variable a esta ruta y utilizarla en la llamada. leer_pi.py 1 2 3 4 ruta_archivo = \"C: \\\\ Users \\\\ Downloads \\\\ num_pi.txt\" with open ( ruta_archivo ) as file_object : contenido = file_object . read () print ( contenido ) Ruta de archivo En la ruta de archivo, habr\u00e1 observado que se utilizan barras dobles (\\\\) en lugar de una barra simple (\\) como de costumbre. La barra simple se utiliza en Python para introducir algun caracter especial, como \\n para un salto de l\u00ednea. Por este motivo se deben utilizar dobles en la ruta de archivo. Si lo desea, para evitar esto puede utilizar barras hacia delante (/) para indicar la ruta. L\u00ednea a l\u00ednea Si desea examinar cada l\u00ednea al leer un archivo, puede incluir un bucle for en el objeto del archivo. leer_pi.py 1 2 3 4 archivo = \"num_pi.txt\" # Asignamos el nombre del archivo a una variable with open ( archivo ) as file_object : for linea in file_object : print ( linea ) Esto dar\u00e1 como resultado la siguiente salida: 3.1415926535 8979323846 De nuevo, puede utilizar rstrip() en la funci\u00f3n print() para eliminar las l\u00edneas en blanco. Acciones Crear una lista Podemos guardar todas las l\u00edneas que componen un archivo en una lista, para poder trabajar con esta como hemos visto a lo largo del tutorial. A continuaci\u00f3n se muestra c\u00f3mo crear esta lista e imprimirla. lista_pi.py 1 2 3 4 5 6 archivo = \"num_pi.txt\" with open ( archivo ) as file_object : lineas = file_object . readlines () for linea in lineas : print ( linea . rstrip ()) El m\u00e9todo utilizado readlines() lee cada l\u00ednea de un archivo y la almacena en una lista. Crear una cadena Imagine que est\u00e1 trabajando con un archivo FASTA y desea crear una cadena con todos los caracteres, ya sean nucle\u00f3tidos o amino\u00e1cidos, para poder trabajar con esta cadena de forma sencilla. cadena_pi.py 1 2 3 4 5 6 archivo = \"num_pi.txt\" with open ( archivo ) as file_object : lineas = file_object . readlines () cadena_pi = \"\" #Creamos una variable para almacenar los caracteres for linea in lineas : cadena_pi += linea . rstrip () Si imprime esta cadena, el resultado ser\u00e1 el siguiente: 3.1415926535 8979323846 Para eliminar el espacio en blanco, en lugar de rstrip() debe utilizar strip() . Ya tiene almacenados todos los caracteres en una cadena, y puede trabajar con la misma. 1 2 longitud = len ( cadena_pi ) print ( longitud ) 1 2 3 4 5 fragmento_problema = \"99843\" if fragmento_problema in cadena_pi : print ( \"El fragmento aparece.\" ) else : print ( \"El fragmento no aparece.\" ) Escribir Si desea escribir texto en un archivo .txt vac\u00edo, debe indic\u00e1rselo a Python en la funci\u00f3n open() . escribir_archivo.py 1 2 3 archivo = \"nuevo_archivo.txt\" with open ( archivo , \"w\" ) as file_object : file_object . write ( \"\u00a1Estoy escribiendo un archivo!\" ) \"w\" Podemos abrir el archivo en modo escritura \"w\" , lectura \"r\" (por defecto), anexo \"a\" y lectura-escritura \"r+\" . Importar/Exportar datos Python soporta una gran variedad de archivos de datos, aunque a continuaci\u00f3n se ense\u00f1ar\u00e1 a importar los tipos de archivos de datos m\u00e1s empleados: .txt , con los que se ha ense\u00f1ado previamente a trabajar; y .csv . Las siglas CSV vienen del ingl\u00e9s \"Comma Separated Values\" , siendo valores separados por comas. NumPy Una de las librer\u00edas disponibles para el manejo de datos es NumPy . NumPy es una librer\u00eda de Python especializada en el c\u00e1lculo num\u00e9rico y el an\u00e1lisis de datos, principalmente en la operaci\u00f3n con funciones matem\u00e1ticas. Para importar un archivo .txt : 1 2 3 import numpy as np datos = np . loadtxt ( \"archivo.txt\" , delimiter = \",\" ) #El delimitador por defecto es un espacio en blanco Si el archivo contiene cabecera, podemos saltar esta fila con skyprows = () , y para trabajar con columnas utilizamos el argumento usecols = [ ] . Si nuestro archivo contiene valores no num\u00e9ricos , utilizaremos loadtxt() astype(str) . MJ: \u00bfte falta algo en las palabras de antes? 1 2 3 4 import numpy as np datos = np . loadtxt ( \"archivo.txt\" , delimiter = \",\" , skiprows = 1 , usecols = [ 0 , 1 ]) . astype ( str ) #Importa las columnas 1 y 2 del archivo.txt, delimitadas por coma, eliminando la primera fila de cabecera. # Una de estas columnas contiene valores no num\u00e9ricos. En el siguiente enlace puede encontrar m\u00e1s funciones que le ser\u00e1n \u00fatiles. Para importar un archivo .csv : 1 2 import numpy as np datos = np . recfromcsv ( \"datos.csv\" ) Pandas La librer\u00eda Pandas ayuda a llevar a cabo todo el trabajo de an\u00e1lisis de datos en Python de una forma fluida y r\u00e1pida. En este caso los datos importados se almacenan en un dataframe , que no es m\u00e1s que un conjunto de observaciones y variables (muy empleado en lenguajes como R). Para importar un archivo .csv : 1 2 import pandas as pd dataframe = pd . read_csv ( \"datos.csv\" ) Al igual que con NumPy, se pueden incluir argumentos como nrows = () , que limita el n\u00famero de filas; funciones como head() y tail() , que limita la visualizaci\u00f3n de datos... Puede encontrar una gu\u00eda ampliada en el siguiente enlace . En la exportaci\u00f3n de datos se trabaja de forma muy similar a la importaci\u00f3n. Para exportar los datos a un archivo .csv le recomendamos emplear Pandas , ya que resulta realmente f\u00e1cil y r\u00e1pido: 1 2 import pandas as pd df . to_csv ( \"archivo.csv\" ) Otros archivos De forma similar a como se trabaja con archivos .csv. , con Pandas puede trabajar con archivos de diferentes extensiones. A continuaci\u00f3n se muestran algunas funciones que le pueden resultar de utilidad. FORMATO IMPORTAR EXPORTAR csv pd.read_csv() df.to_csv() json pd.read_json() df.to_json() excel pd.read_excel() df.to_excel() sql pd.read_sql() df.to_sql() Por \u00faltimo, hacer menci\u00f3n a los pickles en Python. El m\u00f3dulo pickle permite serializar y deserializar una estructura de objetos; en otras palabras, transformarla en una cadena de bytes que puede ser empaquetada en un archivo, y desempaquetada despu\u00e9s para trabajar con su contenido. Los archivos pickles en Python se pueden utilizar para una gran cantidad de prop\u00f3sitos, destacando la creaci\u00f3n de copias de seguridad, y para utilizarlos debemos importar el m\u00f3dulo Pickle . 1 import pickle A continuaci\u00f3n se muestra c\u00f3mo convertir a pickle una lista (empaquetar): 1 2 3 4 5 import pickle lista = [ 1 , 2 , 3 , 4 ] fichero = open ( \"lista.pckl\" , \"w\" ) #Creaci\u00f3n del fichero pickle . dump ( lista , fichero ) #Escribe la colecci\u00f3n en el fichero fichero . close () Una vez escrita esta colecci\u00f3n, veamos como leerla (desempaquetar): 1 2 3 4 import pickle fichero = open ( \"lista.pckl\" , \"rb\" ) fichero_lista = pickle . load ( fichero ) print ( lista_fichero ) En el siguiente v\u00eddeo puede profundizar sobre la el m\u00f3dulo pickle y la serializaci\u00f3n. Enlaces de inter\u00e9s Aprende Python. Sergio Delgado Quintero (2022). Importar y Guardar datos en Python con Pandas. Pro Ciencia.","title":"Archivos y datos"},{"location":"8_ArchivosyDatos/#trabajar-con-un-archivo","text":"","title":"Trabajar con un archivo"},{"location":"8_ArchivosyDatos/#lectura","text":"Para poder aprender a trabajar con un archivo de texto ( .txt ), necesitar\u00e1 crear uno utilizando el editor de texto que desee o el propio IDE. Es fundamental que almacene este archivo en el mismo directorio donde est\u00e9 trabajando. A continuaci\u00f3n le proponemos un ejemplo, en este caso un archivo que contiene el n\u00famero pi (10 decimales por l\u00ednea). num_pi.txt 3.1415926535 8979323846 Una vez creado el archivo, veamos c\u00f3mo abrirlo e imprimir el contenido en la pantalla en un archivo .py . leer_pi.py 1 2 3 with open ( \"num_pi.txt\" ) as file_object : contenido = file_object . read () print ( contenido ) Funci\u00f3n open() . Le indica a Python qu\u00e9 archivo deseamos abrir, busc\u00e1ndolo en el mismo directorio que leer_pi.py . File_object . La funci\u00f3n open () devuelve un objeto, que lo asignaremos a esta variable. Funci\u00f3n read() . Lee todo el contenido del archivo y lo guarda como una cadena denominada contenido . Una vez creada la cadena, la imprimimos por pantalla. Eliminar l\u00ednea en blanco Se habr\u00e1 dado cuenta que al final de la salida se muestra una l\u00ednea en blanco que no estaba en el archivo original. Si la quiere eliminar, utilice rstrip() al utilizar la funci\u00f3n print() . Aunque existe probabilidad de que su archivo .txt se encuentre en el mismo directorio de trabajo, normalmente estar\u00e1 en otro diferente. Para que Python pueda abrir y leer archivos de un directorio distinto, debe incluir la ruta de archivo . leer_pi.py 1 2 3 with open ( \"C: \\\\ Users \\\\ Downloads \\\\ num_pi.txt\" ) as file_object : contenido = file_object . read () print ( contenido ) Tambi\u00e9n podr\u00eda asignar una variable a esta ruta y utilizarla en la llamada. leer_pi.py 1 2 3 4 ruta_archivo = \"C: \\\\ Users \\\\ Downloads \\\\ num_pi.txt\" with open ( ruta_archivo ) as file_object : contenido = file_object . read () print ( contenido ) Ruta de archivo En la ruta de archivo, habr\u00e1 observado que se utilizan barras dobles (\\\\) en lugar de una barra simple (\\) como de costumbre. La barra simple se utiliza en Python para introducir algun caracter especial, como \\n para un salto de l\u00ednea. Por este motivo se deben utilizar dobles en la ruta de archivo. Si lo desea, para evitar esto puede utilizar barras hacia delante (/) para indicar la ruta.","title":"Lectura"},{"location":"8_ArchivosyDatos/#linea-a-linea","text":"Si desea examinar cada l\u00ednea al leer un archivo, puede incluir un bucle for en el objeto del archivo. leer_pi.py 1 2 3 4 archivo = \"num_pi.txt\" # Asignamos el nombre del archivo a una variable with open ( archivo ) as file_object : for linea in file_object : print ( linea ) Esto dar\u00e1 como resultado la siguiente salida: 3.1415926535 8979323846 De nuevo, puede utilizar rstrip() en la funci\u00f3n print() para eliminar las l\u00edneas en blanco.","title":"L\u00ednea a l\u00ednea"},{"location":"8_ArchivosyDatos/#acciones","text":"","title":"Acciones"},{"location":"8_ArchivosyDatos/#crear-una-lista","text":"Podemos guardar todas las l\u00edneas que componen un archivo en una lista, para poder trabajar con esta como hemos visto a lo largo del tutorial. A continuaci\u00f3n se muestra c\u00f3mo crear esta lista e imprimirla. lista_pi.py 1 2 3 4 5 6 archivo = \"num_pi.txt\" with open ( archivo ) as file_object : lineas = file_object . readlines () for linea in lineas : print ( linea . rstrip ()) El m\u00e9todo utilizado readlines() lee cada l\u00ednea de un archivo y la almacena en una lista.","title":"Crear una lista"},{"location":"8_ArchivosyDatos/#crear-una-cadena","text":"Imagine que est\u00e1 trabajando con un archivo FASTA y desea crear una cadena con todos los caracteres, ya sean nucle\u00f3tidos o amino\u00e1cidos, para poder trabajar con esta cadena de forma sencilla. cadena_pi.py 1 2 3 4 5 6 archivo = \"num_pi.txt\" with open ( archivo ) as file_object : lineas = file_object . readlines () cadena_pi = \"\" #Creamos una variable para almacenar los caracteres for linea in lineas : cadena_pi += linea . rstrip () Si imprime esta cadena, el resultado ser\u00e1 el siguiente: 3.1415926535 8979323846 Para eliminar el espacio en blanco, en lugar de rstrip() debe utilizar strip() . Ya tiene almacenados todos los caracteres en una cadena, y puede trabajar con la misma. 1 2 longitud = len ( cadena_pi ) print ( longitud ) 1 2 3 4 5 fragmento_problema = \"99843\" if fragmento_problema in cadena_pi : print ( \"El fragmento aparece.\" ) else : print ( \"El fragmento no aparece.\" )","title":"Crear una cadena"},{"location":"8_ArchivosyDatos/#escribir","text":"Si desea escribir texto en un archivo .txt vac\u00edo, debe indic\u00e1rselo a Python en la funci\u00f3n open() . escribir_archivo.py 1 2 3 archivo = \"nuevo_archivo.txt\" with open ( archivo , \"w\" ) as file_object : file_object . write ( \"\u00a1Estoy escribiendo un archivo!\" ) \"w\" Podemos abrir el archivo en modo escritura \"w\" , lectura \"r\" (por defecto), anexo \"a\" y lectura-escritura \"r+\" .","title":"Escribir"},{"location":"8_ArchivosyDatos/#importarexportar-datos","text":"Python soporta una gran variedad de archivos de datos, aunque a continuaci\u00f3n se ense\u00f1ar\u00e1 a importar los tipos de archivos de datos m\u00e1s empleados: .txt , con los que se ha ense\u00f1ado previamente a trabajar; y .csv . Las siglas CSV vienen del ingl\u00e9s \"Comma Separated Values\" , siendo valores separados por comas.","title":"Importar/Exportar datos"},{"location":"8_ArchivosyDatos/#numpy","text":"Una de las librer\u00edas disponibles para el manejo de datos es NumPy . NumPy es una librer\u00eda de Python especializada en el c\u00e1lculo num\u00e9rico y el an\u00e1lisis de datos, principalmente en la operaci\u00f3n con funciones matem\u00e1ticas. Para importar un archivo .txt : 1 2 3 import numpy as np datos = np . loadtxt ( \"archivo.txt\" , delimiter = \",\" ) #El delimitador por defecto es un espacio en blanco Si el archivo contiene cabecera, podemos saltar esta fila con skyprows = () , y para trabajar con columnas utilizamos el argumento usecols = [ ] . Si nuestro archivo contiene valores no num\u00e9ricos , utilizaremos loadtxt() astype(str) . MJ: \u00bfte falta algo en las palabras de antes? 1 2 3 4 import numpy as np datos = np . loadtxt ( \"archivo.txt\" , delimiter = \",\" , skiprows = 1 , usecols = [ 0 , 1 ]) . astype ( str ) #Importa las columnas 1 y 2 del archivo.txt, delimitadas por coma, eliminando la primera fila de cabecera. # Una de estas columnas contiene valores no num\u00e9ricos. En el siguiente enlace puede encontrar m\u00e1s funciones que le ser\u00e1n \u00fatiles. Para importar un archivo .csv : 1 2 import numpy as np datos = np . recfromcsv ( \"datos.csv\" )","title":"NumPy"},{"location":"8_ArchivosyDatos/#pandas","text":"La librer\u00eda Pandas ayuda a llevar a cabo todo el trabajo de an\u00e1lisis de datos en Python de una forma fluida y r\u00e1pida. En este caso los datos importados se almacenan en un dataframe , que no es m\u00e1s que un conjunto de observaciones y variables (muy empleado en lenguajes como R). Para importar un archivo .csv : 1 2 import pandas as pd dataframe = pd . read_csv ( \"datos.csv\" ) Al igual que con NumPy, se pueden incluir argumentos como nrows = () , que limita el n\u00famero de filas; funciones como head() y tail() , que limita la visualizaci\u00f3n de datos... Puede encontrar una gu\u00eda ampliada en el siguiente enlace . En la exportaci\u00f3n de datos se trabaja de forma muy similar a la importaci\u00f3n. Para exportar los datos a un archivo .csv le recomendamos emplear Pandas , ya que resulta realmente f\u00e1cil y r\u00e1pido: 1 2 import pandas as pd df . to_csv ( \"archivo.csv\" )","title":"Pandas"},{"location":"8_ArchivosyDatos/#otros-archivos","text":"De forma similar a como se trabaja con archivos .csv. , con Pandas puede trabajar con archivos de diferentes extensiones. A continuaci\u00f3n se muestran algunas funciones que le pueden resultar de utilidad. FORMATO IMPORTAR EXPORTAR csv pd.read_csv() df.to_csv() json pd.read_json() df.to_json() excel pd.read_excel() df.to_excel() sql pd.read_sql() df.to_sql() Por \u00faltimo, hacer menci\u00f3n a los pickles en Python. El m\u00f3dulo pickle permite serializar y deserializar una estructura de objetos; en otras palabras, transformarla en una cadena de bytes que puede ser empaquetada en un archivo, y desempaquetada despu\u00e9s para trabajar con su contenido. Los archivos pickles en Python se pueden utilizar para una gran cantidad de prop\u00f3sitos, destacando la creaci\u00f3n de copias de seguridad, y para utilizarlos debemos importar el m\u00f3dulo Pickle . 1 import pickle A continuaci\u00f3n se muestra c\u00f3mo convertir a pickle una lista (empaquetar): 1 2 3 4 5 import pickle lista = [ 1 , 2 , 3 , 4 ] fichero = open ( \"lista.pckl\" , \"w\" ) #Creaci\u00f3n del fichero pickle . dump ( lista , fichero ) #Escribe la colecci\u00f3n en el fichero fichero . close () Una vez escrita esta colecci\u00f3n, veamos como leerla (desempaquetar): 1 2 3 4 import pickle fichero = open ( \"lista.pckl\" , \"rb\" ) fichero_lista = pickle . load ( fichero ) print ( lista_fichero ) En el siguiente v\u00eddeo puede profundizar sobre la el m\u00f3dulo pickle y la serializaci\u00f3n. Enlaces de inter\u00e9s Aprende Python. Sergio Delgado Quintero (2022). Importar y Guardar datos en Python con Pandas. Pro Ciencia.","title":"Otros archivos"},{"location":"9_Graficacion/","text":"Para hacer gr\u00e1ficas en Python existen una gran cantidad de librer\u00edas disponibles, como Numpy , vista anteriormente para el tratamiento de datos. Aunque hay un amplio abanico de opciones, sin duda la m\u00e1s utilizada por todo el \u00e1mbito cient\u00edfico es matplotlib . \u00bfQu\u00e9 es matplotlib? Matplotlib es una biblioteca completa para crear visualizaciones est\u00e1ticas, animadas e interactivas en Python. Aunque con el tiempo ha sido superada visualmente por otras librer\u00edas m\u00e1s atractivas e interactivas ( seaborn o ggplot2 ), el conocimiento y empleo de esta librer\u00eda sigue siendo el m\u00e1s extendido. El paquete matplotlib es relativamente grande y complejo, y entre otros contiene dos m\u00f3dulos principales: pyplot y pylab . pyplot . Esta interfaz generalmente se prefiere para la graficaci\u00f3n no interactiva (es decir, secuencias de comandos). pylab . Esta interfaz es conveniente para c\u00e1lculos y graficaci\u00f3n interactiva, ya que minimiza la escritura. Utiliza funcionalidades combinadas de pyplot y NumPy . Instalaci\u00f3n En primer lugar debe instalar el paquete matplotlib . Para ello, como se explic\u00f3 en el apartado PyCharm , vaya a la ventana de Python Packages e inst\u00e1lelo. Instalaci\u00f3n del paquete matplotlib Otra opci\u00f3n ser\u00eda utilizar el siguiente comando en la consola: pip install matplotlib Importaci\u00f3n Para usar la interfaz de matplotlib existen dos formas posibles, en funci\u00f3n del m\u00f3dulo que desea emplear: 1 2 3 4 5 #Para importar el m\u00f3dulo pylab from pylab import * #Para importar el m\u00f3dulo pyplot import matplotlib.pyplot as plt En nuestro caso vamos a utilizar el m\u00f3dulo pyplot , as\u00ed que debe utilizar la \u00faltima forma. En el tutorial se va a omitir la importaci\u00f3n del m\u00f3dulo para evitar la repetici\u00f3n constante, aunque no olvide que es fundamental. Creaci\u00f3n de figuras Funci\u00f3n plot La funci\u00f3n m\u00e1s simple para crear una figura es la funci\u00f3n plot . Esta crea de forma autom\u00e1tica la figura y el conjunto de ejes, representando los datos utilizados como argumentos. 1 2 3 4 x = [ 1 , 3 , 5 , 7 ] y = [ 1 , 5 , 10 , 15 ] plt . plot ( x , y ) plt . show () Como puede observar, esta funci\u00f3n recibe un conjunto de valores x e y , y los muestra en una figura de l\u00edneas. Al final del argumento es fundamental utilizar la funci\u00f3n plt.show() para que el resultado se muestre como una imagen, que la aparecer\u00e1 en una ventana diferente de PyCharm. Si desea mostrar en una misma figura varias gr\u00e1ficas, debe utilizar la funci\u00f3n plot las veces que sean necesarias antes que la funci\u00f3n show. Veamos un ejemplo: 1 2 3 4 5 6 7 x = [ 1 , 3 , 5 , 7 ] y = [ 1 , 5 , 10 , 15 ] a = [ 1 , 3 , 5 , 7 ] b = [ 3 , 6 , 2 , 5 ] plt . plot ( x , y ) plt . plot ( a , b ) plt . show () Datos aleatorios Para practicar en la creaci\u00f3n de gr\u00e1ficas, lo mejor es utilizar una serie de datos aleatorios. Para esto puede utilizar NumPy de la siguiente forma: 1 2 3 import numpy as np x = np . random . randn ( 25 ) . cumsum () #25 n\u00fameros aleatorios del 0 al 25 # Al asignar solo el eje x, se asigna un conjunto aleatorio a y. Formato a la gr\u00e1fica Para modificar el estilo de las l\u00edneas de la gr\u00e1fica utilice el par\u00e1metro linestyle . Como ha visto, por defecto es una l\u00ednea continua, aunque puede cambiarlo por ejemplo por una l\u00ednea discontinua: 1 2 3 x = np . random . randn ( 25 ) . cumsum () plt . plot ( x , linestyle = \"--\" ) plt . show () En el argumento, en lugar de utilizar \"--\" pruebe otros como \"-.\", \"dashdot\", \".\", \"dotted\". Tambi\u00e9n puede modificar el ancho de las l\u00edneas con el par\u00e1metro linewidth , mostrar los puntos que unidos por l\u00edneas con el par\u00e1metro marker y modificar el tama\u00f1o de estos puntos con el par\u00e1metro markersize . 1 2 3 x = np . random . randn ( 25 ) . cumsum () plt . plot ( x , linewidth = 3 , marker = \"o\" , markersize = \"7\" ) plt . show () Existen una gran cantidad de marcadores posibles en lugar del cl\u00e1sico punto. Puede encontrar una lista en el siguiente enlace . Personalizaci\u00f3n del marcador Al igual que markersize, existen una serie de par\u00e1metros que permiten modificar el marcador. Si le interesa, busque informaci\u00f3n acerca de la funci\u00f3n y empleo de estos par\u00e1metros. Destacan: markeredgewidth , markeredgecolor y markerfacecoloralt . A estas alturas del apartado, seguro que se ha preguntado c\u00f3mo cambiar el color de las gr\u00e1ficas. El par\u00e1metro color es el utilizado para esto, y admite varios formatos: Utilizar el nombre : \"blue\", \"orange\", \"green\"... Utilizar el car\u00e1cter asociado al color: \"b\", \"o\", \"g\"... Utilizar la cadena de texto asociado al color: \"FF0000\", \"008000\"... Color web . 1 2 3 x = np . random . randn ( 25 ) . cumsum () plt . plot ( x , linewidth = 3 , color = \"red\" ) plt . show () Como sabe, es fundamental que una gr\u00e1fica muestre una leyenda indicando qu\u00e9 representa. Para ello debe utilizar el par\u00e1metro label y la funci\u00f3n legend : 1 2 3 4 x = np . random . randn ( 25 ) . cumsum () plt . plot ( x , color = \"blue\" , label = \"Gr\u00e1fica 1\" ) plt . legend () plt . show () Con la funci\u00f3n plot se crean tanto una figura como un conjunto de ejes, aunque la funci\u00f3n no nos permite personalizarlos. Como alternativa a esta funci\u00f3n, existe una funci\u00f3n que permiten mayor grado de personalizaci\u00f3n y que es combinable con la funci\u00f3n plot: Funci\u00f3n subplots . Funci\u00f3n subplots La funci\u00f3n subplots devuelve una referencia a la figura y al conjunto de ejes, creando por defecto un \u00fanico conjunto de ejes si no se especifica. Veamos c\u00f3mo se emplea esta funci\u00f3n: 1 2 3 x = np . random . randn ( 25 ) . cumsum () fig , ax = plt . subplots ( 2 , 2 ) #Indicamos una matriz de 2 filas y 2 columnas plt . show () De esta forma se han creado cuatro conjuntos de ejes (una matriz 2x2). Ahora podr\u00edamos utilizar la funci\u00f3n plot asociada a cada uno de estos ejes de forma independiente: 1 2 3 4 x = np . random . randn ( 25 ) . cumsum () fig , ax = plt . subplots ( 2 , 2 , sharey = True , sharex = True ) ax [ 1 , 0 ] . plot ( x ) #Se representa en la fila 2 columna 1. plt . show () Las funciones sharey y sharex en True indican que todos los conjuntos compartan los mismos ejes Formato a la figura T\u00edtulo . Para insertar un t\u00edtulo a la figura se utiliza la funci\u00f3n title . 1 2 3 4 5 6 x = np . random . randn ( 25 ) . cumsum () fig , ax = plt . subplots () ax . plot ( x , linewidth = 3 , color = \"red\" , label = \"Gr\u00e1fica 1\" ) plt . legend () plt . title ( \"T\u00edtulo de ejemplo\" ) plt . show () Este t\u00edtulo permite un amplio grado de personalizaci\u00f3n, consulte el siguiente enlace para obtener m\u00e1s informaci\u00f3n. 1 2 3 4 5 x = np . random . randn ( 25 ) . cumsum () fig , ax = plt . subplots () ax . plot ( x , linewidth = 2 , color = \"black\" , marker = \"o\" , markersize = 5 ) plt . title ( \"T\u00cdTULO\" , position = ( 0.1 , 0.85 ), color = \"blue\" , fontsize = 25 , fontweight = \"bold\" ) plt . show () Etiquetas de ejes . Para a\u00f1adir etiquetas a los ejes utilice la funci\u00f3n xlabel y funci\u00f3n ylabel . 1 2 3 4 5 6 7 x = np . random . randn ( 25 ) . cumsum () fig , ax = plt . subplots () ax . plot ( x , linewidth = 3 , color = \"blue\" , marker = \"o\" , markersize = 5 ) plt . title ( \"T\u00edtulo de ejemplo\" ) plt . xlabel ( \"T\u00edtulo eje X\" , color = \"black\" , fontweight = \"bold\" ) plt . ylabel ( \"T\u00edtulo eje Y\" , color = \"black\" , fontweight = \"bold\" ) plt . show () Estas funciones nos permiten utilizar atributos adicionales similares a los utilizados en la funci\u00f3n title . Marcas de ejes . Existen diferentes formas de cambiar los valores de los ejes. Una de las m\u00e1s \u00fatiles es la funci\u00f3n xticks y funci\u00f3n yticks . 1 2 3 4 5 6 x = np . random . randn ( 25 ) . cumsum () fig , ax = plt . subplots () ax . plot ( x , linewidth = 3 , color = \"orange\" , marker = \"o\" , markersize = 5 ) plt . xticks ( range ( 0 , 25 , 5 )) #Se ha limitado el eje X de 0 hasta 25, con saltos de 5 unidades. plt . show () Marcas de los ejes Otra funci\u00f3n muy utiilzada para cambiar los valores de los ejes es la funci\u00f3n lim . Puede buscar informaci\u00f3n acerca de ella, aunque se utiliza de forma muy similar a la funci\u00f3n ticks . Grid/Rejilla . En muchas ocasiones necesitar\u00e1 mostrar la rejilla en la figura para que sea m\u00e1s f\u00e1cil la visualizaci\u00f3n de los datos. Para ello utilice la funci\u00f3n grid . Ejemplo resumen A continuaci\u00f3n se muestra un ejemplo que combina la mayor\u00eda de los elementos vistos hasta el momento. 1 2 3 4 5 6 7 8 9 10 11 x = np . random . randn ( 25 ) . cumsum () y = np . random . randn ( 25 ) . cumsum () fig , ax = plt . subplots () ax . plot ( x , linewidth = 1 , color = \"blue\" , marker = \"o\" , markersize = 4 , label = \"Figura 1\" ) ax . plot ( y , linestyle = \"dotted\" , linewidth = 2 , color = \"red\" , label = \"Figura 2\" ) plt . title ( \"Gr\u00e1fica 1\" , color = \"black\" , fontsize = 15 , fontweight = \"bold\" ) plt . xlabel ( \"T\u00edtulo eje X\" , color = \"black\" , fontsize = 12 , fontweight = \"bold\" ) plt . ylabel ( \"T\u00edtulo eje Y\" , color = \"black\" , fontsize = 12 , fontweight = \"bold\" ) ax . grid () plt . legend () plt . show () Otras figuras Hasta el momento se ha trabajado con figuras de l\u00edneas, aunque Matplotlib permite trabajar con muchas m\u00e1s figuras. Tenga en cuenta que muchos de los atributos y par\u00e1metros vistos hasta el momento con la funci\u00f3n plot se emplean del mismo modo. Scatter/Dispersi\u00f3n . Para crear un gr\u00e1fico de dispersi\u00f3n utilice la funci\u00f3n scatter . 1 2 3 4 5 6 7 x = np . random . randn ( 25 ) . cumsum () y = np . random . randn ( 25 ) . cumsum () fig , ax = plt . subplots () ax . scatter ( x , y , linewidth = 1 , color = \"red\" , marker = \"o\" ) plt . title ( \"Gr\u00e1fico de dispersi\u00f3n\" , color = \"black\" , fontsize = 15 , fontweight = \"bold\" ) ax . grid () plt . show () \u00c1reas . Para crear un gr\u00e1fico de \u00e1reas utilice la funci\u00f3n fill_between . 1 2 3 4 5 6 x = [ 1 , 2 , 3 , 4 ] y = [ 1 , 2 , 0 , 2 ] fig , ax = plt . subplots () ax . fill_between ( x , y , linewidth = 1 , color = \"red\" ) plt . title ( \"Diagrama de \u00e1reas\" , color = \"black\" , fontsize = 15 , fontweight = \"bold\" ) plt . show () Barras . Para crear un gr\u00e1fico de barras utilice la funci\u00f3n bar . 1 2 3 4 5 6 x = [ 1 , 2 , 3 , 4 ] y = [ 1 , 2 , 7 , 5 ] fig , ax = plt . subplots () ax . bar ( x , y , linewidth = 1 , color = \"red\" ) plt . title ( \"Diagrama de barras\" , color = \"black\" , fontsize = 15 , fontweight = \"bold\" ) plt . show () Diagrama de barras Si desea un diagrama de barras horizontales en lugar de verticales, uticile la funci\u00f3n barh de forma similar a la funci\u00f3n bar . Histograma . Para crear un histograma utilice la funci\u00f3n hist . Dentro de un histograma, hay diferentes par\u00e1metros interesantes a modificar: bins : modificar el n\u00famero de barras de nuestro histograma. range : controla los valores m\u00ednimos y m\u00e1ximos en el histograma. orientation : puede tomar los valores horizontal o vertical , y determina la orientaci\u00f3n del histograma. 1 2 3 4 5 x = np . random . randn ( 1000 ) . cumsum () fig , ax = plt . subplots () ax . hist ( x , color = \"red\" , bins = 10 , range = ( - 5 , 5 ), orientation = \"horizontal\" ) plt . title ( \"Histograma\" , color = \"black\" , fontsize = 15 , fontweight = \"bold\" ) plt . show () Diagrama de sectores . Para crear un diagrama de sectores utilice la funci\u00f3n pie . Al igual que en el histograma, existen par\u00e1metros que debe manejar: Labels. Asocia los sectores a sus etiquetas correspondientes. Autopct. Muestra los porcentajes representados por cada sector. Pctdistance. Distancia del n\u00famero al centro del gr\u00e1fico. Colors. Permite especificar los colores de los sectores. 1 2 3 4 5 x = [ 5 , 3 , 10 , 8 ] nombre = [ \"Primero\" , \"Segundo\" , \"Tercero\" , \"Cuarto\" ] fig , ax = plt . subplots () ax . pie ( x , labels = nombre , autopct = \" %1.1f%% \" , pctdistance = 0.5 ) plt . title ( \"Diagrama sectores\" , color = \"black\" , fontsize = 15 , fontweight = \"bold\" ) Mapa de colores . Para crear un mapa de colores a partir de una matriz utilice la funci\u00f3n imshow . 1 2 3 4 5 6 x = np . random . random (( 15 , 15 )) #Observe c\u00f3mo cambia la entrada para obtener la matriz fig , ax = plt . subplots () ax . imshow ( x ) plt . title ( \"Mapa de color\" , color = \"black\" , fontsize = 15 , fontweight = \"bold\" ) plt . show () Exportaci\u00f3n de gr\u00e1ficas Despu\u00e9s de crear las figuras, Python nos permite diferentes modos para poder guardarlas: Desde PyCharm . Como habr\u00e1 observado, en todas las salidas de imagen aparece un bot\u00f3n para poder guardar las figuras. savefig() . Desde la propia l\u00ednea de comandos se puede guardar la imagen en el directorio de trabajo o en otro directorio espec\u00edfico: 1 2 3 4 #Para guardar la figura en el directorio de trabajo plt . savefig ( \"Figura_1.png\" ) #Para guardar la figura en otro directorio plt . savefig ( \"C:/Ruta/Figura_1.png\" ) imsave() . Se usa de forma similar al anterior. Indica si hay alguna diferencia de comportamiento respecto al anterior Gr\u00e1ficas avanzadas Las figuras vistas hasta el momento son figuras 2D, aunque matplotlib nos permite tambi\u00e9n crear figuras 3D. A continuaci\u00f3n se muestra un ejemplo de este tipo de gr\u00e1ficas, de las que puede profundizar en el siguiente enlace . 1 2 3 4 5 6 7 import matplotlib.pyplot as plt import numpy as np from mpl_toolkits import mplot3d #Este subm\u00f3dulo permite crear los ejes 3D fig = plt . figure () #Creaci\u00f3n de la figura ax = plt . axes ( projection = \"3d\" ) #Creaci\u00f3n de los ejes plt . show () 1 2 3 4 5 6 7 8 9 10 11 12 import matplotlib.pyplot as plt import numpy as np from mpl_toolkits import mplot3d fig = plt . figure () ax = plt . axes ( projection = \"3d\" ) #Datos para crear una gr\u00e1fica de dispersi\u00f3n x = np . random . normal ( 10 , 100 , 500 ) y = np . random . normal ( 10 , 100 , 500 ) z = np . random . normal ( 10 , 100 , 500 ) scatter = ax . scatter3D ( x , y , z ) plt . show () 1 2 3 4 5 6 7 8 9 10 11 12 13 import matplotlib.pyplot as plt import numpy as np from mpl_toolkits import mplot3d fig = plt . figure () ax = plt . axes ( projection = \"3d\" ) #Datos para crear una gr\u00e1fica de l\u00edneas z = np . linspace ( 0 , 15 , 1000 ) #Esta funci\u00f3n genera un array Numpy entre 0 y 15 con 1000 n\u00fameros #Puede informarse acerca de la funci\u00f3n linspace() y logspace() x = np . sin ( z ) y = np . cos ( z ) ax . plot3D ( x , y , z , \"red\" ) plt . show () Ejercicios En este apartado de ejercicios le vamos a introducir a los cuadernos de Python . Como viene utilizando hasta el momento, la forma tradicional de crear un programa en Python es crear un archivo .py que almacene el c\u00f3digo fuente de dicho programa. En este caso, en lugar de utilizar esto utilizaremos un cuaderno de Google colab . Los cuadernos en lenguaje de programaci\u00f3n (normalmente conocidos como notebook ) permiten combinar texto y c\u00f3digo, siendo muy \u00fatiles para documentar nuestro trabajo a la vez que probamos c\u00f3digo f\u00e1cilmente. Otro de los cuadernos m\u00e1s utilizados en Python es Jupyter Notebook . A continuaci\u00f3n puede acceder a los ejercicios que se le plantean: Google Colab Notebook . Enlaces de inter\u00e9s Informaci\u00f3n acerca de Matplotlib. Matplotlib. John Hunter & the development team (2021). Informaci\u00f3n acerca de la graficaci\u00f3n 3D. Python Graphics: A Reference for Creating 2D and 3D Images . B.J. Korites (2018).","title":"Graficaci\u00f3n"},{"location":"9_Graficacion/#que-es-matplotlib","text":"Matplotlib es una biblioteca completa para crear visualizaciones est\u00e1ticas, animadas e interactivas en Python. Aunque con el tiempo ha sido superada visualmente por otras librer\u00edas m\u00e1s atractivas e interactivas ( seaborn o ggplot2 ), el conocimiento y empleo de esta librer\u00eda sigue siendo el m\u00e1s extendido. El paquete matplotlib es relativamente grande y complejo, y entre otros contiene dos m\u00f3dulos principales: pyplot y pylab . pyplot . Esta interfaz generalmente se prefiere para la graficaci\u00f3n no interactiva (es decir, secuencias de comandos). pylab . Esta interfaz es conveniente para c\u00e1lculos y graficaci\u00f3n interactiva, ya que minimiza la escritura. Utiliza funcionalidades combinadas de pyplot y NumPy .","title":"\u00bfQu\u00e9 es matplotlib?"},{"location":"9_Graficacion/#instalacion","text":"En primer lugar debe instalar el paquete matplotlib . Para ello, como se explic\u00f3 en el apartado PyCharm , vaya a la ventana de Python Packages e inst\u00e1lelo. Instalaci\u00f3n del paquete matplotlib Otra opci\u00f3n ser\u00eda utilizar el siguiente comando en la consola: pip install matplotlib","title":"Instalaci\u00f3n"},{"location":"9_Graficacion/#importacion","text":"Para usar la interfaz de matplotlib existen dos formas posibles, en funci\u00f3n del m\u00f3dulo que desea emplear: 1 2 3 4 5 #Para importar el m\u00f3dulo pylab from pylab import * #Para importar el m\u00f3dulo pyplot import matplotlib.pyplot as plt En nuestro caso vamos a utilizar el m\u00f3dulo pyplot , as\u00ed que debe utilizar la \u00faltima forma. En el tutorial se va a omitir la importaci\u00f3n del m\u00f3dulo para evitar la repetici\u00f3n constante, aunque no olvide que es fundamental.","title":"Importaci\u00f3n"},{"location":"9_Graficacion/#creacion-de-figuras","text":"","title":"Creaci\u00f3n de figuras"},{"location":"9_Graficacion/#funcion-plot","text":"La funci\u00f3n m\u00e1s simple para crear una figura es la funci\u00f3n plot . Esta crea de forma autom\u00e1tica la figura y el conjunto de ejes, representando los datos utilizados como argumentos. 1 2 3 4 x = [ 1 , 3 , 5 , 7 ] y = [ 1 , 5 , 10 , 15 ] plt . plot ( x , y ) plt . show () Como puede observar, esta funci\u00f3n recibe un conjunto de valores x e y , y los muestra en una figura de l\u00edneas. Al final del argumento es fundamental utilizar la funci\u00f3n plt.show() para que el resultado se muestre como una imagen, que la aparecer\u00e1 en una ventana diferente de PyCharm. Si desea mostrar en una misma figura varias gr\u00e1ficas, debe utilizar la funci\u00f3n plot las veces que sean necesarias antes que la funci\u00f3n show. Veamos un ejemplo: 1 2 3 4 5 6 7 x = [ 1 , 3 , 5 , 7 ] y = [ 1 , 5 , 10 , 15 ] a = [ 1 , 3 , 5 , 7 ] b = [ 3 , 6 , 2 , 5 ] plt . plot ( x , y ) plt . plot ( a , b ) plt . show () Datos aleatorios Para practicar en la creaci\u00f3n de gr\u00e1ficas, lo mejor es utilizar una serie de datos aleatorios. Para esto puede utilizar NumPy de la siguiente forma: 1 2 3 import numpy as np x = np . random . randn ( 25 ) . cumsum () #25 n\u00fameros aleatorios del 0 al 25 # Al asignar solo el eje x, se asigna un conjunto aleatorio a y.","title":"Funci\u00f3n plot"},{"location":"9_Graficacion/#formato-a-la-grafica","text":"Para modificar el estilo de las l\u00edneas de la gr\u00e1fica utilice el par\u00e1metro linestyle . Como ha visto, por defecto es una l\u00ednea continua, aunque puede cambiarlo por ejemplo por una l\u00ednea discontinua: 1 2 3 x = np . random . randn ( 25 ) . cumsum () plt . plot ( x , linestyle = \"--\" ) plt . show () En el argumento, en lugar de utilizar \"--\" pruebe otros como \"-.\", \"dashdot\", \".\", \"dotted\". Tambi\u00e9n puede modificar el ancho de las l\u00edneas con el par\u00e1metro linewidth , mostrar los puntos que unidos por l\u00edneas con el par\u00e1metro marker y modificar el tama\u00f1o de estos puntos con el par\u00e1metro markersize . 1 2 3 x = np . random . randn ( 25 ) . cumsum () plt . plot ( x , linewidth = 3 , marker = \"o\" , markersize = \"7\" ) plt . show () Existen una gran cantidad de marcadores posibles en lugar del cl\u00e1sico punto. Puede encontrar una lista en el siguiente enlace . Personalizaci\u00f3n del marcador Al igual que markersize, existen una serie de par\u00e1metros que permiten modificar el marcador. Si le interesa, busque informaci\u00f3n acerca de la funci\u00f3n y empleo de estos par\u00e1metros. Destacan: markeredgewidth , markeredgecolor y markerfacecoloralt . A estas alturas del apartado, seguro que se ha preguntado c\u00f3mo cambiar el color de las gr\u00e1ficas. El par\u00e1metro color es el utilizado para esto, y admite varios formatos: Utilizar el nombre : \"blue\", \"orange\", \"green\"... Utilizar el car\u00e1cter asociado al color: \"b\", \"o\", \"g\"... Utilizar la cadena de texto asociado al color: \"FF0000\", \"008000\"... Color web . 1 2 3 x = np . random . randn ( 25 ) . cumsum () plt . plot ( x , linewidth = 3 , color = \"red\" ) plt . show () Como sabe, es fundamental que una gr\u00e1fica muestre una leyenda indicando qu\u00e9 representa. Para ello debe utilizar el par\u00e1metro label y la funci\u00f3n legend : 1 2 3 4 x = np . random . randn ( 25 ) . cumsum () plt . plot ( x , color = \"blue\" , label = \"Gr\u00e1fica 1\" ) plt . legend () plt . show () Con la funci\u00f3n plot se crean tanto una figura como un conjunto de ejes, aunque la funci\u00f3n no nos permite personalizarlos. Como alternativa a esta funci\u00f3n, existe una funci\u00f3n que permiten mayor grado de personalizaci\u00f3n y que es combinable con la funci\u00f3n plot: Funci\u00f3n subplots .","title":"Formato a la gr\u00e1fica"},{"location":"9_Graficacion/#funcion-subplots","text":"La funci\u00f3n subplots devuelve una referencia a la figura y al conjunto de ejes, creando por defecto un \u00fanico conjunto de ejes si no se especifica. Veamos c\u00f3mo se emplea esta funci\u00f3n: 1 2 3 x = np . random . randn ( 25 ) . cumsum () fig , ax = plt . subplots ( 2 , 2 ) #Indicamos una matriz de 2 filas y 2 columnas plt . show () De esta forma se han creado cuatro conjuntos de ejes (una matriz 2x2). Ahora podr\u00edamos utilizar la funci\u00f3n plot asociada a cada uno de estos ejes de forma independiente: 1 2 3 4 x = np . random . randn ( 25 ) . cumsum () fig , ax = plt . subplots ( 2 , 2 , sharey = True , sharex = True ) ax [ 1 , 0 ] . plot ( x ) #Se representa en la fila 2 columna 1. plt . show () Las funciones sharey y sharex en True indican que todos los conjuntos compartan los mismos ejes","title":"Funci\u00f3n subplots"},{"location":"9_Graficacion/#formato-a-la-figura","text":"T\u00edtulo . Para insertar un t\u00edtulo a la figura se utiliza la funci\u00f3n title . 1 2 3 4 5 6 x = np . random . randn ( 25 ) . cumsum () fig , ax = plt . subplots () ax . plot ( x , linewidth = 3 , color = \"red\" , label = \"Gr\u00e1fica 1\" ) plt . legend () plt . title ( \"T\u00edtulo de ejemplo\" ) plt . show () Este t\u00edtulo permite un amplio grado de personalizaci\u00f3n, consulte el siguiente enlace para obtener m\u00e1s informaci\u00f3n. 1 2 3 4 5 x = np . random . randn ( 25 ) . cumsum () fig , ax = plt . subplots () ax . plot ( x , linewidth = 2 , color = \"black\" , marker = \"o\" , markersize = 5 ) plt . title ( \"T\u00cdTULO\" , position = ( 0.1 , 0.85 ), color = \"blue\" , fontsize = 25 , fontweight = \"bold\" ) plt . show () Etiquetas de ejes . Para a\u00f1adir etiquetas a los ejes utilice la funci\u00f3n xlabel y funci\u00f3n ylabel . 1 2 3 4 5 6 7 x = np . random . randn ( 25 ) . cumsum () fig , ax = plt . subplots () ax . plot ( x , linewidth = 3 , color = \"blue\" , marker = \"o\" , markersize = 5 ) plt . title ( \"T\u00edtulo de ejemplo\" ) plt . xlabel ( \"T\u00edtulo eje X\" , color = \"black\" , fontweight = \"bold\" ) plt . ylabel ( \"T\u00edtulo eje Y\" , color = \"black\" , fontweight = \"bold\" ) plt . show () Estas funciones nos permiten utilizar atributos adicionales similares a los utilizados en la funci\u00f3n title . Marcas de ejes . Existen diferentes formas de cambiar los valores de los ejes. Una de las m\u00e1s \u00fatiles es la funci\u00f3n xticks y funci\u00f3n yticks . 1 2 3 4 5 6 x = np . random . randn ( 25 ) . cumsum () fig , ax = plt . subplots () ax . plot ( x , linewidth = 3 , color = \"orange\" , marker = \"o\" , markersize = 5 ) plt . xticks ( range ( 0 , 25 , 5 )) #Se ha limitado el eje X de 0 hasta 25, con saltos de 5 unidades. plt . show () Marcas de los ejes Otra funci\u00f3n muy utiilzada para cambiar los valores de los ejes es la funci\u00f3n lim . Puede buscar informaci\u00f3n acerca de ella, aunque se utiliza de forma muy similar a la funci\u00f3n ticks . Grid/Rejilla . En muchas ocasiones necesitar\u00e1 mostrar la rejilla en la figura para que sea m\u00e1s f\u00e1cil la visualizaci\u00f3n de los datos. Para ello utilice la funci\u00f3n grid .","title":"Formato a la figura"},{"location":"9_Graficacion/#ejemplo-resumen","text":"A continuaci\u00f3n se muestra un ejemplo que combina la mayor\u00eda de los elementos vistos hasta el momento. 1 2 3 4 5 6 7 8 9 10 11 x = np . random . randn ( 25 ) . cumsum () y = np . random . randn ( 25 ) . cumsum () fig , ax = plt . subplots () ax . plot ( x , linewidth = 1 , color = \"blue\" , marker = \"o\" , markersize = 4 , label = \"Figura 1\" ) ax . plot ( y , linestyle = \"dotted\" , linewidth = 2 , color = \"red\" , label = \"Figura 2\" ) plt . title ( \"Gr\u00e1fica 1\" , color = \"black\" , fontsize = 15 , fontweight = \"bold\" ) plt . xlabel ( \"T\u00edtulo eje X\" , color = \"black\" , fontsize = 12 , fontweight = \"bold\" ) plt . ylabel ( \"T\u00edtulo eje Y\" , color = \"black\" , fontsize = 12 , fontweight = \"bold\" ) ax . grid () plt . legend () plt . show ()","title":"Ejemplo resumen"},{"location":"9_Graficacion/#otras-figuras","text":"Hasta el momento se ha trabajado con figuras de l\u00edneas, aunque Matplotlib permite trabajar con muchas m\u00e1s figuras. Tenga en cuenta que muchos de los atributos y par\u00e1metros vistos hasta el momento con la funci\u00f3n plot se emplean del mismo modo. Scatter/Dispersi\u00f3n . Para crear un gr\u00e1fico de dispersi\u00f3n utilice la funci\u00f3n scatter . 1 2 3 4 5 6 7 x = np . random . randn ( 25 ) . cumsum () y = np . random . randn ( 25 ) . cumsum () fig , ax = plt . subplots () ax . scatter ( x , y , linewidth = 1 , color = \"red\" , marker = \"o\" ) plt . title ( \"Gr\u00e1fico de dispersi\u00f3n\" , color = \"black\" , fontsize = 15 , fontweight = \"bold\" ) ax . grid () plt . show () \u00c1reas . Para crear un gr\u00e1fico de \u00e1reas utilice la funci\u00f3n fill_between . 1 2 3 4 5 6 x = [ 1 , 2 , 3 , 4 ] y = [ 1 , 2 , 0 , 2 ] fig , ax = plt . subplots () ax . fill_between ( x , y , linewidth = 1 , color = \"red\" ) plt . title ( \"Diagrama de \u00e1reas\" , color = \"black\" , fontsize = 15 , fontweight = \"bold\" ) plt . show () Barras . Para crear un gr\u00e1fico de barras utilice la funci\u00f3n bar . 1 2 3 4 5 6 x = [ 1 , 2 , 3 , 4 ] y = [ 1 , 2 , 7 , 5 ] fig , ax = plt . subplots () ax . bar ( x , y , linewidth = 1 , color = \"red\" ) plt . title ( \"Diagrama de barras\" , color = \"black\" , fontsize = 15 , fontweight = \"bold\" ) plt . show () Diagrama de barras Si desea un diagrama de barras horizontales en lugar de verticales, uticile la funci\u00f3n barh de forma similar a la funci\u00f3n bar . Histograma . Para crear un histograma utilice la funci\u00f3n hist . Dentro de un histograma, hay diferentes par\u00e1metros interesantes a modificar: bins : modificar el n\u00famero de barras de nuestro histograma. range : controla los valores m\u00ednimos y m\u00e1ximos en el histograma. orientation : puede tomar los valores horizontal o vertical , y determina la orientaci\u00f3n del histograma. 1 2 3 4 5 x = np . random . randn ( 1000 ) . cumsum () fig , ax = plt . subplots () ax . hist ( x , color = \"red\" , bins = 10 , range = ( - 5 , 5 ), orientation = \"horizontal\" ) plt . title ( \"Histograma\" , color = \"black\" , fontsize = 15 , fontweight = \"bold\" ) plt . show () Diagrama de sectores . Para crear un diagrama de sectores utilice la funci\u00f3n pie . Al igual que en el histograma, existen par\u00e1metros que debe manejar: Labels. Asocia los sectores a sus etiquetas correspondientes. Autopct. Muestra los porcentajes representados por cada sector. Pctdistance. Distancia del n\u00famero al centro del gr\u00e1fico. Colors. Permite especificar los colores de los sectores. 1 2 3 4 5 x = [ 5 , 3 , 10 , 8 ] nombre = [ \"Primero\" , \"Segundo\" , \"Tercero\" , \"Cuarto\" ] fig , ax = plt . subplots () ax . pie ( x , labels = nombre , autopct = \" %1.1f%% \" , pctdistance = 0.5 ) plt . title ( \"Diagrama sectores\" , color = \"black\" , fontsize = 15 , fontweight = \"bold\" ) Mapa de colores . Para crear un mapa de colores a partir de una matriz utilice la funci\u00f3n imshow . 1 2 3 4 5 6 x = np . random . random (( 15 , 15 )) #Observe c\u00f3mo cambia la entrada para obtener la matriz fig , ax = plt . subplots () ax . imshow ( x ) plt . title ( \"Mapa de color\" , color = \"black\" , fontsize = 15 , fontweight = \"bold\" ) plt . show ()","title":"Otras figuras"},{"location":"9_Graficacion/#exportacion-de-graficas","text":"Despu\u00e9s de crear las figuras, Python nos permite diferentes modos para poder guardarlas: Desde PyCharm . Como habr\u00e1 observado, en todas las salidas de imagen aparece un bot\u00f3n para poder guardar las figuras. savefig() . Desde la propia l\u00ednea de comandos se puede guardar la imagen en el directorio de trabajo o en otro directorio espec\u00edfico: 1 2 3 4 #Para guardar la figura en el directorio de trabajo plt . savefig ( \"Figura_1.png\" ) #Para guardar la figura en otro directorio plt . savefig ( \"C:/Ruta/Figura_1.png\" ) imsave() . Se usa de forma similar al anterior. Indica si hay alguna diferencia de comportamiento respecto al anterior","title":"Exportaci\u00f3n de gr\u00e1ficas"},{"location":"9_Graficacion/#graficas-avanzadas","text":"Las figuras vistas hasta el momento son figuras 2D, aunque matplotlib nos permite tambi\u00e9n crear figuras 3D. A continuaci\u00f3n se muestra un ejemplo de este tipo de gr\u00e1ficas, de las que puede profundizar en el siguiente enlace . 1 2 3 4 5 6 7 import matplotlib.pyplot as plt import numpy as np from mpl_toolkits import mplot3d #Este subm\u00f3dulo permite crear los ejes 3D fig = plt . figure () #Creaci\u00f3n de la figura ax = plt . axes ( projection = \"3d\" ) #Creaci\u00f3n de los ejes plt . show () 1 2 3 4 5 6 7 8 9 10 11 12 import matplotlib.pyplot as plt import numpy as np from mpl_toolkits import mplot3d fig = plt . figure () ax = plt . axes ( projection = \"3d\" ) #Datos para crear una gr\u00e1fica de dispersi\u00f3n x = np . random . normal ( 10 , 100 , 500 ) y = np . random . normal ( 10 , 100 , 500 ) z = np . random . normal ( 10 , 100 , 500 ) scatter = ax . scatter3D ( x , y , z ) plt . show () 1 2 3 4 5 6 7 8 9 10 11 12 13 import matplotlib.pyplot as plt import numpy as np from mpl_toolkits import mplot3d fig = plt . figure () ax = plt . axes ( projection = \"3d\" ) #Datos para crear una gr\u00e1fica de l\u00edneas z = np . linspace ( 0 , 15 , 1000 ) #Esta funci\u00f3n genera un array Numpy entre 0 y 15 con 1000 n\u00fameros #Puede informarse acerca de la funci\u00f3n linspace() y logspace() x = np . sin ( z ) y = np . cos ( z ) ax . plot3D ( x , y , z , \"red\" ) plt . show ()","title":"Gr\u00e1ficas avanzadas"},{"location":"9_Graficacion/#ejercicios","text":"En este apartado de ejercicios le vamos a introducir a los cuadernos de Python . Como viene utilizando hasta el momento, la forma tradicional de crear un programa en Python es crear un archivo .py que almacene el c\u00f3digo fuente de dicho programa. En este caso, en lugar de utilizar esto utilizaremos un cuaderno de Google colab . Los cuadernos en lenguaje de programaci\u00f3n (normalmente conocidos como notebook ) permiten combinar texto y c\u00f3digo, siendo muy \u00fatiles para documentar nuestro trabajo a la vez que probamos c\u00f3digo f\u00e1cilmente. Otro de los cuadernos m\u00e1s utilizados en Python es Jupyter Notebook . A continuaci\u00f3n puede acceder a los ejercicios que se le plantean: Google Colab Notebook . Enlaces de inter\u00e9s Informaci\u00f3n acerca de Matplotlib. Matplotlib. John Hunter & the development team (2021). Informaci\u00f3n acerca de la graficaci\u00f3n 3D. Python Graphics: A Reference for Creating 2D and 3D Images . B.J. Korites (2018).","title":"Ejercicios"},{"location":"AcercaDe/","text":"Este tutorial de programaci\u00f3n ha sido desarrollado por V\u00edctor J. Fern\u00e1ndez Ram\u00edrez como Trabajo de Fin de Grado de la titulaci\u00f3n de Grado de Bioqu\u00edmica en la Universidad de C\u00f3rdoba , y dirigido por el profesor Manuel J. Mar\u00edn Jim\u00e9nez . Fuente: xkcd.com","title":"Acerca de"}]}